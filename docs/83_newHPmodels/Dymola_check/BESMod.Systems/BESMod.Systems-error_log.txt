
Error in model:  BESMod.Systems.Demand.Building.AixLibHighOrder 
Check of <a href="Modelica://BESMod.Systems.Demand.Building.AixLibHighOrder">BESMod.Systems.Demand.Building.AixLibHighOrder</a>:
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall1a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall1a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall1b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall1b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.inside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.inside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.inside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.inside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall1a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall1a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall1b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall1b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall2a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall2a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall3.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall3.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall2b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall2b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall1a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall1a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.roof.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.roof.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall1b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall1b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.inside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.inside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.roof.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children1.roof.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.inside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.inside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.roof.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Bath.roof.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall1a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall1a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.roof.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.roof.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall1b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall1b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inner_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inner_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall2a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall2a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall3.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall3.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall2b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall2b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.roof.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.roof.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as Attic_Ro2Lf5 attic_2Ro_5Rooms in <a href="Modelica://AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope">AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as MixingVolumeMoistAir airload in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom">AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as FluidPort_a port_a in <a href="Modelica://AixLib.Fluid.Interfaces.PartialTwoPort">AixLib.Fluid.Interfaces.PartialTwoPort</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as FluidPort_a port_a in <a href="Modelica://AixLib.Fluid.Interfaces.PartialTwoPort">AixLib.Fluid.Interfaces.PartialTwoPort</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as FluidPort_b port_b in <a href="Modelica://AixLib.Fluid.Interfaces.PartialTwoPort">AixLib.Fluid.Interfaces.PartialTwoPort</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as FluidPort_b port_b in <a href="Modelica://AixLib.Fluid.Interfaces.PartialTwoPort">AixLib.Fluid.Interfaces.PartialTwoPort</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as StaticTwoPortConservationEquation steBal in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as StaticTwoPortConservationEquation steBal in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as ConservationEquation dynBal in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.Fluid.Interfaces.ConservationEquation">AixLib.Fluid.Interfaces.ConservationEquation</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.Fluid.Interfaces.ConservationEquation">AixLib.Fluid.Interfaces.ConservationEquation</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as ConservationEquation dynBal in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as MixingVolumeMoistAir airload in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom">AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom">AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom">AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.roof1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.roof1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.roof2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.roof2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom3.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom3.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom4.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom4.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom5.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom5.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.OW1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.OW1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.OW2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: HOMBuiEnv.wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.OW2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
  Context: <a href="Modelica://AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope">AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium</a>
Check is assuming: useConstVentRate = false
Error: Use of undeclared variable thermOutside
In class <a href="Modelica://BESMod.Systems.Demand.Building.Components.AixLibHighOrderOFD">BESMod.Systems.Demand.Building.Components.AixLibHighOrderOFD</a>.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/Components/AixLibHighOrderOFD.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Demand.Building.AixLibHighOrder#:HOMBuiEnv">HOMBuiEnv</a>.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/AixLibHighOrder.mo, line 35
Errors found in: connect(HOMBuiEnv.wholeHouseBuildingEnvelope.thermOutside, thermOutside)
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/Components/AixLibHighOrderOFD.mo, line 129
Warning: Connect argument was not one of the valid forms, since HOMBuiEnv is not a connector.
Error: Use of undeclared variable HOMBuiEnv.thermOutside
In class <a href="Modelica://BESMod.Systems.Demand.Building.AixLibHighOrder">BESMod.Systems.Demand.Building.AixLibHighOrder</a>.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/AixLibHighOrder.mo, line 2
Errors found in: connect(HOMBuiEnv.thermOutside, tempOutside.port)
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/AixLibHighOrder.mo, line 96
The model contained invalid expressions.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.HeatPumpAndGasBoilerParallel 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPumpAndGasBoilerParallel">BESMod.Systems.Hydraulical.Generation.HeatPumpAndGasBoilerParallel</a>:
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 29
 Component context: parHeaPum
  Component declared as Generic parHeaPum in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps">BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps</a>
Component type specifier MoverBaseDataDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 40
 Component context: parPum
  Component declared as MoverBaseDataDefinition parPum in <a href="Modelica://BESMod.Systems.RecordsCollection.Movers">BESMod.Systems.RecordsCollection.Movers</a>
Component type specifier TemperatureSensorBaseDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 46
 Component context: parTemSen
  Component declared as TemperatureSensorBaseDefinition parTemSen in <a href="Modelica://BESMod.Systems.RecordsCollection.TemperatureSensors">BESMod.Systems.RecordsCollection.TemperatureSensors</a>
Warning: Component type specifier RefrigerantCycleHeatPumpHeating is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/HeatPumps/ModularReversible/BaseClasses/RefrigerantCycle.mo, line 26
 Component context: heatPump.refCyc.refCycHeaPumHea
  Component declared as RefrigerantCycleHeatPumpHeating refCycHeaPumHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump">BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: heatPump.con.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Interfaces/ConservationEquation.mo, line 78
 Component context: pump.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Sources/BaseClasses/PartialSource.mo, line 35
 Component context: bouPum.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: boi.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier ThreeWayValve is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/HeatPumpAndGasBoilerParallel.mo, line 8
 Component context: parThrWayVal
  Component declared as ThreeWayValve parThrWayVal in <a href="Modelica://BESMod.Systems.RecordsCollection.Valves">BESMod.Systems.RecordsCollection.Valves</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Interfaces/ConservationEquation.mo, line 78
 Component context: thrWayVal.threWayValFlow.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Check is assuming: parPum.use_inputFilter = false
Check is assuming: parPum.addPowerToMedium = false
Check is assuming: parThrWayVal.use_inputFilter = false
Check is assuming: Q_flow_nominal = fill(1e-15, 1)
Check is assuming: parHeaPum.dpCon_nominal = 0
Check is assuming: parHeaPum.dpEva_nominal = 0
Warning: Non-literal value.
In nominal attribute for heatPump.port_a1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_a1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.port_b1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_b1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.senTCold.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTCold.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.senTCold.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTCold.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.senTHot.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTHot.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.senTHot.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTHot.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.pressureDrop.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.pressureDrop.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.pressureDrop.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.pressureDrop.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.pressureDrop.dp.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Units.SI">Modelica.Units.SI</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Units.mo, line 237
Used in base-class boi.pressureDrop.PartialTwoPortInterface.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/BaseClasses/PartialResistance.mo, line 3
Warning: Non-literal value.
In nominal attribute for thrWayVal.threWayValFlow.port_1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class thrWayVal.threWayValFlow.port_1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for thrWayVal.threWayValFlow.port_2.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class thrWayVal.threWayValFlow.port_2.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for thrWayVal.threWayValFlow.port_3.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class thrWayVal.threWayValFlow.port_3.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for thrWayVal.threWayValFlow.res1.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class thrWayVal.threWayValFlow.res1.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for thrWayVal.threWayValFlow.res1.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class thrWayVal.threWayValFlow.res1.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for thrWayVal.threWayValFlow.res2.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class thrWayVal.threWayValFlow.res2.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for thrWayVal.threWayValFlow.res2.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class thrWayVal.threWayValFlow.res2.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for thrWayVal.threWayValFlow.res3.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class thrWayVal.threWayValFlow.res3.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for thrWayVal.threWayValFlow.res3.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class thrWayVal.threWayValFlow.res3.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPumpAndGasBoilerParallel#$heatPump.con.vol:dynBal">heatPump.con.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPumpAndGasBoilerParallel#$boi.vol:dynBal">boi.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for boi.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Error: Variable TEvaAmb does not exist in heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.Tests.SolarThermalAndHeatPumpSimple 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.Tests.SolarThermalAndHeatPumpSimple">BESMod.Systems.Hydraulical.Generation.Tests.SolarThermalAndHeatPumpSimple</a>:
Warning: Failed to evaluate and check the size declaration of systemParameters.QBui_flow_nominal.
The definition equation or start value requires a certain size.
Warning: For dimension 1 the size declaration is systemParameters.nZones, and the required size is 1.
Warning: Failed to evaluate and check the size declaration of systemParameters.THydSup_nominal.
The definition equation or start value requires a certain size.
Warning: For dimension 1 the size declaration is systemParameters.nZones, and the required size is 1.
Warning: Non-literal value.
In nominal attribute for generation.solThe.pressureDrop.dp.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Units.SI">Modelica.Units.SI</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Units.mo, line 237
Used in base-class generation.solThe.pressureDrop.PartialTwoPortInterface.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/BaseClasses/PartialResistance.mo, line 3
Error: Variable TEvaAmb does not exist in generation.heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.SimpleSolarThermalWithHeatPump 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.SimpleSolarThermalWithHeatPump">BESMod.Systems.Hydraulical.Generation.SimpleSolarThermalWithHeatPump</a>:
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 29
 Component context: parHeaPum
  Component declared as Generic parHeaPum in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps">BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps</a>
Component type specifier MoverBaseDataDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 40
 Component context: parPum
  Component declared as MoverBaseDataDefinition parPum in <a href="Modelica://BESMod.Systems.RecordsCollection.Movers">BESMod.Systems.RecordsCollection.Movers</a>
Component type specifier TemperatureSensorBaseDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 46
 Component context: parTemSen
  Component declared as TemperatureSensorBaseDefinition parTemSen in <a href="Modelica://BESMod.Systems.RecordsCollection.TemperatureSensors">BESMod.Systems.RecordsCollection.TemperatureSensors</a>
Warning: Component type specifier RefrigerantCycleHeatPumpHeating is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/HeatPumps/ModularReversible/BaseClasses/RefrigerantCycle.mo, line 26
 Component context: heatPump.refCyc.refCycHeaPumHea
  Component declared as RefrigerantCycleHeatPumpHeating refCycHeaPumHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump">BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: heatPump.con.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Interfaces/ConservationEquation.mo, line 78
 Component context: pump.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Sources/BaseClasses/PartialSource.mo, line 35
 Component context: bouPum.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/HeatPumpAndElectricHeater.mo, line 7
 Component context: parEleHea
  Component declared as Generic parEleHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.ElectricHeater">BESMod.Systems.Hydraulical.Generation.RecordsCollection.ElectricHeater</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: eleHea.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/SimpleSolarThermalWithHeatPump.mo, line 13
 Component context: parSolThe
  Component declared as Generic parSolThe in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.SolarThermal">BESMod.Systems.Hydraulical.Generation.RecordsCollection.SolarThermal</a>
Component type specifier MoverBaseDataDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/SimpleSolarThermalWithHeatPump.mo, line 20
 Component context: parPumSolThe
  Component declared as MoverBaseDataDefinition parPumSolThe in <a href="Modelica://BESMod.Systems.RecordsCollection.Movers">BESMod.Systems.RecordsCollection.Movers</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: solThe.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Interfaces/ConservationEquation.mo, line 78
 Component context: pumpSolThe.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Sources/BaseClasses/PartialSource.mo, line 35
 Component context: bou.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Check is assuming: parPum.use_inputFilter = false
Check is assuming: parPum.addPowerToMedium = false
Check is assuming: parPumSolThe.use_inputFilter = false
Check is assuming: parPumSolThe.addPowerToMedium = false
Check is assuming: Q_flow_nominal = fill(1e-15, 2)
Check is assuming: parHeaPum.dpCon_nominal = 0
Check is assuming: parHeaPum.dpEva_nominal = 0
Check is assuming: parEleHea.dp_nominal = 0
Check is assuming: parSolThe.GMax = 0
Check is assuming: parSolThe.dTMax = 0
Warning: Non-literal value.
In nominal attribute for heatPump.port_a1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_a1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.port_b1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_b1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for eleHea.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for eleHea.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for eleHea.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for eleHea.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for eleHea.preDro.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.preDro.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for eleHea.preDro.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.preDro.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for solThe.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for solThe.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for solThe.senTCold.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.senTCold.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for solThe.senTCold.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.senTCold.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for solThe.senTHot.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.senTHot.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for solThe.senTHot.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.senTHot.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for solThe.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for solThe.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for solThe.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for solThe.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for solThe.pressureDrop.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.pressureDrop.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for solThe.pressureDrop.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.pressureDrop.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for solThe.pressureDrop.m_flow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Units.SI">Modelica.Units.SI</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Units.mo, line 237
Used in base-class solThe.pressureDrop.PartialTwoPortInterface.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/BaseClasses/PartialResistance.mo, line 3
Warning: Non-literal value.
In nominal attribute for solThe.pressureDrop.dp.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Units.SI">Modelica.Units.SI</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Units.mo, line 237
Used in base-class solThe.pressureDrop.PartialTwoPortInterface.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/BaseClasses/PartialResistance.mo, line 3
Warning: Non-literal value.
In nominal attribute for pumpSolThe.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pumpSolThe.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pumpSolThe.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pumpSolThe.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pumpSolThe.preSou.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pumpSolThe.preSou.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pumpSolThe.preSou.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pumpSolThe.preSou.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pumpSolThe.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pumpSolThe.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pumpSolThe.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pumpSolThe.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.SimpleSolarThermalWithHeatPump#$heatPump.con.vol:dynBal">heatPump.con.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for eleHea.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.SimpleSolarThermalWithHeatPump#$eleHea.vol:dynBal">eleHea.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for eleHea.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for eleHea.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for solThe.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.SimpleSolarThermalWithHeatPump#$solThe.vol:dynBal">solThe.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for solThe.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for solThe.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class solThe.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Error: Variable TEvaAmb does not exist in heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.HeatPumpAndGasBoilerSerial 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPumpAndGasBoilerSerial">BESMod.Systems.Hydraulical.Generation.HeatPumpAndGasBoilerSerial</a>:
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 29
 Component context: parHeaPum
  Component declared as Generic parHeaPum in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps">BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps</a>
Component type specifier MoverBaseDataDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 40
 Component context: parPum
  Component declared as MoverBaseDataDefinition parPum in <a href="Modelica://BESMod.Systems.RecordsCollection.Movers">BESMod.Systems.RecordsCollection.Movers</a>
Component type specifier TemperatureSensorBaseDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 46
 Component context: parTemSen
  Component declared as TemperatureSensorBaseDefinition parTemSen in <a href="Modelica://BESMod.Systems.RecordsCollection.TemperatureSensors">BESMod.Systems.RecordsCollection.TemperatureSensors</a>
Warning: Component type specifier RefrigerantCycleHeatPumpHeating is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/HeatPumps/ModularReversible/BaseClasses/RefrigerantCycle.mo, line 26
 Component context: heatPump.refCyc.refCycHeaPumHea
  Component declared as RefrigerantCycleHeatPumpHeating refCycHeaPumHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump">BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: heatPump.con.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Interfaces/ConservationEquation.mo, line 78
 Component context: pump.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Sources/BaseClasses/PartialSource.mo, line 35
 Component context: bouPum.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: boi.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Check is assuming: parPum.use_inputFilter = false
Check is assuming: parPum.addPowerToMedium = false
Check is assuming: Q_flow_nominal = fill(1e-15, 1)
Check is assuming: parHeaPum.dpCon_nominal = 0
Check is assuming: parHeaPum.dpEva_nominal = 0
Warning: Non-literal value.
In nominal attribute for heatPump.port_a1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_a1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.port_b1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_b1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.senTCold.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTCold.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.senTCold.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTCold.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.senTHot.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTHot.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.senTHot.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTHot.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.pressureDrop.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.pressureDrop.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.pressureDrop.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.pressureDrop.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.pressureDrop.dp.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Units.SI">Modelica.Units.SI</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Units.mo, line 237
Used in base-class boi.pressureDrop.PartialTwoPortInterface.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/BaseClasses/PartialResistance.mo, line 3
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPumpAndGasBoilerSerial#$heatPump.con.vol:dynBal">heatPump.con.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPumpAndGasBoilerSerial#$boi.vol:dynBal">boi.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for boi.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Error: Variable TEvaAmb does not exist in heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.Tests.HeatPump 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.Tests.HeatPump">BESMod.Systems.Hydraulical.Generation.Tests.HeatPump</a>:
Warning: Failed to evaluate and check the size declaration of systemParameters.QBui_flow_nominal.
The definition equation or start value requires a certain size.
Warning: For dimension 1 the size declaration is systemParameters.nZones, and the required size is 1.
Error: Variable TEvaAmb does not exist in generation.heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.Tests.HeatPumpAndElectricHeater 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.Tests.HeatPumpAndElectricHeater">BESMod.Systems.Hydraulical.Generation.Tests.HeatPumpAndElectricHeater</a>:
Warning: Failed to evaluate and check the size declaration of systemParameters.QBui_flow_nominal.
The definition equation or start value requires a certain size.
Warning: For dimension 1 the size declaration is systemParameters.nZones, and the required size is 1.
Warning: Failed to evaluate and check the size declaration of systemParameters.THydSup_nominal.
The definition equation or start value requires a certain size.
Warning: For dimension 1 the size declaration is systemParameters.nZones, and the required size is 1.
Error: Variable TEvaAmb does not exist in generation.heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.Tests.HeatPumpAndGasBoilerParallel 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.Tests.HeatPumpAndGasBoilerParallel">BESMod.Systems.Hydraulical.Generation.Tests.HeatPumpAndGasBoilerParallel</a>:
Warning: Failed to evaluate and check the size declaration of systemParameters.QBui_flow_nominal.
The definition equation or start value requires a certain size.
Warning: For dimension 1 the size declaration is systemParameters.nZones, and the required size is 1.
Warning: Non-literal value.
In nominal attribute for generation.boi.pressureDrop.dp.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Units.SI">Modelica.Units.SI</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Units.mo, line 237
Used in base-class generation.boi.pressureDrop.PartialTwoPortInterface.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/BaseClasses/PartialResistance.mo, line 3
Error: Variable TEvaAmb does not exist in generation.heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.Tests.SolarThermalAndHeatPumpDetailed 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.Tests.SolarThermalAndHeatPumpDetailed">BESMod.Systems.Hydraulical.Generation.Tests.SolarThermalAndHeatPumpDetailed</a>:
Warning: Failed to evaluate and check the size declaration of systemParameters.QBui_flow_nominal.
The definition equation or start value requires a certain size.
Warning: For dimension 1 the size declaration is systemParameters.nZones, and the required size is 1.
Warning: Failed to evaluate and check the size declaration of systemParameters.THydSup_nominal.
The definition equation or start value requires a certain size.
Warning: For dimension 1 the size declaration is systemParameters.nZones, and the required size is 1.
Error: Variable TEvaAmb does not exist in generation.heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Demand.Building.Components.AixLibHighOrderOFD 
Check of <a href="Modelica://BESMod.Systems.Demand.Building.Components.AixLibHighOrderOFD">BESMod.Systems.Demand.Building.Components.AixLibHighOrderOFD</a>:
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall1a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall1a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall1b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Livingroom.inside_wall1b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.inside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.inside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Hobby.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.inside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.inside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.WC_Storage.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall1a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall1a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall1b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Kitchen.inside_wall1b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall2a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall2a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall3.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall3.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall2b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.groundFloor_Building.Corridor.inside_wall2b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Gr1Uf1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall1a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall1a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.roof.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.roof.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall1b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bedroom.inside_wall1b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.inside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.inside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.roof.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children1.roof.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.inside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.inside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.roof.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Bath.roof.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL1IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.outside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.outside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall1a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall1a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.roof.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.roof.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall1b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Children2.inside_wall1b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow2IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.outside_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.outside_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inner_wall1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inner_wall1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall2a.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall2a.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall3.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall3.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.Ceiling.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.Ceiling.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.floor.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.floor.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall2b.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.inside_wall2b.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.roof.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.upperFloor_Building.Corridor.roof.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1">AixLib.ThermalZones.HighOrder.Rooms.OFD.Ow1IwL2IwS1Lf1At1Ro1</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as Attic_Ro2Lf5 attic_2Ro_5Rooms in <a href="Modelica://AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope">AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as MixingVolumeMoistAir airload in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom">AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as FluidPort_a port_a in <a href="Modelica://AixLib.Fluid.Interfaces.PartialTwoPort">AixLib.Fluid.Interfaces.PartialTwoPort</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as FluidPort_a port_a in <a href="Modelica://AixLib.Fluid.Interfaces.PartialTwoPort">AixLib.Fluid.Interfaces.PartialTwoPort</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as FluidPort_b port_b in <a href="Modelica://AixLib.Fluid.Interfaces.PartialTwoPort">AixLib.Fluid.Interfaces.PartialTwoPort</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as FluidPort_b port_b in <a href="Modelica://AixLib.Fluid.Interfaces.PartialTwoPort">AixLib.Fluid.Interfaces.PartialTwoPort</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as StaticTwoPortConservationEquation steBal in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as StaticTwoPortConservationEquation steBal in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as ConservationEquation dynBal in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.Fluid.Interfaces.ConservationEquation">AixLib.Fluid.Interfaces.ConservationEquation</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.Fluid.Interfaces.ConservationEquation">AixLib.Fluid.Interfaces.ConservationEquation</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as ConservationEquation dynBal in <a href="Modelica://AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume">AixLib.Fluid.MixingVolumes.BaseClasses.PartialMixingVolume</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as MixingVolumeMoistAir airload in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom">AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom">AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
 Component context: AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium
  Component declared as VesselFluidPorts_b ports in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom">AixLib.ThermalZones.HighOrder.Rooms.BaseClasses.PartialRoom</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.roof1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.roof1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.roof2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.roof2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom3.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom3.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom4.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom4.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom5.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.floorRoom5.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.OW1.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.OW1.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Component type specifier CorrSolGain is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/WindowsDoors/BaseClasses/PartialWindow.mo, line 17
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.OW2.windowModel.corrSolGain
  Component declared as CorrSolGain corrSolGain in <a href="Modelica://AixLib.ThermalZones.HighOrder.Components.Walls.Wall">AixLib.ThermalZones.HighOrder.Components.Walls.Wall</a>
Warning: Component type specifier WindowModel is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/Components/Walls/Wall.mo, line 87
 Component context: wholeHouseBuildingEnvelope.attic_2Ro_5Rooms.OW2.windowModel
  Component declared as WindowModel windowModel in <a href="Modelica://AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5">AixLib.ThermalZones.HighOrder.Rooms.OFD.Attic_Ro2Lf5</a>
Warning: Base class Medium is not transitively non-replaceable,
 since it is a short class equal to a replaceable class.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/ThermalZones/HighOrder/House/OFD_MiddleInnerLoadWall/BuildingEnvelope/WholeHouseBuildingEnvelope.mo, line 193
  Context: <a href="Modelica://AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope">AixLib.ThermalZones.HighOrder.House.OFD_MiddleInnerLoadWall.BuildingEnvelope.WholeHouseBuildingEnvelope.Medium</a>
Error: Use of undeclared variable thermOutside
In class <a href="Modelica://BESMod.Systems.Demand.Building.Components.AixLibHighOrderOFD">BESMod.Systems.Demand.Building.Components.AixLibHighOrderOFD</a>.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/Components/AixLibHighOrderOFD.mo, line 2
Errors found in: connect(wholeHouseBuildingEnvelope.thermOutside, thermOutside)
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/Components/AixLibHighOrderOFD.mo, line 129
The model contained invalid expressions.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPumpAndGasBoiler 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPumpAndGasBoiler">BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPumpAndGasBoiler</a>:
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 29
 Component context: parHeaPum
  Component declared as Generic parHeaPum in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps">BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps</a>
Component type specifier MoverBaseDataDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 40
 Component context: parPum
  Component declared as MoverBaseDataDefinition parPum in <a href="Modelica://BESMod.Systems.RecordsCollection.Movers">BESMod.Systems.RecordsCollection.Movers</a>
Component type specifier TemperatureSensorBaseDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 46
 Component context: parTemSen
  Component declared as TemperatureSensorBaseDefinition parTemSen in <a href="Modelica://BESMod.Systems.RecordsCollection.TemperatureSensors">BESMod.Systems.RecordsCollection.TemperatureSensors</a>
Warning: Component type specifier RefrigerantCycleHeatPumpHeating is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/HeatPumps/ModularReversible/BaseClasses/RefrigerantCycle.mo, line 26
 Component context: heatPump.refCyc.refCycHeaPumHea
  Component declared as RefrigerantCycleHeatPumpHeating refCycHeaPumHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump">BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: heatPump.con.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Interfaces/ConservationEquation.mo, line 78
 Component context: pump.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Sources/BaseClasses/PartialSource.mo, line 35
 Component context: bouPum.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: boi.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Check is assuming: parPum.use_inputFilter = false
Check is assuming: parPum.addPowerToMedium = false
Check is assuming: Q_flow_nominal = fill(1e-15, 1)
Check is assuming: parHeaPum.dpCon_nominal = 0
Check is assuming: parHeaPum.dpEva_nominal = 0
Warning: Non-literal value.
In nominal attribute for heatPump.port_a1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_a1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.port_b1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_b1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.senTCold.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTCold.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.senTCold.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTCold.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.senTHot.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTHot.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.senTHot.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senTHot.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.pressureDrop.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.pressureDrop.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for boi.pressureDrop.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.pressureDrop.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for boi.pressureDrop.dp.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Units.SI">Modelica.Units.SI</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Units.mo, line 237
Used in base-class boi.pressureDrop.PartialTwoPortInterface.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/BaseClasses/PartialResistance.mo, line 3
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPumpAndGasBoiler#$heatPump.con.vol:dynBal">heatPump.con.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPumpAndGasBoiler#$boi.vol:dynBal">boi.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for boi.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for boi.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class boi.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Error: Variable TEvaAmb does not exist in heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.DetailedSolarThermalWithHeatPump 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.DetailedSolarThermalWithHeatPump">BESMod.Systems.Hydraulical.Generation.DetailedSolarThermalWithHeatPump</a>:
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 29
 Component context: parHeaPum
  Component declared as Generic parHeaPum in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps">BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps</a>
Component type specifier MoverBaseDataDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 40
 Component context: parPum
  Component declared as MoverBaseDataDefinition parPum in <a href="Modelica://BESMod.Systems.RecordsCollection.Movers">BESMod.Systems.RecordsCollection.Movers</a>
Component type specifier TemperatureSensorBaseDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 46
 Component context: parTemSen
  Component declared as TemperatureSensorBaseDefinition parTemSen in <a href="Modelica://BESMod.Systems.RecordsCollection.TemperatureSensors">BESMod.Systems.RecordsCollection.TemperatureSensors</a>
Warning: Component type specifier RefrigerantCycleHeatPumpHeating is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/HeatPumps/ModularReversible/BaseClasses/RefrigerantCycle.mo, line 26
 Component context: heatPump.refCyc.refCycHeaPumHea
  Component declared as RefrigerantCycleHeatPumpHeating refCycHeaPumHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump">BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump</a>
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/HeatPumpAndElectricHeater.mo, line 7
 Component context: parEleHea
  Component declared as Generic parEleHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.ElectricHeater">BESMod.Systems.Hydraulical.Generation.RecordsCollection.ElectricHeater</a>
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/DetailedSolarThermalWithHeatPump.mo, line 14
 Component context: solarThermalParas
  Component declared as Generic solarThermalParas in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.SolarThermal">BESMod.Systems.Hydraulical.Generation.RecordsCollection.SolarThermal</a>
Component type specifier MoverBaseDataDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/DetailedSolarThermalWithHeatPump.mo, line 21
 Component context: parPumSolThe
  Component declared as MoverBaseDataDefinition parPumSolThe in <a href="Modelica://BESMod.Systems.RecordsCollection.Movers">BESMod.Systems.RecordsCollection.Movers</a>
Check is assuming: parPum.use_inputFilter = false
Check is assuming: parPum.addPowerToMedium = false
Check is assuming: parPumSolThe.use_inputFilter = false
Check is assuming: parPumSolThe.addPowerToMedium = false
Check is assuming: Q_flow_nominal = fill(1e-15, 2)
Check is assuming: parHeaPum.dpCon_nominal = 0
Check is assuming: parHeaPum.dpEva_nominal = 0
Check is assuming: parEleHea.dp_nominal = 0
Check is assuming: solarThermalParas.GMax = 0
Check is assuming: solarThermalParas.dTMax = 0
Warning: Non-literal value.
In nominal attribute for solCol.res.m_flow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Units.SI">Modelica.Units.SI</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Units.mo, line 237
Used in base-class solCol.res.PartialTwoPortInterface.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/Buildings/Buildings/Fluid/BaseClasses/PartialResistance.mo, line 3
Error: Variable TEvaAmb does not exist in heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump">BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump</a>:
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 29
 Component context: parHeaPum
  Component declared as Generic parHeaPum in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps">BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps</a>
Component type specifier MoverBaseDataDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 40
 Component context: parPum
  Component declared as MoverBaseDataDefinition parPum in <a href="Modelica://BESMod.Systems.RecordsCollection.Movers">BESMod.Systems.RecordsCollection.Movers</a>
Component type specifier TemperatureSensorBaseDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 46
 Component context: parTemSen
  Component declared as TemperatureSensorBaseDefinition parTemSen in <a href="Modelica://BESMod.Systems.RecordsCollection.TemperatureSensors">BESMod.Systems.RecordsCollection.TemperatureSensors</a>
Warning: Component type specifier RefrigerantCycleHeatPumpHeating is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/HeatPumps/ModularReversible/BaseClasses/RefrigerantCycle.mo, line 26
 Component context: heatPump.refCyc.refCycHeaPumHea
  Component declared as RefrigerantCycleHeatPumpHeating refCycHeaPumHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump">BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: heatPump.con.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Interfaces/ConservationEquation.mo, line 78
 Component context: pump.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Sources/BaseClasses/PartialSource.mo, line 35
 Component context: bouPum.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Check is assuming: parPum.use_inputFilter = false
Check is assuming: parPum.addPowerToMedium = false
Check is assuming: genDesTyp = BESMod.Systems.Hydraulical.Generation.Types.GenerationDesign.Monovalent
Check is assuming: Q_flow_nominal = fill(1e-15, 1)
Check is assuming: parHeaPum.dpCon_nominal = 0
Check is assuming: parHeaPum.dpEva_nominal = 0
Warning: Non-literal value.
In nominal attribute for heatPump.port_a1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_a1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.port_b1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_b1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump#$heatPump.con.vol:dynBal">heatPump.con.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Error: Variable TEvaAmb does not exist in heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.HeatPumpAndElectricHeater 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPumpAndElectricHeater">BESMod.Systems.Hydraulical.Generation.HeatPumpAndElectricHeater</a>:
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 29
 Component context: parHeaPum
  Component declared as Generic parHeaPum in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps">BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps</a>
Component type specifier MoverBaseDataDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 40
 Component context: parPum
  Component declared as MoverBaseDataDefinition parPum in <a href="Modelica://BESMod.Systems.RecordsCollection.Movers">BESMod.Systems.RecordsCollection.Movers</a>
Component type specifier TemperatureSensorBaseDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 46
 Component context: parTemSen
  Component declared as TemperatureSensorBaseDefinition parTemSen in <a href="Modelica://BESMod.Systems.RecordsCollection.TemperatureSensors">BESMod.Systems.RecordsCollection.TemperatureSensors</a>
Warning: Component type specifier RefrigerantCycleHeatPumpHeating is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/HeatPumps/ModularReversible/BaseClasses/RefrigerantCycle.mo, line 26
 Component context: heatPump.refCyc.refCycHeaPumHea
  Component declared as RefrigerantCycleHeatPumpHeating refCycHeaPumHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump">BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: heatPump.con.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Interfaces/ConservationEquation.mo, line 78
 Component context: pump.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Sources/BaseClasses/PartialSource.mo, line 35
 Component context: bouPum.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/HeatPumpAndElectricHeater.mo, line 7
 Component context: parEleHea
  Component declared as Generic parEleHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.ElectricHeater">BESMod.Systems.Hydraulical.Generation.RecordsCollection.ElectricHeater</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: eleHea.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Check is assuming: parPum.use_inputFilter = false
Check is assuming: parPum.addPowerToMedium = false
Check is assuming: Q_flow_nominal = fill(1e-15, 1)
Check is assuming: parHeaPum.dpCon_nominal = 0
Check is assuming: parHeaPum.dpEva_nominal = 0
Check is assuming: parEleHea.dp_nominal = 0
Warning: Non-literal value.
In nominal attribute for heatPump.port_a1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_a1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.port_b1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_b1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for eleHea.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for eleHea.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for eleHea.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for eleHea.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for eleHea.preDro.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.preDro.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for eleHea.preDro.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.preDro.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPumpAndElectricHeater#$heatPump.con.vol:dynBal">heatPump.con.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for eleHea.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPumpAndElectricHeater#$eleHea.vol:dynBal">eleHea.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for eleHea.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for eleHea.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class eleHea.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Error: Variable TEvaAmb does not exist in heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.Tests.HeatPumpAndGasBoilerSeries 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.Tests.HeatPumpAndGasBoilerSeries">BESMod.Systems.Hydraulical.Generation.Tests.HeatPumpAndGasBoilerSeries</a>:
Warning: Failed to evaluate and check the size declaration of systemParameters.QBui_flow_nominal.
The definition equation or start value requires a certain size.
Warning: For dimension 1 the size declaration is systemParameters.nZones, and the required size is 1.
Warning: Non-literal value.
In nominal attribute for generation.boi.pressureDrop.dp.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Units.SI">Modelica.Units.SI</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Units.mo, line 237
Used in base-class generation.boi.pressureDrop.PartialTwoPortInterface.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/BaseClasses/PartialResistance.mo, line 3
Error: Variable TEvaAmb does not exist in generation.heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Hydraulical.Generation.HeatPump 
Check of <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPump">BESMod.Systems.Hydraulical.Generation.HeatPump</a>:
Component type specifier Generic is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 29
 Component context: parHeaPum
  Component declared as Generic parHeaPum in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps">BESMod.Systems.Hydraulical.Generation.RecordsCollection.HeatPumps</a>
Component type specifier MoverBaseDataDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 40
 Component context: parPum
  Component declared as MoverBaseDataDefinition parPum in <a href="Modelica://BESMod.Systems.RecordsCollection.Movers">BESMod.Systems.RecordsCollection.Movers</a>
Component type specifier TemperatureSensorBaseDefinition is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Hydraulical/Generation/BaseClasses/PartialHeatPump.mo, line 46
 Component context: parTemSen
  Component declared as TemperatureSensorBaseDefinition parTemSen in <a href="Modelica://BESMod.Systems.RecordsCollection.TemperatureSensors">BESMod.Systems.RecordsCollection.TemperatureSensors</a>
Warning: Component type specifier RefrigerantCycleHeatPumpHeating is equal to a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/HeatPumps/ModularReversible/BaseClasses/RefrigerantCycle.mo, line 26
 Component context: heatPump.refCyc.refCycHeaPumHea
  Component declared as RefrigerantCycleHeatPumpHeating refCycHeaPumHea in <a href="Modelica://BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump">BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialHeatPump</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/Interfaces/ConservationEquation.mo, line 81
 Component context: heatPump.con.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Interfaces/ConservationEquation.mo, line 78
 Component context: pump.vol.dynBal.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Component type specifier BaseProperties is a partial type
  It must be redeclared before being used.
  File: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/IBPSA/IBPSA/Fluid/Sources/BaseClasses/PartialSource.mo, line 35
 Component context: bouPum.medium
  Component declared as BaseProperties medium in <a href="Modelica://Modelica.Media.Interfaces.PartialMedium">Modelica.Media.Interfaces.PartialMedium</a>
Check is assuming: parPum.use_inputFilter = false
Check is assuming: parPum.addPowerToMedium = false
Check is assuming: Q_flow_nominal = fill(1e-15, 1)
Check is assuming: parHeaPum.dpCon_nominal = 0
Check is assuming: parHeaPum.dpEva_nominal = 0
Warning: Non-literal value.
In nominal attribute for heatPump.port_a1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_a1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.port_b1.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.port_b1.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.con.preDro.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.preDro.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for heatPump.mCon_flow.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.mCon_flow.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.preSou.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.preSou.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for pump.senMasFlo.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class pump.senMasFlo.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_a.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_a.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 25
Warning: Non-literal value.
In nominal attribute for senTGenOut.port_b.h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class senTGenOut.port_b.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Interfaces.mo, line 45
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.hOut.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Blocks.Interfaces">Modelica.Blocks.Interfaces</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Blocks/Interfaces.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Hydraulical.Generation.HeatPump#$heatPump.con.vol:dynBal">heatPump.con.vol.dynBal</a>.
  Near file: /builds/EBC/EBC_all/github_ci/BESMod/installed_dependencies/AixLib/AixLib/Fluid/MixingVolumes/BaseClasses/PartialMixingVolume.mo, line 73
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[1].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Warning: Non-literal value.
In nominal attribute for heatPump.con.vol.dynBal.ports[2].h_outflow.
Ignoring nominal attribute.
In class <a href="Modelica://Modelica.Media.Interfaces.Types">Modelica.Media.Interfaces.Types</a>.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Media/package.mo, line 3921
Used in base-class heatPump.con.vol.dynBal.ports.FluidPort.
  Near file: /opt/dymola-2022-x86_64/Modelica/Library/Modelica 4.0.0/Fluid/Vessels.mo, line 711
Error: Variable TEvaAmb does not exist in heatPump.
The model contained invalid connect statements.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.


Error in model:  BESMod.Systems.Demand.Building.HeatDemand.CalcHeaDemHOM 
Check of <a href="Modelica://BESMod.Systems.Demand.Building.HeatDemand.CalcHeaDemHOM">BESMod.Systems.Demand.Building.HeatDemand.CalcHeaDemHOM</a>:
Error: Use of undeclared variable thermOutside
In class <a href="Modelica://BESMod.Systems.Demand.Building.Components.AixLibHighOrderOFD">BESMod.Systems.Demand.Building.Components.AixLibHighOrderOFD</a>.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/Components/AixLibHighOrderOFD.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Demand.Building.HeatDemand.CalcHeaDemHOM#$building:HOMBuiEnv">building.HOMBuiEnv</a>.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/AixLibHighOrder.mo, line 35
Errors found in: connect(building.HOMBuiEnv.wholeHouseBuildingEnvelope.thermOutside, thermOutside)
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/Components/AixLibHighOrderOFD.mo, line 129
Warning: Connect argument was not one of the valid forms, since building.HOMBuiEnv is not a connector.
Error: Use of undeclared variable HOMBuiEnv.thermOutside
In class <a href="Modelica://BESMod.Systems.Demand.Building.AixLibHighOrder">BESMod.Systems.Demand.Building.AixLibHighOrder</a>.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/AixLibHighOrder.mo, line 2
Used in component <a href="Modelica://BESMod.Systems.Demand.Building.HeatDemand.CalcHeaDemHOM#:building">building</a>.
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/HeatDemand/CalcHeaDemHOM.mo, line 29
Errors found in: connect(HOMBuiEnv.thermOutside, building.tempOutside.port)
  File: /builds/EBC/EBC_all/github_ci/BESMod/BESMod/Systems/Demand/Building/AixLibHighOrder.mo, line 96
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
Error: Wrong number of arguments in
AixLib.DataBase.ThermalZones.ZoneRecordDummy()
There should be 89 arguments.
The function is declared as:
function <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> 
  input  Modelica.Units.SI.Temperature Tx_0start  := 1E-15 "Initial temperature";
  input  Boolean withAirCap  := true "Consider capacity of indoor air";
  input  Modelica.Units.SI.Volume VAir  := 1E+60 "Air volume of the zone";
  input  Modelica.Units.SI.Area AZone  := 1E+60 "Net floor area of zone";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRad  := 1E-15 "Coefficient of heat transfer for linearized radiation exchange between walls";
  input  Modelica.Units.SI.Angle lat  := 1E-15 "Latitude of zone location";
  input  Integer nOrientations  := 1 "Number of total facades with different
   combination of tilt and orientation";
  input  Modelica.Units.SI.Area AWin[nOrientations]  := fill(1E-15, nOrientations) "Areas of windows by orientations";
  input  Modelica.Units.SI.Area ATransparent[nOrientations]  := fill(1E-15, nOrientations) "Areas of transparent (solar radiation transmittend) elements by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWin  := 1E-15 "Convective coefficient of heat transfer of windows (indoor)";
  input  Modelica.Units.SI.ThermalResistance RWin  := 1E+60 "Resistor for windows";
  input  Modelica.Units.SI.TransmissionCoefficient gWin  := 1E-15 "Total energy transmittance of windows";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer UWin  := 1E-15 "Thermal transmission coefficient of windows";
  input  Real ratioWinConRad  := 1E-15 "Ratio for windows between convective and radiative heat emission";
  input  Modelica.Units.SI.Area AExt[nOrientations]  := fill(1E+60, nOrientations) "Areas of exterior walls by orientations";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConExt  := 1E-15 "Convective coefficient of heat transfer for exterior walls (indoor)";
  input  Integer nExt  := 1 "Number of RC-elements of exterior walls";
  input  Modelica.Units.SI.ThermalResistance RExt[nExt]  := fill(1E+60, nExt) "Resistances of exterior walls, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RExtRem  := 1E+60 "Resistance of remaining resistor RExtRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CExt[nExt]  := fill(1E+60, nExt) "Heat capacities of exterior walls, from inside to outside";
  input  Modelica.Units.SI.Area AInt  := 1E+60 "Area of interior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConInt  := 1E-15 "Convective coefficient of heat transfer of interior walls (indoor)";
  input  Integer nInt  := 1 "Number of RC-elements of interior walls";
  input  Modelica.Units.SI.ThermalResistance RInt[nInt]  := fill(1E+60, nExt) "Resistances of interior wall, from port to center";
  input  Modelica.Units.SI.HeatCapacity CInt[nInt]  := fill(1E+60, nExt) "Heat capacities of interior walls, from port to center";
  input  Modelica.Units.SI.Area AFloor  := 1E+60 "Area of floor plate";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConFloor  := 1E-15 "Convective coefficient of heat transfer of floor plate (indoor)";
  input  Integer nFloor  := 1 "Number of RC-elements of floor plate";
  input  Modelica.Units.SI.ThermalResistance RFloor[nFloor]  := fill(1E+60, nFloor) "Resistances of floor plate, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RFloorRem  := 1E+60 "Resistance of remaining resistor RFloorRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CFloor[nFloor]  := fill(1E+60, nFloor) "Heat capacities of floor plate, from inside to outside";
  input  Modelica.Units.SI.Area ARoof  := 1E+60 "Area of roof";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoof  := 1E-15 "Convective coefficient of heat transfer of roof (indoor)";
  input  Integer nRoof  := 1 "Number of RC-elements of roof";
  input  Modelica.Units.SI.ThermalResistance RRoof[nRoof]  := fill(1E+60, nRoof) "Resistances of roof, from inside to outside";
  input  Modelica.Units.SI.ThermalResistance RRoofRem  := 1E+60 "Resistance of remaining resistor RRoofRem between capacity n and outside";
  input  Modelica.Units.SI.HeatCapacity CRoof[nRoof]  := fill(1E+60, nRoof) "Heat capacities of roof, from inside to outside";
  input  Integer nOrientationsRoof  := 1 "Number of orientations for roof";
  input  Modelica.Units.SI.Angle tiltRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Tilts of roof";
  input  Modelica.Units.SI.Angle aziRoof[nOrientationsRoof]  := fill(1E-15, nOrientationsRoof) "Azimuths of roof";
  input  Real wfRoof[nOrientationsRoof]  := fill(1E-15/nOrientationsRoof, nOrientationsRoof) "Weight factors of the roof";
  input  Modelica.Units.SI.Emissivity aRoof  := 1E-15 "Coefficient of absorption of roof (outdoor)";
  input  Modelica.Units.SI.Emissivity aExt  := 1E-15 "Coefficient of absorption of exterior walls (outdoor)";
  input  Modelica.Units.SI.Temperature TSoil  := 1E-15 "Temperature of soil";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWallOut  := 1E-15 "Exterior walls convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadWall  := 1E-15 "Coefficient of heat transfer for linearized radiation for exterior walls";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConWinOut  := 1E-15 "Windows' convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hConRoofOut  := 1E-15 "Roof's convective coefficient of heat transfer (outdoor)";
  input  Modelica.Units.SI.CoefficientOfHeatTransfer hRadRoof  := 1E-15 "Coefficient of heat transfer for linearized radiation for roof";
  input  Modelica.Units.SI.Angle tiltExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Tilts of exterior walls";
  input  Modelica.Units.SI.Angle aziExtWalls[nOrientations]  := fill(1E-15, nOrientations) "Azimuths of exterior walls";
  input  Real wfWall[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the walls";
  input  Real wfWin[nOrientations]  := fill(1/nOrientations, nOrientations) "Weight factors of the windows";
  input  Real wfGro  := 1E-15 "Weight factor of the ground";
  input  Real specificPeople  := 1E-15 "people per squaremeter";
  input  Real activityDegree  := 1E-15 "acitivity degree of people in met";
  input  Modelica.Units.SI.HeatFlowRate fixedHeatFlowRatePersons  := 1E-15 "Area specific heatflowrate by persons in case of temperature independent
    calculation";
  input  Real ratioConvectiveHeatPeople  := 1E-15 "Ratio of convective heat from overall heat output for people";
  input  Real internalGainsMoistureNoPeople  := 1E-15 "internal moisture production of plants, etc. except from people in g/(h m²)";
  input  Real internalGainsMachinesSpecific  := 1E-15 "Heat Flux of machines";
  input  Real ratioConvectiveHeatMachines  := 1E-15 "Ratio of convective heat from overall heat output for machines";
  input  Modelica.Units.SI.HeatFlux lightingPowerSpecific  := 1E-15 "Heat flux of lighting";
  input  Real ratioConvectiveHeatLighting  := 1E-15 "Ratio of convective heat from overall heat output for lights";
  input  Boolean useConstantACHrate  := false "Choose if a constant infiltration rate is used";
  input  Real baseACH  := 1E-15 "Base ACH rate for ventilation controller";
  input  Real maxUserACH  := 1 "Additional ACH value for max. user activity";
  input  Real maxOverheatingACH[2]  := {1E+60, 1E-15} "Additional ACH value when overheating appears, transition range";
  input  Real maxSummerACH[3]  := {1E-15, 1E-15, 2E-15} "Additional ACH in summer, Tmin, Tmax";
  input  Real winterReduction[3]  := {1E-15, 1E-15, 2E-15} "Reduction factor of userACH for cold weather";
  input  Boolean withAHU  := false "Zone is connected to central air handling unit";
  input  Real minAHU  := 1E-15 "Minimum specific air flow supplied by the AHU";
  input  Real maxAHU  := 2E-15 "Maximum specific air flow supplied by the AHU";
  input  Real shadingFactor[nOrientations]  := fill(1, nOrientations) "Fc-Value: Factor representing how much of the actual solar irradiation goes through the sunblind and enters the window element, for the case, that the sunblind is activated. Defaults to 1, i.e. no shading is active. External sunblinds.";
  input  Real maxIrr[nOrientations]  := fill(0, nOrientations) "Threshold value above which the sunblind (external) becomes active for the whole zone. Threshold regards to the incoming irradiation level with the window direction. This value does not account for heat flux due to the outside temperature.";
  input  Real hHeat  := 2E-15 "Upper limit controller output";
  input  Real lHeat  := 1E-15 "Lower limit controller output";
  input  Real KRHeat  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNHeat  := 1E-15 "Time constant of the controller";
  input  Boolean HeaterOn  := false "Use heater component";
  input  Real hCool  := -1E-15 "Upper limit controller output";
  input  Real lCool  := -2E-15 "Lower limit controller output";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacOut  := 1E-15 "Factor for heat load calculation (part 1) , needs to be multiplied with (indoor set temperature - nominal outside temperature)";
  input  Modelica.Units.SI.ThermalConductance heaLoadFacGrd  := 1E-15 "Factor for heat load calculation, (part 2), needs to be multiplied with (indoor set temperature - nominal ground temperature)";
  input  Real KRCool  := 1E-15 "Gain of the controller";
  input  Modelica.Units.SI.Time TNCool  := 1E-15 "Time constant of the controller";
  input  Boolean CoolerOn  := false "Use chiller component";
  input  Modelica.Units.SI.Temperature TThresholdHeater  := 1E-15 "Threshold temperature below ideal heater is used";
  input  Modelica.Units.SI.Temperature TThresholdCooler  := 2E-15 "Threshold temperature above ideal cooler is used";
  input  Boolean withIdealThresholds  := false "Sets if the threshold temperatures for ideal heater and cooler should
        be used";
  output  <a href="Modelica://AixLib.DataBase.ThermalZones.ZoneRecordDummy">AixLib.DataBase.ThermalZones.ZoneRecordDummy</a> x_0out ;
end AixLib.DataBase.ThermalZones.ZoneRecordDummy;
The model contained invalid expressions.
Check aborted.
Warning: WARNINGS have been issued.
Error: ERRORS have been issued.

