within BESMod;
package HugosProject
  package Components
    "Package for all additional compontents developted for this project"
    extends Modelica.Icons.Package;

    package Pumps "Package for pumps"
      extends Modelica.Icons.InternalPackage;

      model ArtificalPumpIsotermhal
        "Pump without temperature losses"
      extends BaseClasses.PartialArtificalPumpT(bou_source(use_T_in=true), final
          bou_sink(final nPorts=1));
        IBPSA.Fluid.Sensors.TemperatureTwoPort senTem(
          redeclare final package Medium = Medium,
          allowFlowReversal=false,                     m_flow_nominal=m_flow_nominal)
          annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
          "Nominal mass flow rate, used for regularization near zero flow";
      equation
        connect(port_a, senTem.port_a)
          annotation (Line(points={{-100,0},{-90,0}}, color={0,127,255}));
        connect(bou_sink.ports[1], senTem.port_b)
          annotation (Line(points={{-62,0},{-70,0}}, color={0,127,255}));
      connect(senTem.T, bou_source.T_in) annotation (Line(points={{-80,11},{-78,11},
              {-78,26},{-40,26},{-40,24},{-16,24},{-16,4},{58,4}}, color={0,0,127}));
      end ArtificalPumpIsotermhal;

      model ArtificalPump_h_in "Artifical pump with enthalpy as input"
        extends BaseClasses.PartialArtificalPump_h(bou_sink(nPorts=1), bou_source(
              use_h_in=true));
        Modelica.Blocks.Interfaces.RealInput h_flow_in(final unit="J/(kg)")
          "Prescribed enthaply flow rate" annotation (Placement(transformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-60,120}), iconTransformation(
              extent={{-20,-20},{20,20}},
              rotation=270,
              origin={-84,114})));
      equation
        connect(port_a, bou_sink.ports[1])
          annotation (Line(points={{-100,0},{-62,0}}, color={0,127,255}));
        connect(h_flow_in, bou_source.h_in) annotation (Line(points={{-60,120},{-60,
                42},{-28,42},{-28,4},{50,4}},
                                          color={0,0,127}));
      end ArtificalPump_h_in;

      model ArtificalPumpFixedT
        "Temperature of source is a given fixed value"
        extends BaseClasses.PartialArtificalPumpT(final bou_sink(nPorts=1),
            bou_source(final T=T_fixed));
        parameter Modelica.Media.Interfaces.Types.Temperature T_fixed=Medium.T_default
          "Fixed value of temperature for outlet of pump";
      equation
        connect(bou_sink.ports[1], port_a)
          annotation (Line(points={{-62,0},{-100,0}}, color={0,127,255}));
      end ArtificalPumpFixedT;

      package BaseClasses "Base Classes for pumps"
        partial model PartialArtificalPump
          "Partial model a sink combined with a source to avoid calculation of pump characteristics (time-consuming)"
          extends IBPSA.Fluid.Interfaces.PartialTwoPort;

          parameter Modelica.Media.Interfaces.Types.AbsolutePressure p=Medium.p_default
          "Fixed value of pressure";

          IBPSA.Fluid.Sources.Boundary_ph bou_sink(redeclare package Medium = Medium,
              p=p)
            annotation (Placement(transformation(extent={{-42,-10},{-62,10}})));
          Modelica.Blocks.Interfaces.RealInput m_flow_in(final unit="kg/s")
            "Prescribed mass flow rate"
            annotation (Placement(transformation(extent={{-20,-20},{20,20}},
                rotation=270,
                origin={0,120}),                                                iconTransformation(extent={{-20,-20},
                    {20,20}},
                rotation=270,
                origin={0,116})));

          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                      Ellipse(extent = {{-100, 96}, {100, -104}},
          lineColor = {0, 0, 0}, fillColor = {0, 127, 0},
                    fillPattern=FillPattern.Solid),
                    Polygon(points = {{-42, 70}, {78, -4}, {-42, -78}, {-42, 70}},
                    lineColor = {0, 0, 0}, fillColor = {175, 175, 175},
                    fillPattern=FillPattern.Solid)}),                    Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end PartialArtificalPump;

        partial model PartialArtificalPump_h
          extends PartialArtificalPump;
          IBPSA.Fluid.Sources.MassFlowSource_h bou_source(
            redeclare package Medium = Medium,             use_m_flow_in=true, nPorts=1)
            annotation (Placement(transformation(extent={{52,-10},{72,10}})));
        equation
          connect(bou_source.ports[1], port_b)
            annotation (Line(points={{72,0},{100,0}}, color={0,127,255}));
          connect(m_flow_in, bou_source.m_flow_in)
            annotation (Line(points={{0,120},{0,10},{50,10},{50,8}}, color={0,0,127}));
        end PartialArtificalPump_h;

        partial model PartialArtificalPumpT "Setting m_flow and temperature possible"
          extends PartialArtificalPump;
          IBPSA.Fluid.Sources.MassFlowSource_T bou_source(
            redeclare package Medium = Medium,             final use_m_flow_in=true,
              nPorts=1)
            annotation (Placement(transformation(extent={{60,-10},{80,10}})));
        equation
          connect(bou_source.ports[1], port_b)
            annotation (Line(points={{80,0},{100,0}}, color={0,127,255}));
          connect(m_flow_in, bou_source.m_flow_in)
            annotation (Line(points={{0,120},{0,8},{58,8}}, color={0,0,127}));
        end PartialArtificalPumpT;
      end BaseClasses;
    end Pumps;

    package UFH
      extends Modelica.Icons.InternalPackage;

      model PanelHeating
        "A panel heating for e.g. floor heating with discretization"

        extends Modelica.Fluid.Interfaces.PartialTwoPort;

        replaceable parameter
          BESMod.HugosProject.Components.UFH.ActiveWallBaseDataDefinition floorHeatingType
          constrainedby
          BESMod.HugosProject.Components.UFH.ActiveWallBaseDataDefinition
          annotation (Dialog(group="Type"), choicesAllMatching=true);

        parameter Boolean isFloor =  true "Floor or Ceiling heating"
          annotation(Dialog(compact = true, descriptionLabel = true), choices(
            choice = true "Floorheating",
            choice = false "Ceilingheating",
            radioButtons = true));
        parameter Modelica.Units.SI.Length Spacing=Modelica.Constants.pi*
            floorHeatingType.k_top*floorHeatingType.diameter*
            AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.logDT({
            floorHeatingType.Temp_nom[1],floorHeatingType.Temp_nom[2],
            floorHeatingType.Temp_nom[3]})/(floorHeatingType.q_dot_nom*2)
          "Spacing of Pipe";
        parameter Integer dis(min=1) = 5 "Number of Discreatisation Layers";

        parameter Modelica.Units.SI.Area A "Area of floor / heating panel part";

        parameter Modelica.Units.SI.Temperature T0=
            Modelica.Units.Conversions.from_degC(20)
          "Initial temperature, in degrees Celsius";
        parameter Integer calcMethod=2 "Calculation method for convective heat transfer coefficient at surface" annotation (Dialog(group="Heat convection",
              descriptionLabel=true), choices(
            choice=1 "EN ISO 6946 Appendix A >>Flat Surfaces<<",
            choice=2 "By Bernd Glueck",
            choice=3 "Custom hCon (constant)",
            radioButtons=true));

        parameter Modelica.Units.SI.CoefficientOfHeatTransfer hCon_const=2.5
          "Custom convective heat transfer coefficient" annotation (Dialog(
            group="Heat convection",
            descriptionLabel=true,
            enable=if calcMethod == 3 then true else false));

        final parameter Modelica.Units.SI.Emissivity eps=floorHeatingType.eps
          "Emissivity";

        final parameter Real cTopRatio(min=0,max=1)= floorHeatingType.c_top_ratio;

        final parameter
          AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.HeatCapacityPerArea cFloorHeating=
            floorHeatingType.C_ActivatedElement;

        final parameter
          AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.HeatCapacityPerArea cTop=
            cFloorHeating*cTopRatio;

        final parameter
          AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.HeatCapacityPerArea cDown=
            cFloorHeating*(1 - cTopRatio);

        final parameter Modelica.Units.SI.Length tubeLength=A/Spacing;

        final parameter Modelica.Units.SI.Volume VWater=
            Modelica.Units.Conversions.from_litre(Modelica.Constants.pi*
            floorHeatingType.diameter^2*tubeLength/4) "Volume of Water";

        // ACCORDING TO GLUECK, Bauteilaktivierung 1999

        // According to equations 7.91 (for heat flow up) and 7.93 (for heat flow down) from page 41
        //   final parameter Modelica.SIunits.Temperature T_Floor_nom= if Floor then
        //     (floorHeatingType.q_dot_nom/8.92)^(1/1.1) + floorHeatingType.Temp_nom[3]
        //     else floorHeatingType.q_dot_nom/6.7 + floorHeatingType.Temp_nom[3];

        final parameter Modelica.Units.SI.CoefficientOfHeatTransfer kTop_nominal=
            floorHeatingType.k_top;

        final parameter Modelica.Units.SI.CoefficientOfHeatTransfer kDown_nominal=
            floorHeatingType.k_down;

        Modelica.Fluid.Sensors.TemperatureTwoPort TFlow(redeclare package
            Medium =
              Medium)
          annotation (Placement(transformation(extent={{-70,-40},{-50,-20}})));
        Modelica.Fluid.Sensors.TemperatureTwoPort TReturn(redeclare package
            Medium =
              Medium)
          annotation (Placement(transformation(extent={{60,-36},{80,-16}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a ThermDown annotation (
            Placement(transformation(extent={{-10,-72},{10,-52}}),
              iconTransformation(extent={{-2,-38},{18,-18}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a thermConv annotation (
            Placement(transformation(extent={{4,48},{24,68}}), iconTransformation(
                extent={{4,30},{24,50}})));
        AixLib.Utilities.Interfaces.RadPort starRad annotation (Placement(transformation(extent={{-26,50},{-6,70}}), iconTransformation(extent={{-22,28},{-2,48}})));
        PanelHeatingSegment panelHeatingSegment[dis](
          redeclare package Medium = Medium,
          each final A=tubeLength*floorHeatingType.diameter*Modelica.Constants.pi/dis/
              2,
          each final eps=eps,
          each final T0=T0,
          each final VWater=VWater/dis,
          each final kTop=kTop_nominal,
          each final kDown=kDown_nominal,
          each final cTop=cTop,
          each final cDown=cDown,
          each final isFloor=isFloor,
          each final calcMethod=calcMethod,
          each final hCon_const=hCon_const,
          A_floor=A) annotation (Placement(transformation(extent={{-58,1},{-8,51}})));

        AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.PressureDropPH pressureDrop(
          redeclare package Medium = Medium,
          final tubeLength=tubeLength,
          final n=floorHeatingType.PressureDropExponent,
          final m=floorHeatingType.PressureDropCoefficient)
          annotation (Placement(transformation(extent={{8,0},{54,52}})));
      equation

        // HEAT CONNECTIONS
        for i in 1:dis loop
          connect(panelHeatingSegment[i].thermConvWall, ThermDown);
          connect(panelHeatingSegment[i].thermConvRoom, thermConv);
          connect(panelHeatingSegment[i].starRad, starRad);
        end for;

        // FLOW CONNECTIONS

        //OUTER CONNECTIONS

        connect(TFlow.port_b, panelHeatingSegment[1].port_a);
        connect(pressureDrop.port_a, panelHeatingSegment[dis].port_b);

        //INNER CONNECTIONS

        if dis > 1 then
          for i in 1:(dis-1) loop
            connect(panelHeatingSegment[i].port_b, panelHeatingSegment[i + 1].port_a);
          end for;
        end if;

        connect(port_a, TFlow.port_a) annotation (Line(
            points={{-100,0},{-88,0},{-88,-30},{-70,-30}},
            color={0,127,255},
            smooth=Smooth.None));

        connect(TReturn.port_b, port_b) annotation (Line(
            points={{80,-26},{84,-26},{84,0},{100,0}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(pressureDrop.port_b, TReturn.port_a) annotation (Line(
            points={{54,26},{60,26},{60,-26}},
            color={0,127,255},
            smooth=Smooth.None));

      annotation (Diagram(graphics,
                          coordinateSystem(preserveAspectRatio=false,extent={{-100,
                  -60},{100,60}})),  Icon(coordinateSystem(preserveAspectRatio=false,
                extent={{-100,-25},{100,35}}),
                                          graphics={
              Rectangle(
                extent={{-100,14},{100,-26}},
                lineColor={200,200,200},
                fillColor={150,150,150},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-100,35},{100,14}},
                lineColor={200,200,200},
                fillColor={170,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-84,-2},{-76,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-68,-2},{-60,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-52,-2},{-44,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-36,-2},{-28,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-20,-2},{-12,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-4,-2},{4,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{12,-2},{20,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{28,-2},{36,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{44,-2},{52,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{60,-2},{68,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{76,-2},{84,-10}},
                lineColor={200,200,200},
                fillColor={0,128,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-80,8},{-80,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None},
                thickness=1),
              Line(
                points={{-64,8},{-64,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None}),
              Line(
                points={{-48,8},{-48,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None}),
              Line(
                points={{-32,8},{-32,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None}),
              Line(
                points={{-16,8},{-16,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None}),
              Line(
                points={{0,8},{0,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None}),
              Line(
                points={{16,8},{16,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None}),
              Line(
                points={{32,8},{32,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None}),
              Line(
                points={{48,8},{48,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None}),
              Line(
                points={{64,8},{64,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None}),
              Line(
                points={{80,8},{80,0}},
                color={255,0,0},
                smooth=Smooth.None,
                arrow={Arrow.Filled,Arrow.None})}),
          Documentation(info="<html><h4>
  <span style=\"color:#008000\">Overview</span>
</h4>
<p>
  Model for floor heating, with one pipe running through the whole
  floor.
</p>
<h4>
  <span style=\"color:#008000\">Concept</span>
</h4>
<p>
  The assumption is made that there is one pipe that runs thorugh the
  whole floor. Which means that a discretisation of the floor heating
  is done, the discretisation elements will be connected in series: the
  flow temperature of one element is the return temperature of the
  element before.
</p>
<p>
  The pressure drop is calculated at the end for the whole length of
  the pipe.
</p>
<h4>
  <span style=\"color:#008000\">Reference</span>
</h4>
<p>
  Source:
</p>
<ul>
  <li>Bernd Glueck, Bauteilaktivierung 1999, Page 41
  </li>
</ul>
<h4>
  <span style=\"color:#008000\">Example Results</span>
</h4>
<p>
  <a href=
  \"AixLib.Fluid.HeatExchangers.Examples.ActiveWalls.ActiveWalls_Test\">AixLib.Fluid.HeatExchangers.Examples.ActiveWalls.ActiveWalls_Test</a>
</p>
</html>",     revisions="<html><ul>
  <li>
    <i>February 06, 2017&#160;</i> by Philipp Mehrfeld:<br/>
    Use kTop and kDown instead of k_insulation. Naming according to
    AixLib standards.
  </li>
  <li>
    <i>June 15, 2017&#160;</i> by Tobias Blacha:<br/>
    Moved into AixLib
  </li>
  <li>
    <i>March 25, 2015&#160;</i> by Ana Constantin:<br/>
    Uses components from MSL
  </li>
  <li>
    <i>November 06, 2014&#160;</i> by Ana Constantin:<br/>
    Added documentation.
  </li>
</ul>
</html>"));
      end PanelHeating;

      model PanelHeatingSegment "One segment of the discretized panel heating"

      extends Modelica.Fluid.Interfaces.PartialTwoPort;

      parameter Boolean isFloor = true;

        parameter Modelica.Units.SI.Area A "Area of Floor part";

        parameter Modelica.Units.SI.Emissivity eps=0.95 "Emissivity";

        parameter Modelica.Units.SI.Temperature T0=
            Modelica.Units.Conversions.from_degC(20)
          "Initial temperature, in degrees Celsius";

        parameter Modelica.Units.SI.Volume VWater "Volume of Water in m^3";

        parameter Modelica.Units.SI.CoefficientOfHeatTransfer kTop;
        parameter Modelica.Units.SI.CoefficientOfHeatTransfer kDown;

      parameter
          AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.HeatCapacityPerArea cTop;
      parameter
          AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.HeatCapacityPerArea cDown;

        parameter Integer calcMethod=2 "Calculation method for convective heat transfer coefficient at surface"
          annotation (Dialog(group="Heat convection",
              descriptionLabel=true), choices(
              choice=1 "EN ISO 6946 Appendix A >>Flat Surfaces<<",
              choice=2 "By Bernd Glueck",
              choice=3 "Custom hCon (constant)",
              radioButtons=true));

        parameter Modelica.Units.SI.CoefficientOfHeatTransfer hCon_const=2.5
          "Constant heat transfer coefficient" annotation (Dialog(
            group="Heat convection",
            descriptionLabel=true,
            enable=if calcMethod == 3 then true else false));

        Modelica.Fluid.Vessels.ClosedVolume vol(
          redeclare package Medium = Medium,
          energyDynamics=system.energyDynamics,
          use_HeatTransfer=true,
          T_start=T0,
          redeclare model HeatTransfer =
              Modelica.Fluid.Vessels.BaseClasses.HeatTransfer.IdealHeatTransfer,
          use_portsData=false,
          V=VWater,
          nPorts=2) annotation (Placement(transformation(extent={{-14,-26},{8,-4}})));

        Modelica.Fluid.Sensors.TemperatureTwoPort TFlow(redeclare package
            Medium =
              Medium)
          annotation (Placement(transformation(extent={{-70,-36},{-50,-16}})));
        Modelica.Fluid.Sensors.TemperatureTwoPort TReturn(redeclare package
            Medium =
              Medium)
          annotation (Placement(transformation(extent={{50,-36},{70,-16}})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a thermConvWall
          annotation (Placement(transformation(extent={{-22,-110},{-2,-90}})));
        AixLib.Utilities.HeatTransfer.HeatToRad twoStar_RadEx(A=A_floor, eps=eps)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-30,74})));
        AixLib.Utilities.HeatTransfer.HeatConvInside HeatConv(
          final A=A_floor,
          final calcMethod=calcMethod,
          final hCon_const=hCon_const,
          surfaceOrientation=if isFloor then 2 else 1) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={1.77636e-015,74})));
        Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a thermConvRoom
          annotation (Placement(transformation(extent={{-12,90},{8,110}})));
        AixLib.Utilities.Interfaces.RadPort starRad annotation (Placement(transformation(extent={{-38,92},{-18,112}})));
        AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.HeatConductionSegment panel_Segment1(
          kA=kTop*A,
          mc_p=cTop*A,
          T0=T0) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-16,30})));
        AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.HeatConductionSegment panel_Segment2(
          T0=T0,
          kA=kDown*A,
          mc_p=cDown*A) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-12,-56})));
        parameter Modelica.Units.SI.Area A_floor=A "Area of surface of wall / Floor";
      equation

        connect(port_a, TFlow.port_a) annotation (Line(
            points={{-100,0},{-88,0},{-88,-26},{-70,-26}},
            color={0,127,255},
            smooth=Smooth.None));

        connect(TFlow.port_b, vol.ports[1]) annotation (Line(
            points={{-50,-26},{-4.1,-26}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(vol.ports[2], TReturn.port_a) annotation (Line(
            points={{-1.9,-26},{50,-26}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(TReturn.port_b, port_b) annotation (Line(
            points={{70,-26},{84,-26},{84,0},{100,0}},
            color={0,127,255},
            smooth=Smooth.None));
        connect(HeatConv.port_a, thermConvRoom) annotation (Line(
            points={{3.60822e-015,84},{3.60822e-015,92.5},{-2,92.5},{-2,100}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(twoStar_RadEx.radPort, starRad) annotation (Line(
            points={{-30,84.1},{-30,102},{-28,102}},
            color={95,95,95},
            pattern=LinePattern.None,
            smooth=Smooth.None));
        connect(thermConvWall, thermConvWall) annotation (Line(
            points={{-12,-100},{-12,-100}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(panel_Segment1.port_b, twoStar_RadEx.convPort) annotation (Line(
            points={{-16.9,39.1},{-16.9,51.55},{-30,51.55},{-30,64}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(panel_Segment1.port_b, HeatConv.port_b) annotation (Line(
            points={{-16.9,39.1},{-16.9,51.55},{0,51.55},{0,64}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(panel_Segment1.port_a, vol.heatPort) annotation (Line(
            points={{-16.9,20.9},{-16.9,2},{-14,2},{-14,-15}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(panel_Segment2.port_b, thermConvWall) annotation (Line(
            points={{-11.1,-65.1},{-11.1,-81.55},{-12,-81.55},{-12,-100}},
            color={191,0,0},
            smooth=Smooth.None));
        connect(panel_Segment2.port_a, vol.heatPort) annotation (Line(
            points={{-11.1,-46.9},{-11.1,-31.45},{-14,-31.45},{-14,-15}},
            color={191,0,0},
            smooth=Smooth.None));
        annotation (Diagram(graphics,
                            coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}})),  Icon(graphics={
              Rectangle(
                extent={{-100,20},{100,-22}},
                lineColor={0,0,0},
                fillColor={0,0,255},
                fillPattern=FillPattern.HorizontalCylinder),
            Rectangle(
              extent={{-100,66},{100,40}},
              lineColor={166,166,166},
              pattern=LinePattern.None,
              fillColor={190,190,190},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{100,100},{-100,66}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={156,156,156},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{100,40},{-100,20}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={156,156,156},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{100,-22},{-100,-56}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={156,156,156},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{-100,-56},{100,-82}},
              lineColor={166,166,166},
              pattern=LinePattern.None,
              fillColor={190,190,190},
              fillPattern=FillPattern.Solid),
            Rectangle(
              extent={{100,-82},{-100,-102}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={156,156,156},
              fillPattern=FillPattern.Solid),
              Line(
                points={{-22,26},{-22,82}},
                color={255,0,0},
                thickness=0.5,
                arrow={Arrow.None,Arrow.Filled}),
              Text(
                extent={{-20,62},{62,40}},
                lineColor={255,0,0},
                textString="Q_flow"),
              Text(
                extent={{-20,-46},{62,-68}},
                lineColor={255,0,0},
                textString="Q_flow"),
              Line(
                points={{0,-28},{0,28}},
                color={255,0,0},
                thickness=0.5,
                arrow={Arrow.None,Arrow.Filled},
                origin={-22,-54},
                rotation=180)}),
          Documentation(revisions="<html><ul>
  <li>
    <i>February 06, 2017&#160;</i> by Philipp Mehrfeld:<br/>
    Naming according to IBPSA standards.
  </li>
  <li>
    <i>June 15, 2017&#160;</i> by Tobias Blacha:<br/>
    Moved into IBPSA
  </li>
  <li>
    <i>March 25, 2015&#160;</i> by Ana Constantin:<br/>
    Uses components from MSL
  </li>
  <li>
    <i>November 06, 2014&#160;</i> by Ana Constantin:<br/>
    Added documentation.
  </li>
</ul>
</html>",   info="<html><h4>
  <span style=\"color:#008000\">Overview</span>
</h4>
<p>
  Model for a panel heating element, consisting of a water volume, heat
  conduction upwards and downwards through the wall layers, convection
  and radiation exchange at the room facing side.
</p>
</html>"));
      end PanelHeatingSegment;

      record ActiveWallBaseDataDefinition "Base data definition for active walls"
      extends Modelica.Icons.Record;
        parameter Modelica.Units.SI.Temperature Temp_nom[3]
          "Nominal Temperatures T_flow, T_return, T_room / air ";
        parameter Modelica.Units.SI.HeatFlux q_dot_nom
          "nominal Power per square meter";
        parameter Modelica.Units.SI.CoefficientOfHeatTransfer k_isolation
          "k_isolation of whole FH Layer";
        parameter Modelica.Units.SI.CoefficientOfHeatTransfer k_top
          "Heat transfer coefficient for layers above tubes";
        parameter Modelica.Units.SI.CoefficientOfHeatTransfer k_down
          "Heat transfer coefficient for layers underneath tubes";
      parameter Real VolumeWaterPerMeter(unit="l/m") "Water volume";

        parameter Modelica.Units.SI.Emissivity eps "Emissivity of Floor";
      parameter AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.HeatCapacityPerArea C_ActivatedElement = 50000;
      parameter Real c_top_ratio;
      parameter Real PressureDropExponent;
      parameter Real PressureDropCoefficient;
      parameter Real diameter;

      annotation (Documentation(revisions="<html><ul>
  <li>
    <i>February 14, 2014&#160;</i> by Ana Constantin:<br/>
    Changed name of heat capacity per are to C_Activated Element, to be
    able to use it for both heating and cooling.
  </li>
  <li>
    <i>September 20, 2013&#160;</i> by Mark Wesseling:<br/>
    Implemented.
  </li>
</ul>
</html>",     info="<html><h4>
  <span style=\"color:#008000\">Overview</span>
</h4>
<p>
  Base record for Active Walls (Ceiling and Floor) models.
</p>
<p>
  Defines heat exchange properties and storage capacity of the active
  part of the wall.
</p>
<h4>
  <span style=\"color:#008000\">References</span>
</h4>
<p>
  Base data definition for record used with <a href=
  \"EBC.HVAC.Components.ActiveWalls.Panelheating_1D_Dis\">EBC.HVAC.Components.ActiveWalls.Panelheating_1D_Dis</a>
</p>
</html>"));

      end ActiveWallBaseDataDefinition;
    annotation (Documentation(info="<html>
<p><br>Based on the UFH heating model in the AixLib with smaller error fixes. As soon as the new IBPSA-based UFH model is merged into the AixLib development, this package will be fully obsolete.</p>
</html>"));
    end UFH;

    model HeatingRodWithSecurityControl
      "Heating rod which converts electrical energy into heat with a given efficiency"
      extends IBPSA.Fluid.Interfaces.TwoPortHeatMassExchanger(
        redeclare final IBPSA.Fluid.MixingVolumes.MixingVolume vol(
          final m_flow_small=m_flow_small,
          final V=V,
        final prescribedHeatFlowRate=true));

      parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal
        "Heat flow rate at u=1, positive for heating";
      parameter Modelica.Units.SI.Volume V=m_flow_nominal*tau/rho_default
        "Volume of heat exchanger";
      parameter Real eta      "Efficiency of the heating rod";

      // Count switches
      parameter Boolean use_countNumSwi=true
        "Turn the counting of the number of heating rod uses on or off."
        annotation (Dialog(tab="Advanced", group="Diagnostics"), choices(checkBox=true));
      Modelica.Blocks.Interfaces.RealInput u(unit="1",
        min=0,
        max=1)                                         "Control input"
        annotation (Placement(transformation(
              extent={{-140,40},{-100,80}})));
      Modelica.Blocks.Interfaces.RealOutput Pel(unit="W")
        "Electrical power used to provide current heat flow"
        annotation (Placement(transformation(extent={{100,50},{120,70}})));
      Modelica.Blocks.Math.Gain gai_eta(final k=1/eta) "Divide efficiency"
        annotation (Placement(transformation(extent={{40,62},{60,82}})));

      Modelica.Blocks.MathInteger.TriggeredAdd triggeredAdd(final use_reset=false,
          final y_start=0) if use_countNumSwi
        "To count on-off cycles"
        annotation (Placement(transformation(extent={{68,-68},{86,-52}})));
      Modelica.Blocks.Sources.IntegerConstant integerConstant(final k=1)
     if use_countNumSwi
        annotation (Placement(transformation(extent={{38,-68},{54,-52}})));
      Modelica.Blocks.Interfaces.IntegerOutput numSwi if use_countNumSwi
        "Number of on switches "
        annotation (Placement(transformation(extent={{100,-70},{120,-50}}),
            iconTransformation(extent={{96,-62},{116,-42}})));
      Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(final threshold=
            Modelica.Constants.eps) if use_countNumSwi
        annotation (Placement(transformation(extent={{38,-94},{54,-78}})));
      parameter Real m_flowTurnOff=m_flow_small
        "if m_flow smaller than this value, HR won't turn on";
      parameter Real m_flowTurnOn=m_flow_nominal*0.1
        "If m_flow is bigger than this value, HR may turn on";
    protected
      Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow preHea(
        final alpha=0)
        "Prescribed heat flow"
        annotation (Placement(transformation(extent={{-36,50},{-16,70}})));
      Modelica.Blocks.Math.Gain gai(k=Q_flow_nominal) "Gain"
        annotation (Placement(transformation(extent={{-60,56},{-52,64}})));
      Modelica.Blocks.Logical.Switch
                                gai1 "Gain"
        annotation (Placement(transformation(extent={{-72,56},{-64,64}})));
      Modelica.Blocks.Logical.Hysteresis mFlowBigEnough(
        final uLow=m_flowTurnOff,
        final uHigh=m_flowTurnOn,
        final pre_y_start=false) "Check if m_flow is big enough"
        annotation (Placement(transformation(extent={{-86,56},{-78,64}})));
      Modelica.Blocks.Sources.Constant constZero(final k=0) "Turn device off"
        annotation (Placement(transformation(extent={{-86,44},{-78,52}})));
      Modelica.Blocks.Sources.RealExpression internal_mFlow(y=abs(port_a.m_flow))
        "Only used as no mass flow sensor is present"
        annotation (Placement(transformation(extent={{-98,50},{-90,58}})));
    equation
      connect(gai.y, preHea.Q_flow) annotation (Line(
          points={{-51.6,60},{-36,60}},
          color={0,0,127}));
      connect(preHea.port, vol.heatPort) annotation (Line(
          points={{-16,60},{-9,60},{-9,-10}},
          color={191,0,0}));
      connect(gai.y, gai_eta.u) annotation (Line(points={{-51.6,60},{-42,60},{-42,
              72},{38,72}},
                        color={0,0,127}));
      connect(gai_eta.y, Pel) annotation (Line(points={{61,72},{88,72},{88,60},{110,
              60}}, color={0,0,127}));
      connect(triggeredAdd.y,numSwi)
        annotation (Line(points={{87.8,-60},{110,-60}},  color={255,127,0},
          pattern=LinePattern.Dash));
      connect(integerConstant.y,triggeredAdd. u) annotation (Line(points={{54.8,-60},
              {64.4,-60}},                           color={255,127,0},
          pattern=LinePattern.Dash));
      connect(greaterThreshold.y, triggeredAdd.trigger) annotation (Line(
          points={{54.8,-86},{71.6,-86},{71.6,-69.6}},
          color={255,0,255},
          pattern=LinePattern.Dash));
      connect(gai.u, gai1.y)
        annotation (Line(points={{-60.8,60},{-63.6,60}}, color={0,0,127}));
      connect(gai1.u2, mFlowBigEnough.y)
        annotation (Line(points={{-72.8,60},{-77.6,60}}, color={255,0,255}));
      connect(u, gai1.u1) annotation (Line(points={{-120,60},{-92,60},{-92,76},{-76,
              76},{-76,63.2},{-72.8,63.2}}, color={0,0,127}));
      connect(gai1.u3, constZero.y) annotation (Line(points={{-72.8,56.8},{-72.8,48},
              {-77.6,48}}, color={0,0,127}));
      connect(internal_mFlow.y, mFlowBigEnough.u) annotation (Line(points={{-89.6,
              54},{-89.6,56},{-86.8,56},{-86.8,60}}, color={0,0,127}));
      connect(gai1.y, greaterThreshold.u) annotation (Line(
          points={{-63.6,60},{-62,60},{-62,14},{-68,14},{-68,-86},{36.4,-86}},
          color={0,0,127},
          pattern=LinePattern.Dash));
      annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                -100},{100,100}}), graphics={
            Rectangle(
              extent={{-100,8},{101,-5}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Polygon(
              points={{-70,-60},{70,60},{-70,60},{-70,-60}},
              fillColor={127,0,0},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None,
              lineColor={0,0,0}),
            Polygon(
              points={{-70,-60},{70,60},{70,-60},{-70,-60}},
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid,
              pattern=LinePattern.None),
            Rectangle(
              extent={{70,60},{100,58}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-56,-18},{54,-78}},
              lineColor={255,255,255},
              textString="Q=%Q_flow_nominal"),
            Rectangle(
              extent={{-100,60},{-70,58}},
              lineColor={0,0,255},
              pattern=LinePattern.None,
              fillColor={0,0,127},
              fillPattern=FillPattern.Solid),
            Text(
              extent={{-122,106},{-78,78}},
              lineColor={0,0,127},
              textString="u"),
            Text(
              extent={{74,102},{118,74}},
              lineColor={0,0,127},
              textString="P_el"),
            Line(
              points={{-18,80},{-60,80},{-60,2},{-42,2}},
              color={0,0,0},
              thickness=1),
            Ellipse(
              extent={{-14,86},{-26,74}},
              lineColor={0,0,0},
              lineThickness=1,
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Ellipse(
              extent={{26,86},{14,74}},
              lineColor={0,0,0},
              lineThickness=1,
              fillColor={0,0,0},
              fillPattern=FillPattern.Solid),
            Line(
              points={{22,80},{60,80},{60,0},{46,0}},
              color={0,0,0},
              thickness=1),
            Line(
              points={{-42,2},{-42,52},{-26,-36}},
              color={238,46,47},
              thickness=0.5),
            Line(
              points={{-34,52},{-18,-36}},
              color={238,46,47},
              thickness=0.5),
            Line(
              points={{-26,52},{-10,-36}},
              color={238,46,47},
              thickness=0.5),
            Line(
              points={{-18,52},{-2,-36}},
              color={238,46,47},
              thickness=0.5),
            Line(
              points={{-10,52},{6,-36}},
              color={238,46,47},
              thickness=0.5),
            Line(
              points={{-2,52},{14,-36}},
              color={238,46,47},
              thickness=0.5),
            Line(
              points={{30,52},{46,-36}},
              color={238,46,47},
              thickness=0.5),
            Line(
              points={{22,52},{38,-36}},
              color={238,46,47},
              thickness=0.5),
            Line(
              points={{14,52},{30,-36}},
              color={238,46,47},
              thickness=0.5),
            Line(
              points={{6,52},{22,-36}},
              color={238,46,47},
              thickness=0.5),
            Line(
              points={{46,0},{46,-34},{46,-34}},
              color={238,46,47},
              thickness=0.5)}),
    defaultComponentName="hea",
    Documentation(info="<html><p>
  Model for a heating rod.
</p>
<p>
  This model adds heat in the amount of <span style=
  \"font-family: Courier New;\">Q_flow = u Q_flow_nominal</span> to the
  medium. The input signal <span style=
  \"font-family: Courier New;\">u</span> and the nominal heat flow rate
  <span style=\"font-family: Courier New;\">Q_flow_nominal</span> can be
  positive or negative. A positive value of <span style=
  \"font-family: Courier New;\">Q_flow</span> means heating, and negative
  means cooling.
</p>
<p>
  The outlet conditions at <span style=
  \"font-family: Courier New;\">port_a</span> are not affected by this
  model, other than for a possible pressure difference due to flow
  friction.
</p>
<p>
  Optionally, this model can have a flow resistance. Set <span style=
  \"font-family: Courier New;\">dp_nominal = 0</span> to disable the flow
  friction calculation.
</p>
<p>
  For a model that uses as an input the fluid temperature leaving at
  <span style=\"font-family: Courier New;\">port_b</span>, use <a href=
  \"modelica://IBPSA.Fluid.HeatExchangers.PrescribedOutlet\">IBPSA.Fluid.HeatExchangers.PrescribedOutlet</a>
</p>
<p>
  As output, the electrical energy required to supply <span style=
  \"font-family: Courier New;\">Q_flow</span> is calculated using the
  efficiency which is a parameter of the model.
</p>
<p>
  Lastly, the number of times the heating rod switches on may be used
  as an output.
</p>
<h4>
  Limitations
</h4>
<p>
  This model does not affect the humidity of the air. Therefore, if
  used to cool air below the dew point temperature, the water mass
  fraction will not change.
</p>
<h4>
  Validation
</h4>
<p>
  The model has been validated against the analytical solution in the
  example <a href=
  \"modelica://IBPSA.Fluid.HeatExchangers.Validation.HeaterCooler_u\">IBPSA.Fluid.HeatExchangers.Validation.HeaterCooler_u</a>.
</p>
</html>",
    revisions="<html><ul>
  <li>May 5, 2021, by Fabian Wuellhorst:<br/>
    Added model.<br/>
    This is for <a href=
    \"https://github.com/RWTH-EBC/IBPSA/issues/1092\">IBPSA, #1092</a>.
  </li>
</ul>
</html>"));
    end HeatingRodWithSecurityControl;

    model DiscretizeContSignal
      extends Modelica.Blocks.Interfaces.SISO;
      parameter Integer discretizationSteps(min=0) = 0 "Number of steps to dicretize. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1";

    equation
      if discretizationSteps <> 0 then
        y = 1 / discretizationSteps * ceil(u * discretizationSteps);
      else
        y = u;
      end if;

      annotation (Icon(graphics,
                       coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
            coordinateSystem(preserveAspectRatio=false)));
    end DiscretizeContSignal;

    package Electrical "Additional electrical components which are not part of any libraries yet"
      model Inverter "Inverter to convert DC to AC current"
        Modelica.Blocks.Sources.RealExpression P_out(y=P_AC_out)
          annotation (Placement(transformation(extent={{4,-10},{24,10}})));
        Modelica.Blocks.Nonlinear.Limiter InverterLimits(uMax=P_Max, uMin=P_Min) "Inverter Limits"  annotation (Placement(transformation(extent={{48,-10},
                  {68,10}})));
        Modelica.Blocks.Interfaces.RealInput P_DC "AC charging signal" annotation (
            Placement(transformation(extent={{-122,-20},{-82,20}}),
              iconTransformation(extent={{-122,-20},{-82,20}})));
        Modelica.Blocks.Interfaces.RealOutput P_AC "DC charging signal" annotation (
            Placement(transformation(extent={{96,-10},{116,10}}),  iconTransformation(
                extent={{72,-14},{100,14}})));
        parameter Real P_Max "Maximum inverter power";
        parameter Real P_Min "Minimum inverter power";

        parameter Real a1 = 0.002409 "curve parameter" annotation (choicesAllMatching, Dialog(group="Parameter"));
        parameter Real a2 = 0.00561 "curve parameter" annotation (choicesAllMatching, Dialog(group="Parameter"));
        parameter Real a3 = 0.01228 "curve parameter" annotation (choicesAllMatching, Dialog(group="Parameter"));

        Real eta "Load-dependend inverter efficiency";

        Real P_AC_out "AC power after inverter";
        Real P_0 "Initial relative power";

      equation
        P_0 = P_DC / P_Max;
        eta = max(Modelica.Constants.eps,P_0 / (P_0 + a1 + a2* P_0 + a3 * P_0^2));
        P_AC_out = P_DC * eta;
        connect(P_out.y,InverterLimits. u)
          annotation (Line(points={{25,0},{46,0}}, color={0,0,127}));
        connect(InverterLimits.y,P_AC)
          annotation (Line(points={{69,0},{106,0}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
           Rectangle(
            lineColor={0,0,0},
            fillColor={255,255,255},
            fillPattern=FillPattern.Solid,
            extent={{-100,100},{100,-100}}),
              Line(points={{100,100},{-100,-100}}, color={0,0,0}),
              Line(points={{-70,64},{-10,64}}, color={0,0,0}),
              Line(points={{-70,52},{-10,52}}, color={0,0,0}),
              Line(
                points={{12,-56},{14,-50},{16,-48},{18,-46},{24,-44},{30,-44},{34,-46},
                    {38,-50},{40,-52},{42,-54},{46,-56},{56,-56},{62,-52},{64,-44}},
                color={0,0,0},
                smooth=Smooth.Bezier),
              Line(
                points={{14,-72},{16,-66},{18,-64},{20,-62},{26,-60},{32,-60},{36,-62},
                    {40,-66},{42,-68},{44,-70},{48,-72},{58,-72},{64,-68},{66,-60}},
                color={0,0,0},
                smooth=Smooth.Bezier)}), Diagram(graphics,
                                                 coordinateSystem(preserveAspectRatio=
                 false)));
      end Inverter;
    end Electrical;
  annotation (Documentation(info="<html>
<p>Components used in building energy systems which are not given in an existing model library to the modeling depth required by the simulation.</p>
<p>Most of these components shall not stay in this library but rather</p>
<ul>
<li>be integrated into the corresponding component library. For instance, we modified the heating rod model in the IBPSA. This will be added to the IBPSA in the near future</li>
<li>be replaced by better fitting models. For instance, the ArtificalPumps were used starting this library but are replaced one after another be the movers from IBPSA</li>
<li>be moved to a matching project library. For instance, we simulated an UFH system in one project. Moving the UFH-subsystem and these models into an own project library is more straightforward.</li>
</ul>
<p><br>This is true not only for this package but all packages named &quot;Components&quot;. </p>
</html>"),   Icon(graphics={
          Polygon(points={{-72,34},{66,-36},{66,34},{0,-2},{-72,-34},{-72,34}},
              lineColor={0,0,0}),
          Line(points={{0,50},{0,-2}}),
          Rectangle(
            extent={{-20,58},{20,50}},
            lineColor={0,0,0},
            fillColor={0,0,0},
            fillPattern=FillPattern.Solid)}));
  end Components;

  package Systems "Package for BES"
    extends Modelica.Icons.Package;

    package Control "Home energy management control system"
      extends BESMod.Utilities.Icons.SystemIcon;
      model NoControl "No HEMS control"
        extends BaseClasses.PartialControl;
      end NoControl;

      model DHWSuperheating "Increase the DHW set temperature at 12 pm for 1 h"
        extends BaseClasses.PartialControl;
        Modelica.Blocks.Sources.RealExpression realExpression(y=mod(time, 86400))
          annotation (Placement(transformation(extent={{-92,-44},{-72,-24}})));
        Modelica.Blocks.Logical.OnOffController onOffController(bandwidth=dtOveHea)
          annotation (Placement(transformation(extent={{-58,-28},{-38,-8}})));
        Modelica.Blocks.Sources.Constant const(k=houOveHea)
          annotation (Placement(transformation(extent={{-92,-10},{-72,10}})));
        parameter Modelica.Units.SI.Time houOveHea(displayUnit="h") = 43200
          "Time of the day where overheating of DHW starts";
        parameter Modelica.Units.SI.Time dtOveHea(displayUnit="h") = 3600
          "Time prior and after houOveHea to activate overheating";
        parameter Modelica.Units.SI.Temperature TSetDHW "DHW set temperature";
        parameter Modelica.Units.SI.TemperatureDifference dTDHW=5
          "Temperature added to DHW setpoint on overheating";

        Modelica.Blocks.Sources.Constant const1(k=TSetDHW + dTDHW)
          annotation (Placement(transformation(extent={{-94,24},{-74,44}})));
        Electrical.Interfaces.SystemControlBus systemControlBus annotation (Placement(
              transformation(extent={{-14,-118},{18,-84}}), iconTransformation(extent=
                 {{-14,-118},{18,-84}})));
      equation
        connect(realExpression.y, onOffController.u) annotation (Line(points={{-71,-34},
                {-66,-34},{-66,-24},{-60,-24}}, color={0,0,127}));
        connect(onOffController.y, sigBusHyd.overwriteTSetDHW) annotation (Line(
              points={{-37,-18},{-26,-18},{-26,-86},{-79,-86},{-79,-101}}, color={255,
                0,255}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(onOffController.reference, const.y) annotation (Line(points={{-60,-12},
                {-66,-12},{-66,0},{-71,0}}, color={0,0,127}));
        connect(const1.y, sigBusHyd.TSetDHW) annotation (Line(points={{-73,34},{-26,34},
                {-26,-86},{-79,-86},{-79,-101}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
      end DHWSuperheating;

      package BaseClasses
        extends Modelica.Icons.BasesPackage;
        partial model PartialControl "Model for a partial HEMS control"
          extends BESMod.Utilities.Icons.ControlIcon;
          Hydraulical.Interfaces.SystemControlBus sigBusHyd annotation (Placement(
                transformation(extent={{-94,-114},{-64,-88}}), iconTransformation(
                  extent={{-94,-114},{-64,-88}})));
          Ventilation.Interfaces.SystemControlBus sigBusVen annotation (Placement(
                transformation(extent={{64,-114},{96,-86}}), iconTransformation(extent=
                    {{64,-114},{96,-86}})));
          Interfaces.ControlOutputs outBusCtrl annotation (Placement(transformation(
                  extent={{84,-16},{118,16}}), iconTransformation(extent={{84,-16},{118,
                    16}})));
          Electrical.Interfaces.SystemControlBus sigBusEle annotation (Placement(
                transformation(extent={{-116,-14},{-84,14}}), iconTransformation(extent=
                   {{-116,-14},{-84,14}})));
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end PartialControl;
      end BaseClasses;
    end Control;

    package Demand "Models for the demands in a HPS"
      extends BESMod.Utilities.Icons.SystemIcon;

      package DHW "Domestic Hot Water system"

        model DHW "Standard DHW subsystem"
          extends BaseClasses.PartialDHW;

          parameter Boolean use_pressure=false "=true to use pressure based system";
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-96,-96},{-84,-84}})));

          BESMod.Components.Pumps.ArtificalPumpFixedT artificalPumpFixedT(
            redeclare package Medium = Medium,
            p=p_start,
            T_fixed=parameters.TDHWCold_nominal) if not use_pressure
            annotation (Placement(transformation(
                extent={{-14,-14},{14,14}},
                rotation=270,
                origin={-60,-8})));
          replaceable TappingProfiles.BaseClasses.PartialDHW calcmFlow constrainedby
            TappingProfiles.BaseClasses.PartialDHW(
            final TCold=parameters.TDHWCold_nominal,
            final dWater=rho,
            final c_p_water=cp,
            final TSetDHW=parameters.TDHW_nominal) annotation (choicesAllMatching=true,
              Placement(transformation(
                extent={{-17,18},{17,-18}},
                rotation=180,
                origin={-15,-8})));
          IBPSA.Fluid.Sensors.TemperatureTwoPort senT(
            final transferHeat=false,
            redeclare final package Medium = Medium,
            final m_flow_nominal=0.1) "Temperature of DHW" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-60,44})));
        Modelica.Blocks.Math.UnitConversions.From_degC fromDegC
            "Profiles for internal gains" annotation (Placement(transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={41,63})));
          Utilities.KPIs.InternalKPICalculator internalKPICalculator(
            unit="W",
            integralUnit="J",
            final calc_singleOnTime=false,
            final calc_totalOnTime=false,
            final calc_numSwi=false,
            final calc_movAve=false,
            final y=-port_b.m_flow*cp*(senT.T - parameters.TDHWCold_nominal))
            annotation (Placement(transformation(extent={{60,-68},{80,-32}})));
          IBPSA.Fluid.Movers.FlowControlled_m_flow pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=parameters.TDHWCold_nominal,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=parameters.mDHW_flow_nominal,
            final m_flow_small=1E-4*abs(parameters.mDHW_flow_nominal),
            final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=parameters.mDHW_flow_nominal,
              final dp_nominal(displayUnit="Pa") = 100,
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final nominalValuesDefineDefaultPressureCurve=false,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final dp_nominal=100) if use_pressure annotation (Placement(transformation(
                extent={{-8.5,9.5},{8.5,-9.5}},
                rotation=180,
                origin={-64.5,-76.5})));
          IBPSA.Fluid.Sources.Boundary_ph bou_sink(
            redeclare package Medium = Medium,
            final p=p_start,
            nPorts=1)       if use_pressure
            annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                rotation=0,
                origin={-2,28})));
          IBPSA.Fluid.Sources.Boundary_pT bouSou(
            final T=parameters.TDHWCold_nominal,
            final nPorts=1,
            redeclare final package Medium = Medium,
            final p=p_start) if use_pressure
            annotation (Placement(transformation(extent={{-16,-86},{-36,-66}})));
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{32,-94},{52,-74}})));
        equation
          connect(port_a, senT.port_a) annotation (Line(points={{-100,60},{-60,60},{-60,
                  54}},            color={0,127,255}));
          connect(senT.T,calcmFlow. TIs) annotation (Line(points={{-49,44},{56,44},{56,
                  -8},{5.4,-8}},    color={0,0,127}));
          connect(fromDegC.y, calcmFlow.TSet) annotation (Line(points={{33.3,63},{22,63},
                  {22,-18.8},{5.4,-18.8}},
                                       color={0,0,127}));
          connect(senT.port_b, artificalPumpFixedT.port_a)
            annotation (Line(points={{-60,34},{-60,6}}, color={0,127,255}));
          connect(artificalPumpFixedT.m_flow_in, calcmFlow.m_flow_out)
            annotation (Line(points={{-43.76,-8},{-33.7,-8}}, color={0,0,127}));
          connect(artificalPumpFixedT.port_b, port_b) annotation (Line(points={{-60,-22},
                  {-60,-60},{-100,-60}}, color={0,127,255}));
          connect(internalKPICalculator.KPIBus, outBusDHW.Q_flow) annotation (Line(
              points={{80.2,-50},{104,-50},{104,0},{100,0}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(pump.port_a, bouSou.ports[1]) annotation (Line(
              points={{-56,-76.5},{-41.5,-76.5},{-41.5,-76},{-36,-76}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(pump.port_b, port_b) annotation (Line(
              points={{-73,-76.5},{-81.5,-76.5},{-81.5,-60},{-100,-60}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(calcmFlow.m_flow_out, pump.m_flow_in) annotation (Line(
              points={{-33.7,-8},{-42,-8},{-42,-65.1},{-64.5,-65.1}},
              color={0,0,127},
              pattern=LinePattern.Dash));
          connect(fromDegC.u, useProBus.TDHWDemand) annotation (Line(points={{
                  49.4,63},{56,63},{56,99},{-1,99}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(calcmFlow.m_flow_in, useProBus.mDHWDemand_flow) annotation (
              Line(points={{5.4,2.8},{56,2.8},{56,99},{-1,99}},     color={0,0,
                  127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(senT.port_b, bou_sink.ports[1]) annotation (Line(
              points={{-60,34},{-60,28},{-12,28}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{52,-84},{70,-84},{70,-98}},
              color={0,0,0},
              thickness=1));
        end DHW;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

          record PartialDHWTap
            extends Modelica.Icons.Record;

            parameter Real table[:, 5] "Table data for dhw tapping";
            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=max(table[:, 3])
              "Nominal mass flow rate";
            parameter Modelica.Units.SI.Volume V_dhw_day "Average daily tapping volume";

            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialDHWTap;

          record ProfileL "Profile L"
            extends
              BESMod.HugosProject.Systems.Demand.DHW.RecordsCollection.PartialDHWTap(
                table=[0,0,0,10,10; 25200,0,0,10,10; 25200,0.105,0.05,25,25;
                  25321,0,0.05,10,10; 25321,0,0,10,10; 25500,0,0,10,10; 25500,
                  1.4,0.1,40,40; 25902,0,0.1,10,10; 25902,0,0,10,10; 27000,0,0,
                  10,10; 27000,0.105,0.05,25,25; 27121,0,0.05,10,10; 27121,0,0,
                  10,10; 27900,0,0,10,10; 27900,0.105,0.05,25,25; 28021,0,0.05,
                  10,10; 28021,0,0,10,10; 29100,0,0,10,10; 29100,3.605,
                  0.166666667,40,40; 29721,0,0.166666667,10,10; 29721,0,0,10,10;
                  30300,0,0,10,10; 30300,0.105,0.05,25,25; 30421,0,0.05,10,10;
                  30421,0,0,10,10; 30600,0,0,10,10; 30600,0.105,0.05,25,25;
                  30721,0,0.05,10,10; 30721,0,0,10,10; 31500,0,0,10,10; 31500,
                  0.105,0.05,25,25; 31621,0,0.05,10,10; 31621,0,0,10,10; 32400,
                  0,0,10,10; 32400,0.105,0.05,25,25; 32521,0,0.05,10,10; 32521,
                  0,0,10,10; 34200,0,0,10,10; 34200,0.105,0.05,25,25; 34321,0,
                  0.05,10,10; 34321,0,0,10,10; 37800,0,0,10,10; 37800,0.105,
                  0.05,40,40; 37860,0,0.05,10,10; 37860,0,0,10,10; 41400,0,0,10,
                  10; 41400,0.105,0.05,25,25; 41521,0,0.05,10,10; 41521,0,0,10,
                  10; 42300,0,0,10,10; 42300,0.105,0.05,25,25; 42421,0,0.05,10,
                  10; 42421,0,0,10,10; 45900,0,0,10,10; 45900,0.315,0.066666667,
                  55,55; 45990,0,0.066666667,10,10; 45990,0,0,10,10; 52200,0,0,
                  10,10; 52200,0.105,0.05,25,25; 52321,0,0.05,10,10; 52321,0,0,
                  10,10; 55800,0,0,10,10; 55800,0.105,0.05,25,25; 55921,0,0.05,
                  10,10; 55921,0,0,10,10; 59400,0,0,10,10; 59400,0.105,0.05,25,
                  25; 59521,0,0.05,10,10; 59521,0,0,10,10; 64800,0,0,10,10;
                  64800,0.105,0.05,25,25; 64921,0,0.05,10,10; 64921,0,0,10,10;
                  65700,0,0,10,10; 65700,0.105,0.05,40,40; 65760,0,0.05,10,10;
                  65760,0,0,10,10; 66600,0,0,10,10; 66600,0.105,0.05,40,40;
                  66660,0,0.05,10,10; 66660,0,0,10,10; 68400,0,0,10,10; 68400,
                  0.105,0.05,25,25; 68521,0,0.05,10,10; 68521,0,0,10,10; 73800,
                  0,0,10,10; 73800,0.735,0.066666667,55,55; 74011,0,0.066666667,
                  10,10; 74011,0,0,10,10; 75600,0,0,10,10; 75600,3.605,
                  0.166666667,40,40; 76221,0,0.166666667,10,10; 76221,0,0,10,10;
                  77400,0,0,10,10; 77400,0.105,0.05,25,25; 77521,0,0.05,10,10;
                  77521,0,0,10,10; 86400,0,0,10,10], V_dhw_day=248.517e-3);
          end ProfileL;

          record ProfileS "Profile S"
            extends
              BESMod.HugosProject.Systems.Demand.DHW.RecordsCollection.PartialDHWTap(
                table=[0,0,0,10,10; 25200,0,0,10,10; 25200,0.105,0.05,25,25;
                  25321,0,0.05,10,10; 25321,0,0,10,10; 27000,0,0,10,10; 27000,
                  0.105,0.05,25,25; 27121,0,0.05,10,10; 27121,0,0,10,10; 30600,
                  0,0,10,10; 30600,0.105,0.05,25,25; 30721,0,0.05,10,10; 30721,
                  0,0,10,10; 34200,0,0,10,10; 34200,0.105,0.05,25,25; 34321,0,
                  0.05,10,10; 34321,0,0,10,10; 41400,0,0,10,10; 41400,0.105,
                  0.05,25,25; 41521,0,0.05,10,10; 41521,0,0,10,10; 42300,0,0,10,
                  10; 42300,0.105,0.05,25,25; 42421,0,0.05,10,10; 42421,0,0,10,
                  10; 45900,0,0,10,10; 45900,0.315,0.066666667,55,55; 45990,0,
                  0.066666667,10,10; 45990,0,0,10,10; 64800,0,0,10,10; 64800,
                  0.105,0.05,25,25; 64921,0,0.05,10,10; 64921,0,0,10,10; 65700,
                  0,0,10,10; 65700,0.105,0.05,40,40; 65760,0,0.05,10,10; 65760,
                  0,0,10,10; 73800,0,0,10,10; 73800,0.42,0.066666667,55,55;
                  73921,0,0.066666667,10,10; 73921,0,0,10,10; 77400,0,0,10,10;
                  77400,0.525,0.083333333,45,45; 77555,0,0.083333333,10,10;
                  77555,0,0,10,10; 86400,0,0,10,10], V_dhw_day=43.5e-3);

          end ProfileS;

          record ProfileM "Profile M"
            extends
              BESMod.HugosProject.Systems.Demand.DHW.RecordsCollection.PartialDHWTap(
                table=[0,0,0,10,10; 25200,0,0,10,10; 25200,0.105,0.05,25,25;
                  25321,0,0.05,10,10; 25321,0,0,10,10; 25500,0,0,10,10; 25500,
                  1.4,0.1,40,40; 25902,0,0.1,10,10; 25902,0,0,10,10; 27000,0,0,
                  10,10; 27000,0.105,0.05,25,25; 27121,0,0.05,10,10; 27121,0,0,
                  10,10; 28860,0,0,10,10; 28860,0.105,0.05,25,25; 28981,0,0.05,
                  10,10; 28981,0,0,10,10; 29700,0,0,10,10; 29700,0.105,0.05,25,
                  25; 29821,0,0.05,10,10; 29821,0,0,10,10; 30600,0,0,10,10;
                  30600,0.105,0.05,25,25; 30721,0,0.05,10,10; 30721,0,0,10,10;
                  31500,0,0,10,10; 31500,0.105,0.05,25,25; 31621,0,0.05,10,10;
                  31621,0,0,10,10; 32400,0,0,10,10; 32400,0.105,0.05,25,25;
                  32521,0,0.05,10,10; 32521,0,0,10,10; 34200,0,0,10,10; 34200,
                  0.105,0.05,25,25; 34321,0,0.05,10,10; 34321,0,0,10,10; 37800,
                  0,0,10,10; 37800,0.105,0.05,40,40; 37860,0,0.05,10,10; 37860,
                  0,0,10,10; 41400,0,0,10,10; 41400,0.105,0.05,25,25; 41521,0,
                  0.05,10,10; 41521,0,0,10,10; 42300,0,0,10,10; 42300,0.105,
                  0.05,25,25; 42421,0,0.05,10,10; 42421,0,0,10,10; 45900,0,0,10,
                  10; 45900,0.315,0.066666667,55,55; 45990,0,0.066666667,10,10;
                  45990,0,0,10,10; 52200,0,0,10,10; 52200,0.105,0.05,25,25;
                  52321,0,0.05,10,10; 52321,0,0,10,10; 55800,0,0,10,10; 55800,
                  0.105,0.05,25,25; 55921,0,0.05,10,10; 55921,0,0,10,10; 59400,
                  0,0,10,10; 59400,0.105,0.05,25,25; 59521,0,0.05,10,10; 59521,
                  0,0,10,10; 64800,0,0,10,10; 64800,0.105,0.05,25,25; 64921,0,
                  0.05,10,10; 64921,0,0,10,10; 65700,0,0,10,10; 65700,0.105,
                  0.05,40,40; 65760,0,0.05,10,10; 65760,0,0,10,10; 66600,0,0,10,
                  10; 66600,0.105,0.05,40,40; 66660,0,0.05,10,10; 66660,0,0,10,
                  10; 68400,0,0,10,10; 68400,0.105,0.05,25,25; 68521,0,0.05,10,
                  10; 68521,0,0,10,10; 73800,0,0,10,10; 73800,0.735,0.066666667,
                  55,55; 74011,0,0.066666667,10,10; 74011,0,0,10,10; 76500,0,0,
                  10,10; 76500,0.105,0.05,25,25; 76621,0,0.05,10,10; 76621,0,0,
                  10,10; 77400,0,0,10,10; 77400,1.4,0.1,40,40; 77802,0,0.1,10,
                  10; 77802,0,0,10,10; 86400,0,0,10,10], V_dhw_day=123.417e-3);
          end ProfileM;

          record NoDHW
            extends
              BESMod.HugosProject.Systems.Demand.DHW.RecordsCollection.PartialDHWTap(
              final m_flow_nominal=0,
              final table=[0,0,0,10,10; 86400,0,0,10,10],
              final V_dhw_day=0);
          end NoDHW;

          record DHWDesignParameters
            parameter Modelica.Units.SI.MassFlowRate mDHW_flow_nominal
              "Nominal mass flow rate" annotation (Dialog(group="DHW Demand"));
            parameter Modelica.Units.SI.HeatFlowRate QDHW_flow_nominal
              "Nominal heat flow rate to DHW" annotation (Dialog(group="DHW Demand"));
            parameter Modelica.Units.SI.Temperature TDHW_nominal
              "Nominal DHW temperature" annotation (Dialog(group="DHW Demand"));
            parameter Modelica.Units.SI.Temperature TDHWCold_nominal
              "Nominal DHW temperature of cold city water"
              annotation (Dialog(group="DHW Demand"));
            parameter Modelica.Units.SI.Volume VDHWDay "Daily volume of DHW tapping"
              annotation (Dialog(group="DHW Demand"));

          end DHWDesignParameters;
        end RecordsCollection;

        package Types "Package with types like enumartions or similar"

          type DHWProfile = enumeration(
              S "Profile S",
              M "Profile M",
              L "Profile L",
              DHWCalc "DHWCalc",
              NoDHW "No DHW") "Enum for dhw profile type";
        end Types;

        package TappingProfiles "Calculate DHW demand based on tapping profiles"
          model calcmFlowEquDynamic "Dynamic way to calc m_flow_equivalent"
            extends
              Systems.Demand.DHW.TappingProfiles.BaseClasses.PartialcalcmFlowEqu;
            Modelica.Blocks.Continuous.Integrator
                                      mDHWTapped
              annotation (Placement(transformation(extent={{-62,44},{-42,24}})));
          equation
            connect(TIs, dTIs.u1) annotation (Line(points={{-120,0},{-76,0},{-76,0},{-44,0}},
                  color={0,0,127}));
            connect(m_flow_in, mDHWTapped.u) annotation (Line(points={{-120,60},{-92,60},
                    {-92,34},{-64,34}}, color={0,0,127}));
          end calcmFlowEquDynamic;

          model calcmFlowEquStatic "Static way to calc m_flow_equivalent"
            extends
              Systems.Demand.DHW.TappingProfiles.BaseClasses.PartialcalcmFlowEqu;
            Modelica.Blocks.Sources.Constant constTSet(final k=TSetDHW)
              annotation (Placement(transformation(extent={{-82,-10},{-62,10}})));
          equation
            connect(constTSet.y, dTIs.u1)
              annotation (Line(points={{-61,0},{-44,0}}, color={0,0,127}));
          end calcmFlowEquStatic;

          model PassThrough "Just extract the water from the DHW tank"
            extends Systems.Demand.DHW.TappingProfiles.BaseClasses.PartialDHW;
          equation
            connect(m_flow_in, m_flow_out) annotation (Line(points={{-120,60},{-6,60},{
                    -6,0},{110,0}}, color={0,0,127}));
          end PassThrough;

          package BaseClasses
            extends Modelica.Icons.BasesPackage;

            partial model PartialDHW
              extends BESMod.Utilities.Icons.DHWIcon;
              parameter Modelica.Units.SI.Temperature TCold=283.15 "Cold water temperature";
              parameter Modelica.Units.SI.Density dWater=1000 "Density of water";
              parameter Modelica.Units.SI.SpecificHeatCapacityAtConstantPressure c_p_water=
                  4184 "Heat capacity of water";
              parameter Real TSetDHW "Set temperature of DHW";

              Modelica.Blocks.Interfaces.RealInput m_flow_in
                annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
              Modelica.Blocks.Interfaces.RealOutput m_flow_out
                annotation (Placement(transformation(extent={{100,-10},{120,10}})));
              Modelica.Blocks.Interfaces.RealInput TSet "Set temperature of DHW"
                annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
              Modelica.Blocks.Interfaces.RealInput TIs "Actual DHW temperature"
                annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));

            equation
              assert(TSet>=TCold, "Set temperature has to be higher than cold water temperature", AssertionLevel.error);
              // assert(TIs>TCold, "Actual temperature has to be higher than cold water temperature", AssertionLevel.error);

              annotation (Icon(graphics,
                               coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                    coordinateSystem(preserveAspectRatio=false)));
            end PartialDHW;

            partial model PartialcalcmFlowEqu
              "Calculate based on set temperature and actual temperature"
              extends BaseClasses.PartialDHW;
              Modelica.Blocks.Math.Division
                                        division
                annotation (Placement(transformation(extent={{-8,-2},{12,-22}})));
              Modelica.Blocks.Math.Add dTSet(final k2=-1)
                annotation (Placement(transformation(extent={{-42,-80},{-22,-60}})));
              Modelica.Blocks.Sources.Constant constTCold(final k=TCold)
                annotation (Placement(transformation(extent={{-80,-100},{-60,-80}})));
              Modelica.Blocks.Math.Add dTIs(final k2=-1)
                annotation (Placement(transformation(extent={{-42,-16},{-22,4}})));
              Modelica.Blocks.Math.Product
                                        product
                annotation (Placement(transformation(extent={{64,10},{84,-10}})));
              Modelica.Blocks.Nonlinear.Limiter limiter(uMax=1, uMin=0)
                annotation (Placement(transformation(extent={{30,-22},{50,-2}})));
              Modelica.Blocks.Math.Add deltaLim(final k2=-1) annotation (Placement(
                    transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=0,
                    origin={10,82})));
              Modelica.Blocks.Interfaces.RealOutput Q_flowERROR
                annotation (Placement(transformation(extent={{100,70},{120,90}})));
              Modelica.Blocks.Math.MultiProduct
                                        multiProduct(nu=4)
                annotation (Placement(transformation(extent={{42,90},{62,70}})));
              Modelica.Blocks.Sources.Constant const_cp(final k=c_p_water)
                annotation (Placement(transformation(extent={{-46,88},{-26,108}})));
            equation
              connect(TSet, dTSet.u1) annotation (Line(points={{-120,-60},{-64,-60},{-64,-64},
                      {-44,-64}}, color={0,0,127}));
              connect(constTCold.y, dTSet.u2) annotation (Line(points={{-59,-90},{-52,-90},{
                      -52,-76},{-44,-76}}, color={0,0,127}));
              connect(dTSet.y, division.u1) annotation (Line(points={{-21,-70},{-16,-70},
                      {-16,-18},{-10,-18}}, color={0,0,127}));
              connect(dTIs.y, division.u2)
                annotation (Line(points={{-21,-6},{-10,-6}}, color={0,0,127}));
              connect(product.y, m_flow_out)
                annotation (Line(points={{85,0},{110,0}}, color={0,0,127}));
              connect(m_flow_in, product.u2) annotation (Line(points={{-120,60},{36,60},
                      {36,6},{62,6}}, color={0,0,127}));
              connect(constTCold.y, dTIs.u2) annotation (Line(points={{-59,-90},{-52,
                      -90},{-52,-12},{-44,-12}}, color={0,0,127}));
              connect(division.y, limiter.u)
                annotation (Line(points={{13,-12},{28,-12}}, color={0,0,127}));
              connect(limiter.y, product.u1) annotation (Line(points={{51,-12},{56,-12},
                      {56,-6},{62,-6}}, color={0,0,127}));
              connect(division.y, deltaLim.u1) annotation (Line(points={{13,-12},{16,
                      -12},{16,-10},{18,-10},{18,20},{-14,20},{-14,88},{-2,88}}, color=
                      {0,0,127}));
              connect(limiter.y, deltaLim.u2) annotation (Line(points={{51,-12},{22,-12},
                      {22,46},{-10,46},{-10,76},{-2,76}}, color={0,0,127}));
              connect(deltaLim.y, multiProduct.u[1]) annotation (Line(points={{21,82},{31.5,
                      82},{31.5,82.625},{42,82.625}},    color={0,0,127}));
              connect(m_flow_in, multiProduct.u[2]) annotation (Line(points={{-120,60},{34,
                      60},{34,80.875},{42,80.875}},   color={0,0,127}));
              connect(const_cp.y, multiProduct.u[3]) annotation (Line(points={{-25,98},{36,
                      98},{36,79.125},{42,79.125}},   color={0,0,127}));
              connect(multiProduct.y, Q_flowERROR) annotation (Line(points={{63.7,80},{
                      110,80},{110,80}}, color={0,0,127}));
              connect(dTSet.y, multiProduct.u[4]) annotation (Line(points={{-21,-70},{28,-70},
                      {28,77.375},{42,77.375}},       color={0,0,127}));
            end PartialcalcmFlowEqu;
          end BaseClasses;
        end TappingProfiles;

        package BaseClasses
          extends Modelica.Icons.BasesPackage;
          partial model PartialDHW "Partial model for domestic hot water (DHW)"
            extends
              BESMod.HugosProject.Systems.BaseClasses.PartialFluidSubsystem;
            extends BESMod.Utilities.Icons.DHWIcon;
            replaceable parameter RecordsCollection.DHWDesignParameters parameters;
            parameter Boolean subsystemDisabled "To enable the icon if the subsystem is disabled" annotation (Dialog(tab="Graphics"));

            Modelica.Fluid.Interfaces.FluidPort_a port_a(redeclare final
                package Medium =
                  Medium) "Inlet for the demand of DHW" annotation (Placement(
                  transformation(extent={{-110,50},{-90,70}}),  iconTransformation(extent={{-110,50},
                      {-90,70}})));
            Modelica.Fluid.Interfaces.FluidPort_b port_b(redeclare final
                package Medium =
                  Medium) "Outlet of the demand of DHW" annotation (Placement(
                  transformation(extent={{-110,-70},{-90,-50}}), iconTransformation(
                    extent={{-110,-70},{-90,-50}})));
            BESMod.HugosProject.Systems.Interfaces.DHWOutputs outBusDHW
              annotation (Placement(transformation(extent={{90,-10},{110,10}})));

            BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
              annotation (Placement(transformation(extent={{-22,82},{20,116}}),
                  iconTransformation(extent={{44,88},{66,112}})));
            Electrical.Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{60,-108},{80,-88}})));
          equation

            annotation (Icon(
                graphics,                                 coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialDHW;
        end BaseClasses;
      annotation (Icon(graphics={
              Rectangle(
                lineColor={200,200,200},
                fillColor={248,248,248},
                fillPattern=FillPattern.HorizontalCylinder,
                extent={{-100,-100},{100,100}},
                radius=25.0),
                Bitmap(
                extent={{-74,-78},{86,76}},
                imageSource=
                    "iVBORw0KGgoAAAANSUhEUgAAAMgAAADdCAYAAAD+Qz22AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAHsQAAB7EBBsVhhgAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAABahSURBVHic7d15lFxlmcfx7/ve7s5GQhZDFhJJoiEIkaCggMwIESYBBxQRERlcmGEbUJA1Inpo9EgcdrI0SQgJYKJOO5w5CAZcMMPihgEUhGEQlwNCQoBgICTpdN33mT9uNV3dXXXrVtW9dW91PZ9z3tMaut/3qar3V3e/16CyyALTgfcA+wLvAiYBE4HJwHCgBRiZ//2tgMv/3Ai8DPwN+CPwNPBU/t9VhUzaBSgAWoHDgA8DHwIOBUbFPMZG4GHgIeAB4ImY+1cqVqOBzwM/IPjmlzq3vwA3AXMJllhKpc4DPgp8H9hB/UNRqv0VuALYK7FXrlSIkcD5BBMx7TCENR+4GzgkkXdBqX7GAVeTzipUre1+gu0hpWI3AlgAvE76E73Wdjfw7njfHtWsDHAqwR6jtCd2nK0L+CYwJL63SjWbfYH1pD+Zk2xPE+yOVioyQ7ABvpP0J3A9miPYPdwSx5uXdfU6UNhzZPi9wGxgKjCGYO/ObvmfI0v+dXa1AOOBYWkXkoL/AU5hkB+hTyogluBo8PHA4QSrHyMSGkulZyNwHPBo2oU0AgvMB1YAm0h/VUBbfdo24GOokiy93yJpf1ja0mk54F9RfXjAGcCfSP8D0pZ+c8A5KABmEGykpf2haMtWc8DpNDEDnEmw3pn2h6Etmy0HfIImtBtwH+l/ANqy37YT7MVseFF3844jOCdnULxoVRebgAOBl9IupBZRLpSZDvwKDYeqzETgvwiulmxYXpn/Ppbg8syZdahFDT5TgaHAT9MupFphq1itBNscH6lTLWpwcgRz6IG0C6lG2CrWMjQcqnYWWE2wk6fhlFrFOhFYWM9C1KA2hmBV6ydpF1KpYqtYuxPcR2nPOteiBrcccADB3GoYxVaxrkfDoeLXQnB9fkPpvwTZj+CGYnqfJJWUeTTQXq3+QWgv8m9KxenKtAuoROESZDbB0kNvR6qSdgQNstu3cGlxFhoOVR9fTbuAqHoCMRR4keDIeT1tBV4D3iQ4Q3hHncc/iOAeuaq+BNgHeDbtQqI6geTP8PQJzulaQHDD5HF1eWWl/RPpn/XazK2h9mh1kOyb8V2CGzdkyXrSnyTN3F4B2sp+ShnxNMm8CVuBf67j64hqP9KfINqCO91nmiU4LXmfBPreQXCXkx8l0Hetvph2AQqAT6ZdQBQnk8y3w5fq+SIqMBJ4g/S/PbUFO2gyfb2IBT6YQL/PEGzXZNHxNOZdHAejscAH0i4ijAWmJdDvIoK9Vln06bQLUH1k+pIKSzKP3fphAn3GYTTB7l2VHXPTLiCMJbgsMk5/JDjomEXH0EC7FpvEoZS/9Ds1lvgfN/yHmPuLky49smcYMCvtIkqxxL8XYUvM/cXpqLQLUEXNSbuAUizNc4Li3sS/OqnisX/aBZTSTNd+HJx2AaqkaWkXUEozBeTAtAtQJSWxJzUWzRSQ96ddgCpJA5IB70m7AFXSO9IuoJRmCcgoMvwhKNrI6PGpZgnIu9IuQJWVyfPjmiUguns3+zL5FORmCUjal/eq8lzaBRTTLAEZk3YBqqxc2gUU05J2AXXyFvBzqvuWyhHcdaXacXdV+bevV/j7w4EhZX5nNOUfeVHuLuxJjZPJgEAwaeK8SmxlfctXKjnNsoqlVFU0IEqF0IBEtG7lmsOS6FdEzD0rvvOhJPoudFdC9fcZ47bkx6g3DUgE9y5f8xXjy8PrVqw5Ju6+161ce6OFB+65ZW1iJ1Pec8uay1uEh9bdumZecmOsPdPL8dDdt679l6TGSIMGpIz7lt4+1zr3LeuEFt9du759fWx7/u69+Y6TPd+dZ520tOb86+Lqt9B9K24/ynPyDevEkJPrOjs7Y7+89b7l33m/FbfYiBjr3Lc7r+8cFvcYadGAhOjs7GzzoMM6sdYJxsm+/vjn/y2Ovu+69daRnsj11gnWCUbk8J903PaxOPru0dnZ2WZ8s6Snfs/J7NGvdp0W5xjt7e3WiFtqhDbrwDqmjBrRdUGcY6RJAxJi7Mvbv2yd7NMzifMhaV+/evXQWvsevsP7hnUyqbBv61goIrFd4Tn21e0XWSezCscAd+W6RYvKHceI7NCJM05DzCH93qMF93SsHRQHZzUgJaxfdMsUz/H1vhNYsE4m8oacWlPfN62c7Tm+OLBv9l2/+PZY7lf746WrphqfywuWUBgRrJPJQ8yoU+IY456OtWOsLwuLvEej2sidGccYadOAlGD9lq9Y53Yr8uFjHBdLe3vV750Vr90615IPRUETrJML46i/NWcvs05G9ISjT/3ChXEsqYb5u863TsYXe488X87rbO/M5CnsldCAFPHQwo4x1rnPF/vg8+vys36x29T51fS9/obV04yT4/uFovBb/iMPXLfyfTXV37F2jOfc5wqWGv2am/3g4lU13QJp3aJFQ6zj7FLvkXUyefzobSfVMkYWaECKsC1tZ1onRZcevevyUtWGaKtz51snXpFg9PaP+XIt9cuOHWcbCZYepZrJUdOG9Ag34lTrZELYGFZqGyMLNCD9bFi+vNU6ObfkxOqdzEc9tHDVjEr6/vWiNaOsL6f176/IOCetv2F1VY+G27B8easRzgmduEGb/6sbVk+rZgwA6zgvwhjvf/CGVQ19LwANSD9uiz3BOpkaEoyeZlptd2UHxbZvP8062b1Ef4Vt6NBu/8Rq6t+11Z7oOZkSPnHBOgzdrqqN9V9et/JI68v+EQKC1+0+V80YWaEB6cc4d0qZYPQ2n4ommHWcUiYYhdsJVU1e48spIaHos91jqhzDdrsSYxT5UkFOrmWHRtoatvAkPN6+erR1Mr/M6k/hhNvnN1et2DtK379d2DHDiHwgysQKwicf/s1VSyq6EvKhhR1jPJF5YaHo1/b79TeXzaxkjKfaO9uM4/go4cj/7wmPtE1s2Jv2aUAKGLtznnUypPS3/MAJ15ZzkY5+G9871joxkQPixGtx3tGV1D/UmfnWvX1EO9I4njXHVjLGTm/rP1iRsaFLjYG7lY+rZIws0YAUcnLkwGCEfwsb546M0rXn3JEVhCO/FDGR+n57DJ/IY7w9kX2paAwkV3SMsFVHD9OwNw3XgBTwnMyNuGpSGKBDyq1jS3u7tU4Orzgg4io6Dd445kYNR+8YcmglBw2t9B0jytLW+HLAhvblwyt5LVmhAcl75tJbRxrHu6OumhS00U93TQx9SvDTjJ9h/WDvVSXNONn7qfaVY6PUv2HB8t09JzMiLTX6/vvYJ75+c6TtqM5PdXrWyZyiQQv/YmlttX5D3hu5WW7aUJ63fX/rTJWnX3TvTfCs+aKk282xFT5lQgwYwSA7ZwK/Kff7w9r8/cUVXxL0/KuR4n9rLHsD/1dujFmzXn23dTK8b3+FQ5YYADBO9gYeKjdG1mhAejim21IzKIQYEMP0sN/xHNPDJk///sAUTubpRAiI8WW66T+GCUaN8LJC6+/RgkwXEYxEC0W/UiKNkTUakDwrMjbiZw30/VYWzOTwvhmLhHcu+YVXMJl7f9eY8L57x5A+Y4gJuomy3DJGoo3h3FjBEDUU/Uyq5o/SpgHJsz6jonzVwturP4VC56H1XYnnQJqCoJVa/3GRthO9nBuVX5rl+4vyV/2rKPN7jlEDllKRxzANub2rAcnzxN9WbmdOqcknZSaN9WVbb4R6xxAj5SeylFn09P7eNlOktiiibh15wrao5fQn1RSWARqQPOubLaU+xLLfyoa/hfbtzJbeP5aKvuUN4X2//XvObTFV7mMQTKQxrC+vl/syGNB3viQLL1RcWAZoQPKs7x6XfisBUSeyGPNEaN8ijyOVBaNAaN9vj4F7POLaWF5hmMLr7+Hl/MecjRbC/q/VCE9WUFxmNOR6YRKmLLngD9bJ5tL7+Eu2Hd2+tyGs79Ydw35hRLoqPlDo5OW9Xtzz2Sj1Tx/15pPWyatlDmoWO06xfUSX92iUMabdeMFG6/NMRQcig+a3ivtllDGyRgOSZzDiOZZEP9u250g0a2YuPu+NsL4nrzhruxVZVfGBQnHLzQ9O8iPV397urMjSiKEoPHB4xx4d526L+j5Z3OIKD0TiOblr6g0Xvhh1jCzRgBTwGHqD5+TF8pP37Um3uW2XvSJK30O67Detk61Rw+E5eW7oW/61ldQ/dFvuOuvkpbLnj/VO5JeHGNteyRibd4y4xTp5pkR/xdobuNyllYyRJRqQAnt0nLvNij3OCJuNBOvPxZtgRLYg/nHjV1ywMUrf41dcsNHgf8I6eTNCOP7mxD92/KoFFT12YfyqBW8ax8esc69EWP15zWKOnXDTl1+uZIyDVpzVjfBxKzwfYWm7zThOeOfiS/9UyRhZogHpZ49lFz2ey7kDge8DxVZvfJDv5XJuzqRlCx6ppO9JHQvWe749COFHFD/atguRFd1e9wF73ryg7KkfxUy++eJHnbEHGvhPI+L3TOKCyexbJ99tc3bO5CUXhm47lTJl6UXPGtt1kBVWWSe7igRDjC93tYp935SlF91fzRhZYQieDxLbzcqAW4HTY+wvNa+eff2e3cafZ4QDDLQI8qi1rNuj49JNtfa96fRrppsW5gH7C9JtjNnQbbvvnbL0q6/FUDoQ1J8jNx/MHCPGc1Yetd2t6yasrGypEWbT2dfsYUSOdtbMMcIIY8xjOWPu3bPjoobcrVuMPkBHqRJ0FUupEBoQpUJoQJQKoQFRKoQGRKkQGhClQmhAlAqhAVEqhF4PoqJoAfYCxgCj8z//XtD+CnSnVVySNCCqmCHAPOCjwIHAe4Gw5zLuAv4APAbcm287Eq6xLvRcrGw7CDgs/3MW0AqMArqAV4CXgBeB3wO/A/4XyNUw3gzgMuBEgiVFtd4E/hv4dr6mWk0G3gccAMwExuf/bRSwkyCMm4EN+fZTYgyonouVPUcTTPpK3/vtwM8IJvkHgajPRB8LrCBYEsQ5F3LAHcCECl//VOALwHcIvgAqHffvwBWEL/Ui04Bky5XE95lsBJYCcykdloOAP8U0Xqn2MsEqW5gZwKXAb2Mc9xGgokdIFKMByY4zSG6Svgh8i2Ai9vgIwepakuHoaTng4/1e73CCJcXDCY77ADXurdWAZMPuBKsGSU9UH/gxwXZiPcYrbG8BHwCmATfVcfzPRv8YBtKAZEOSS48stdcJdgnXc8yqb5qtBwqz4/C0C6iT0dT/8MLBwLBq/lADkh0VPStQVaSV4EBnxTQg2bFb2gUMcrtX80cakOzYmXYBg1xVBw41INmxOe0CBrmq7uSiAcmO36VdwCC2EQ1Iw/tR2gUMYndX+4cakOz4BfB42kUkLLab4lXAATdX+8cakOwQ4FyCEwaT1kVwtu0ngGvyYydtCcFJi/sD1xKciVwPS6hx9VWPpGfLKSRzflQX8BPg3wnO3i30UYIJm8RR7FeBTxV5nR4wH1hFsH2QxNh3EsNBSQ1I9hxK8K1X62fxDMFp7J8ERpYZczhwMcHetDjmwRbgaxHGhWBN5mDgG8CDBLu8axl7K3ARMa0haUCyyQLHEFxP8QLh77lPcMr6XcBVBN/YE6scdwhwHMGz2av5/B8BTqDKUzvyhgIfJjj9/XaCi6C2lxl3G8GFUucTXBIcC72isHGMIbiKbijB+UyOYPWlp8V9TfidBBO9Ut8HPhNzLT3GAHsA7yAI4DaCbbbN9F5YFSu9Jr1xvJ5v9TK5yr/bM9Yq+up5D6p6dko1dC+WKqXaL8/WWKtImQZEqRAaEKVCaECUCqEb6c1tGHAqsB8Dd8vuVWWfM4DlBf+/C3iO4BY+9dzJEBs9DtKcpgFPEe9nH9ZeILhLY8PRgDSn+6lfOHraMwQHIhuGboM0p5kE98Sqt1nAESmMWzUNSHOakuLY70xx7IppQJpTmp97Q825hipWqXrTgCgVQgOiVAgNiFIhNCBKhdCAKBVCA6JUCA2IUiE0IEqF0IAoFUIDolQIvWAqfuMJnuZ6GMG9qcanW05RUW7mlpSvEjyPsZRWgvdtOMl+gfsEt0raQXAhV1fBf3seuA34Iej1IHF5B8F9YHdR/+sstCXTPqtLkHjsD9wDTE27EBWryzQgtZsDPIw+Y3AwmqUb6bUZTfAYAQ3H4GQ1ILW5BJiedhEqORqQ6o0kuJO4GsQ0INWbD4xIuwiVLA1I9Y5PuwCVPA1I9Y5IuwCVPA1I9fo/508NQhqQ6ul71wT0Q1YqhAZEqRAaEKVCaECq59IuQCVPA1I9DUgT0IBUr6v8r6hGpwGp3s60C1DJ04BUT1exmoAGRKkQGhClShMNiFKl/VkDolRpy/SmDdm2C3grgX4NsHv+Z71tJXwHhwcMy/9Msj7J19Fzf6zugv/2PLAaWAx6X6xqvUDy92W6LcH6T69D/f3bVQm+nkToKlbzWgl8GvhzHcbaCJwHXF6HsWKlq1jNrTPfhgFDExqjG9iWUN+J04AoCO5PuyPtIrJIV7GUCqEBUSqEBkSpEBoQpUJoQJQKoQFRKoQGRKkQGhClQmhAlAqhAVEqhAZEqRAaEKVCaECqJ4NkDBVCA1K95+owxrN1GEOF0IBUb1nC/b8BrE14DFWGBqR6ncAZwF9i7jcHPELwkNDnY+5bVUgvmKrNynzbDWiNqc8d6G1NM0MDEo+GvaRUhdOA1Mn9S1d9SLBf2/LK8ONPaj9pV9r1qGh0G6QOfn7jrbNwdp1xHDNu3PZL0q5HRacBSdj61auHYu2dRmR3I4IRWfCzG2+ZkHZdKhoNSMLsVq6wjv2sg3wb2WJar0i7LhWNBiRB629aORuRi/NLjt7m3Bnrr129T9r1qfI0IAnyfHONEWkZEBCRFs9zC9KuT5WnAUnIg9etPNI6ji5YterbfD7z4A3LJ6VdpwqnAUmI57iiyJKjsA3xur1z0q5ThdOAJOCXV6843Ij8Y5mAYJBzfn/NHSPSrleVpgFJgHV2QclVq75t7M7czs+mXa8qTQMSsw1XL3+XETe/7NIj34Avpl2zKk0DEjPf5ywjYqMGxIjs9+uFtxyYdt2qOD0XK0br29tbPJ8vVPp3Fvc54NH4K1K10iVIjEaZCUcakfEVLD0wIliRT3d2dnpp168G0oDEyZiTjUDxFrIdIjJh5jOvHZJ2+WogDUhMOjs7PSvy8T5LBlfYwvdoGWeOS/s1qIE0IDGZ9eTmg6yTMYWhqGw1y2lAMkgDEhdjjiq9elW+IbznscsWjU/7Zai+NCAx8YS5kZcWrmgzbdbT7ZCM0YDExDg5oMTEH9BKhsfIoWm/DtWXHgeJwZOXL51qRMbF0NV7Y+hDxUgDEoM2cbNdDDcJtY7ptfei4tQC/AdgYuzztzH21RDEySQbz110pwliTLDZrjKgBbgs7SIanRUZi8TyHTPiuS8tHsli3oijM1U7XcWKgzA6f2ZuzezwoXEuzVWNNCAxsDm6TExrRW5nl65eZYgGJAZW5PWYupKWcSP1rosZogGJhdts4tkG2Ty9/TS9cXWGaEBi0NLd+rB4uZr7MfBYDOWoGOmR9Bi8c8mXXjIif6z0OpCBp727n6X9WlRfGpC4CD+oMSBdztrvpf0yVF8akJi0dfs3WcfrEe9mMqB5Yjqm3XjBxrRfh+pLAxKTicsu2YzIuUZEqlh6PMmuN76W9mtQA+lBqZhtOvua88RwPRD1GvMnPCPz9+i4dFOSdanq6BIkZhOXXbJIkLlG+H3oRVLwlhHz7Z073jpYw5FdugRJiCBm0zlXH2GcPd7AYQJ7A1uA3xm413fmzskrLn417TpVuP8HmRHmxCb03h4AAAAASUVORK5CYII=",
                fileName="modelica://BESMod/Resources/Images/DHW.png")}));
      end DHW;

      package Building

        model TEASERThermalZone
          "Reduced order building model, coupled with TEASER"
          extends BaseClasses.PartialDemand(
            ARoo=sum(zoneParam.ARoof)/nZones,
            hBui=sum(zoneParam.VAir)^(1/3),
            ABui=2*sum(zoneParam.VAir)^(1/3),
            hZone=zoneParam.VAir ./ zoneParam.AZone,
            AZone=zoneParam.AZone);
          replaceable parameter AixLib.DataBase.ThermalZones.ZoneBaseRecord oneZoneParam constrainedby
            AixLib.DataBase.ThermalZones.ZoneBaseRecord
            "Default zone if only one is chosen" annotation(choicesAllMatching=true);
          parameter AixLib.DataBase.ThermalZones.ZoneBaseRecord zoneParam[nZones]=fill(oneZoneParam, nZones)
            "Choose an array of multiple zones" annotation(choicesAllMatching=true);
          parameter Real ventRate[nZones]=fill(0, nZones) "Constant mechanical ventilation rate";

          parameter Boolean use_verboseEnergyBalance = true "=false to disable the integration of the verbose energy balance";
          parameter Modelica.Units.SI.TemperatureDifference dTComfort=2
            "Temperature difference to room set temperature at which the comfort is still acceptable. In DIN EN 15251, all temperatures below 22 °C - 2 K count as discomfort. Hence the default value. If your room set temperature is lower, consider using smaller values.";

          parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
            "Type of energy balance: dynamic (3 initialization options) or steady state"
            annotation (Dialog(tab="Dynamics"));
          parameter Modelica.Units.SI.Temperature T_start=293.15
            "Start value of temperature" annotation (Dialog(tab="Initialization"));

          AixLib.ThermalZones.ReducedOrder.ThermalZone.ThermalZone thermalZone[nZones](
            redeclare each final package Medium = MediumZone,
            each final energyDynamics=energyDynamics,
            each final T_start=T_start,
            final zoneParam=zoneParam,
            each final use_AirExchange=true,
            each final nPorts=if use_ventilation then 2 else 0) annotation (Placement(
                transformation(extent={{35,12},{-39,84}}, rotation=0)));

          Modelica.Blocks.Sources.Constant constTSetRoom[nZones](final k=
                TSetZone_nominal) "Transform Volume l to massflowrate" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={74,60})));

          Modelica.Blocks.Sources.Constant constVentRate[nZones](final k=ventRate)
                                                                      "Transform Volume l to massflowrate"
                                                 annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}}, rotation=180,
                origin={74,30})));

          Utilities.KPIs.InputKPICalculator inputKPICalculatorTraGain[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_hydraulic and use_verboseEnergyBalance
                                    annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-7,-63})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorTraLoss[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_hydraulic and use_verboseEnergyBalance
                                    annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-7,-80})));
          Modelica.Blocks.Nonlinear.Limiter limUp[nZones](each final uMax=
                Modelica.Constants.inf, each final uMin=0) if use_hydraulic and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-28,-66},{-22,-60}})));
          Modelica.Blocks.Nonlinear.Limiter limDown[nZones](each final uMax=
               0, each final uMin=-Modelica.Constants.inf) if use_hydraulic and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-30,-82},{-24,-76}})));
          Utilities.KPIs.InputKPICalculator    inputKPICalculator   [nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance
            annotation (Placement(transformation(
                extent={{-7,-13},{7,13}},
                rotation=180,
                origin={25,-81})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorVentGain[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_ventilation and use_verboseEnergyBalance
                                    annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=180,
                origin={25,-97})));
          Modelica.Blocks.Sources.RealExpression QVent[nZones](y=
                portVent_in.m_flow*inStream(portVent_in.h_outflow) + portVent_out.m_flow
                *portVent_out.h_outflow) if use_ventilation and use_verboseEnergyBalance
            "Internal gains"                                               annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={62,-106})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorVentLoss[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_ventilation and use_verboseEnergyBalance
                                    annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=180,
                origin={25,-114})));
          Modelica.Blocks.Nonlinear.Limiter limVentUp[nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0)
            if use_ventilation and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-3,-3},{3,3}},
                rotation=180,
                origin={43,-97})));
          Modelica.Blocks.Nonlinear.Limiter limVentDown[nZones](each final
              uMax=0, each final uMin=-Modelica.Constants.inf)
            if use_ventilation and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-3,-3},{3,3}},
                rotation=180,
                origin={41,-115})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorTraGain2[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-7,-97})));
          Modelica.Blocks.Sources.RealExpression QAirExc[nZones](y=
                thermalZone.airExc.Q_flow) if use_verboseEnergyBalance "Internal gains"                annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-48,-106})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorTraLoss2[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-7,-114})));
          Modelica.Blocks.Nonlinear.Limiter limAirExcUp[nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0)
                                                             if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-28,-100},{-22,-94}})));
          Modelica.Blocks.Nonlinear.Limiter limAixExDown[nZones](
              each final uMax=0, each final uMin=-Modelica.Constants.inf)
                                                                         if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-30,-116},{-24,-110}})));
          Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensorRad[
            nZones]
            annotation (Placement(transformation(extent={{-82,-70},{-62,-50}})));
          Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensorConv[
            nZones]
            annotation (Placement(transformation(extent={{-86,50},{-66,70}})));
          Modelica.Blocks.Math.Add          addTra
                                                 [nZones]
            if use_hydraulic and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-52,-80},{-42,-70}})));
          Utilities.KPIs.ComfortCalculator comfortCalculatorCool[nZones](TComBou=
                TSetZone_nominal .+ dTComfort, each for_heating=false)
            annotation (Placement(transformation(extent={{-24,-52},{-4,-32}})));
          Utilities.KPIs.ComfortCalculator comfortCalculatorHea[nZones](TComBou=
                TSetZone_nominal .- dTComfort, each for_heating=true)
            annotation (Placement(transformation(extent={{-24,-30},{-4,-10}})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorOwaGain[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-7,-137})));
          Modelica.Blocks.Sources.RealExpression QOwa[nZones](y=
                thermalZone.ROM.extWall.Q_flow) if use_verboseEnergyBalance "Internal gains" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-48,-146})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorOwaLoss[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-7,-154})));
          Modelica.Blocks.Nonlinear.Limiter limAirExcUp1
                                                       [nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-28,-140},{-22,-134}})));
          Modelica.Blocks.Nonlinear.Limiter limAixExDown1
                                                        [nZones](each final
              uMax=0, each final uMin=-Modelica.Constants.inf) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-30,-156},{-24,-150}})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorFloorGain[
            nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if oneZoneParam.AFloor > 0  and use_verboseEnergyBalance
            annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-7,-173})));
          Modelica.Blocks.Sources.RealExpression QFloor[nZones](y=
                thermalZone.ROM.floor.Q_flow)
            if oneZoneParam.AFloor > 0 and use_verboseEnergyBalance "Internal gains" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-48,-182})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorFloorLoss[
            nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if oneZoneParam.AFloor > 0 and use_verboseEnergyBalance
            annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-7,-190})));
          Modelica.Blocks.Nonlinear.Limiter limAirExcUp2
                                                       [nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0)
            if oneZoneParam.AFloor > 0 and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-28,-176},{-22,-170}})));
          Modelica.Blocks.Nonlinear.Limiter limAixExDown2
                                                        [nZones](each final
              uMax=0, each final uMin=-Modelica.Constants.inf)
            if oneZoneParam.AFloor > 0 and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-30,-192},{-24,-186}})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorRoofGain[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-75,-137})));
          Modelica.Blocks.Sources.RealExpression QRoof[nZones](y=
                thermalZone.ROM.roof.Q_flow) if use_verboseEnergyBalance "Internal gains" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-116,-146})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorRoofLoss[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-75,-154})));
          Modelica.Blocks.Nonlinear.Limiter limAirExcUp3
                                                       [nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-96,-140},{-90,-134}})));
          Modelica.Blocks.Nonlinear.Limiter limAixExDown3
                                                        [nZones](each final
              uMax=0, each final uMin=-Modelica.Constants.inf) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-98,-156},{-92,-150}})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorWinGain[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-75,-173})));
          Modelica.Blocks.Sources.RealExpression QWin[nZones](y=
                thermalZone.ROM.window.Q_flow) if use_verboseEnergyBalance "Internal gains" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-116,-182})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorWinLoss[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-75,-190})));
          Modelica.Blocks.Nonlinear.Limiter limAirExcUp4
                                                       [nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-96,-176},{-90,-170}})));
          Modelica.Blocks.Nonlinear.Limiter limAixExDown4
                                                        [nZones](each final
              uMax=0, each final uMin=-Modelica.Constants.inf) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-98,-192},{-92,-186}})));
          Modelica.Blocks.Math.MultiSum multiSum[nZones](each final nu=3) if use_verboseEnergyBalance annotation (Placement(transformation(extent={{-5,-5},{5,5}},
                rotation=180,
                origin={53,-81})));

          Utilities.Electrical.ZeroLoad zeroLoad annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={94,-96})));
        equation

          for i in 1:nZones loop
            connect(weaBus.TDryBul, thermalZone[i].ventTemp) annotation (Line(
                points={{-47,98},{126,98},{126,42.24},{33.52,42.24}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(useProBus.intGains, thermalZone[i].intGains) annotation (Line(
                points={{51,101},{-62,101},{-62,8},{-31.6,8},{-31.6,17.76}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            if use_ventilation then
              connect(portVent_in[i], thermalZone[i].ports[1]) annotation (Line(points={{100,38},
                      {82,38},{82,10},{-2,10},{-2,22.08}},                 color={0,127,
                    255}));
              connect(portVent_out[i], thermalZone[i].ports[2]) annotation (Line(points={{100,-40},
                      {82,-40},{82,2},{-2,2},{-2,22.08}},             color={0,127,255}));
            end if;
            connect(weaBus, thermalZone[i].weaBus) annotation (Line(
              points={{-47,98},{38,98},{38,69.6},{35,69.6}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          end for;
          connect(constTSetRoom.y, thermalZone.TSetCool) annotation (Line(points={{63,60},
                  {48,60},{48,62.4},{33.52,62.4}},color={0,0,127}));
          connect(constTSetRoom.y, thermalZone.TSetHeat) annotation (Line(points={{63,60},
                  {48,60},{48,52.32},{33.52,52.32}},color={0,0,127}));

          connect(constVentRate.y, thermalZone.ventRate) annotation (Line(points={{63,30},
                  {48,30},{48,32.88},{33.52,32.88}},color={0,0,127}));

          // KPIs
          if use_hydraulic then
            connect(inputKPICalculatorTraGain.KPIBus, outBusDem.QTraGain) annotation (
              Line(
              points={{0.14,-63},{6,-63},{6,-64},{10,-64},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
            connect(inputKPICalculatorTraLoss.KPIBus, outBusDem.QTraLoss) annotation (
              Line(
              points={{0.14,-80},{10,-80},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));

            connect(limUp.y, inputKPICalculatorTraGain.u)
            annotation (Line(points={{-21.7,-63},{-15.54,-63}},
                                                              color={0,0,127}));
            connect(limDown.y, inputKPICalculatorTraLoss.u) annotation (Line(points={{-23.7,
                    -79},{-22,-79},{-22,-80},{-15.54,-80}},
                                                       color={0,0,127}));
          end if;
          connect(inputKPICalculator.KPIBus, outBusDem.QIntGain) annotation (Line(
              points={{17.86,-81},{14,-81},{14,-82},{10,-82},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(limAirExcUp.y, inputKPICalculatorTraGain2.u)
            annotation (Line(points={{-21.7,-97},{-15.54,-97}}, color={0,0,127}));
          connect(limAixExDown.y, inputKPICalculatorTraLoss2.u) annotation (Line(points={{-23.7,
                  -113},{-22,-113},{-22,-114},{-15.54,-114}},   color={0,0,127}));
          connect(QAirExc.y, limAirExcUp.u) annotation (Line(points={{-37,-106},{-38,
                  -106},{-38,-97},{-28.6,-97}},
                                         color={0,0,127}));
          connect(QAirExc.y, limAixExDown.u) annotation (Line(points={{-37,-106},{-37,
                  -113},{-30.6,-113}},
                               color={0,0,127}));
          connect(inputKPICalculatorTraGain2.KPIBus, outBusDem.QAirExcGain) annotation (
             Line(
              points={{0.14,-97},{10,-97},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorTraLoss2.KPIBus, outBusDem.QAirExcLoss) annotation (
             Line(
              points={{0.14,-114},{10,-114},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          if use_ventilation then
           connect(limVentUp.y, inputKPICalculatorVentGain.u) annotation (Line(points={{39.7,
                    -97},{33.54,-97}},               color={0,0,127}));
           connect(limVentDown.y, inputKPICalculatorVentLoss.u) annotation (Line(points={{37.7,
                    -115},{37.7,-114},{33.54,-114}},          color={0,0,127}));
           connect(QVent.y, limVentUp.u) annotation (Line(points={{51,-106},{56,-106},{
                    56,-97},{46.6,-97}},
                                 color={0,0,127}));
           connect(QVent.y, limVentDown.u) annotation (Line(points={{51,-106},{51,-114},
                    {44.6,-114},{44.6,-115}},
                            color={0,0,127}));
           connect(inputKPICalculatorVentGain.KPIBus, outBusDem.QVentGain) annotation (
            Line(
            points={{17.86,-97},{17.86,-96},{10,-96},{10,-2},{98,-2}},
            color={255,204,51},
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
           connect(inputKPICalculatorVentLoss.KPIBus, outBusDem.QVentLoss) annotation (
            Line(
            points={{17.86,-114},{10,-114},{10,-2},{98,-2}},
            color={255,204,51},
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
          end if;

          connect(thermalZone.intGainsConv, heatFlowSensorConv.port_b) annotation (Line(
                points={{-39.74,49.44},{-39.74,48},{-52,48},{-52,60},{-66,60}}, color={
                  191,0,0}));
          connect(heatPortCon, heatFlowSensorConv.port_a)
            annotation (Line(points={{-100,60},{-86,60}}, color={191,0,0}));
          connect(heatPortRad, heatFlowSensorRad.port_a)
            annotation (Line(points={{-100,-60},{-82,-60}}, color={191,0,0}));
          connect(heatFlowSensorRad.port_b, thermalZone.intGainsRad) annotation (Line(
                points={{-62,-60},{-48,-60},{-48,48},{-50,48},{-50,60.24},{-39.74,60.24}},
                color={191,0,0}));
          connect(addTra.y, limUp.u) annotation (Line(points={{-41.5,-75},{-32,-75},{
                  -32,-63},{-28.6,-63}},
                              color={0,0,127}));
          connect(addTra.y, limDown.u) annotation (Line(points={{-41.5,-75},{-36,-75},{
                  -36,-79},{-30.6,-79}},
                                   color={0,0,127}));
          connect(heatFlowSensorRad.Q_flow, addTra.u2)
            annotation (Line(points={{-72,-71},{-72,-78},{-53,-78}}, color={0,0,127}));
          connect(heatFlowSensorConv.Q_flow, addTra.u1) annotation (Line(points={{-76,49},
                  {-76,-72},{-53,-72}},                                  color={0,0,127}));
          connect(thermalZone.TAir, outBusDem.TZone) annotation (Line(points={{-42.7,
                  76.8},{-48,76.8},{-48,-2},{98,-2}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(thermalZone.TAir, comfortCalculatorHea.TZone) annotation (Line(points={{-42.7,
                  76.8},{-48,76.8},{-48,-20},{-26,-20}},        color={0,0,127}));
          connect(thermalZone.TAir, comfortCalculatorCool.TZone) annotation (Line(
                points={{-42.7,76.8},{-48,76.8},{-48,-42},{-26,-42}}, color={0,0,127}));
          connect(comfortCalculatorCool.dTComSec, outBusDem.dTComCoo) annotation (Line(
                points={{-3,-42},{10,-42},{10,-2},{98,-2}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(comfortCalculatorHea.dTComSec, outBusDem.dTComHea) annotation (Line(
                points={{-3,-20},{10,-20},{10,-2},{98,-2}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(limAirExcUp1.y, inputKPICalculatorOwaGain.u)
            annotation (Line(points={{-21.7,-137},{-15.54,-137}}, color={0,0,127}));
          connect(limAixExDown1.y, inputKPICalculatorOwaLoss.u) annotation (Line(points=
                 {{-23.7,-153},{-22,-153},{-22,-154},{-15.54,-154}}, color={0,0,127}));
          connect(QOwa.y, limAirExcUp1.u) annotation (Line(points={{-37,-146},{-38,-146},
                  {-38,-137},{-28.6,-137}}, color={0,0,127}));
          connect(QOwa.y, limAixExDown1.u) annotation (Line(points={{-37,-146},{-37,
                  -153},{-30.6,-153}}, color={0,0,127}));
          connect(limAirExcUp2.y, inputKPICalculatorFloorGain.u)
            annotation (Line(points={{-21.7,-173},{-15.54,-173}}, color={0,0,127}));
          connect(limAixExDown2.y, inputKPICalculatorFloorLoss.u) annotation (Line(
                points={{-23.7,-189},{-22,-189},{-22,-190},{-15.54,-190}}, color={0,0,
                  127}));
          connect(QFloor.y, limAirExcUp2.u) annotation (Line(points={{-37,-182},{-38,
                  -182},{-38,-173},{-28.6,-173}}, color={0,0,127}));
          connect(QFloor.y, limAixExDown2.u) annotation (Line(points={{-37,-182},{-37,
                  -189},{-30.6,-189}}, color={0,0,127}));
          connect(limAirExcUp3.y, inputKPICalculatorRoofGain.u)
            annotation (Line(points={{-89.7,-137},{-83.54,-137}}, color={0,0,127}));
          connect(limAixExDown3.y, inputKPICalculatorRoofLoss.u) annotation (Line(
                points={{-91.7,-153},{-90,-153},{-90,-154},{-83.54,-154}}, color={0,0,
                  127}));
          connect(QRoof.y, limAirExcUp3.u) annotation (Line(points={{-105,-146},{-106,
                  -146},{-106,-137},{-96.6,-137}}, color={0,0,127}));
          connect(QRoof.y, limAixExDown3.u) annotation (Line(points={{-105,-146},{-105,
                  -153},{-98.6,-153}}, color={0,0,127}));
          connect(limAirExcUp4.y, inputKPICalculatorWinGain.u)
            annotation (Line(points={{-89.7,-173},{-83.54,-173}}, color={0,0,127}));
          connect(limAixExDown4.y, inputKPICalculatorWinLoss.u) annotation (Line(points=
                 {{-91.7,-189},{-90,-189},{-90,-190},{-83.54,-190}}, color={0,0,127}));
          connect(QWin.y, limAirExcUp4.u) annotation (Line(points={{-105,-182},{-106,
                  -182},{-106,-173},{-96.6,-173}}, color={0,0,127}));
          connect(QWin.y, limAixExDown4.u) annotation (Line(points={{-105,-182},{-105,
                  -189},{-98.6,-189}}, color={0,0,127}));
          connect(inputKPICalculatorOwaGain.KPIBus, outBusDem.QOwaGain) annotation (
              Line(
              points={{0.14,-137},{8,-137},{8,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorOwaLoss.KPIBus, outBusDem.QOwaLoss) annotation (
              Line(
              points={{0.14,-154},{12,-154},{12,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorFloorGain.KPIBus, outBusDem.QFloorGain) annotation (
             Line(
              points={{0.14,-173},{10,-173},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorFloorLoss.KPIBus, outBusDem.QFloorLoss) annotation (
             Line(
              points={{0.14,-190},{10,-190},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorWinLoss.KPIBus, outBusDem.QWinLoss) annotation (
              Line(
              points={{-67.86,-190},{10,-190},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorWinGain.KPIBus, outBusDem.QWinGain) annotation (
              Line(
              points={{-67.86,-173},{12,-173},{12,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorRoofLoss.KPIBus, outBusDem.QRoofLoss) annotation (
              Line(
              points={{-67.86,-154},{-26,-154},{-26,-152},{10,-152},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorRoofGain.KPIBus, outBusDem.QRoofGain) annotation (
              Line(
              points={{-67.86,-137},{12,-137},{12,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(thermalZone.TAir, buiMeaBus.TZoneMea) annotation (Line(points={{-42.7,
                  76.8},{-48,76.8},{-48,92},{0,92},{0,99}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(multiSum.y, inputKPICalculator.u)
            annotation (Line(points={{47.15,-81},{33.54,-81}}, color={0,0,127}));
          connect(multiSum.u, thermalZone.QIntGains_flow) annotation (Line(points={{58,-81},
                  {64,-81},{64,-80},{68,-80},{68,-4},{-50,-4},{-50,33.6},{-42.7,33.6}},
                color={0,0,127}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{84,-96},{70,-96}},
              color={0,0,0},
              thickness=1));
            annotation (Diagram(graphics,
                                coordinateSystem(extent={{-100,-100},{100,100}})), Icon(graphics,
                coordinateSystem(extent={{-100,-120},{100,100}})));
        end TEASERThermalZone;

        model BuildingsRoomCase600FF
          "Detailed room model from the buildings library according to BESTEST Case600FF"
          extends BaseClasses.PartialDemand(
            ARoo=roo.AFlo*sqrt(2),
            hBui=roo.hRoo,
            hZone={roo.hRoo},
            ABui=roo.AFlo,
            AZone={roo.AFlo},
            nZones=1);
          parameter Modelica.Units.SI.TemperatureDifference dTComfort=2
            "Temperature difference to room set temperature at which the comfort is still acceptable. In DIN EN 15251, all temperatures below 22 °C - 2 K count as discomfort. Hence the default value. If your room set temperature is lower, consider using smaller values.";

          parameter Real natInf = 0.5 "Infiltration rate";
          parameter Modelica.Units.SI.Angle S_=Buildings.Types.Azimuth.S
            "Azimuth for south walls";
          parameter Modelica.Units.SI.Angle E_=Buildings.Types.Azimuth.E
            "Azimuth for east walls";
          parameter Modelica.Units.SI.Angle W_=Buildings.Types.Azimuth.W
            "Azimuth for west walls";
          parameter Modelica.Units.SI.Angle N_=Buildings.Types.Azimuth.N
            "Azimuth for north walls";
          parameter Modelica.Units.SI.Angle C_=Buildings.Types.Tilt.Ceiling
            "Tilt for ceiling";
          parameter Modelica.Units.SI.Angle F_=Buildings.Types.Tilt.Floor
            "Tilt for floor";
          parameter Modelica.Units.SI.Angle Z_=Buildings.Types.Tilt.Wall
            "Tilt for wall";
          parameter Integer nConExtWin = 1 "Number of constructions with a window";
          parameter Integer nConBou = 1
            "Number of surface that are connected to constructions that are modeled inside the room";
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
            "Type of energy balance for zone air: dynamic (3 initialization options) or steady state";
          parameter Modelica.Fluid.Types.Dynamics massDynamics=energyDynamics
            "Type of mass balance for zone air: dynamic (3 initialization options) or steady state";
          parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic matExtWal(
            nLay=3,
            absIR_a=0.9,
            absIR_b=0.9,
            absSol_a=0.6,
            absSol_b=0.6,
            material={Buildings.HeatTransfer.Data.Solids.Generic(
                x=0.009,
                k=0.140,
                c=900,
                d=530,
                nStaRef=Buildings.ThermalZones.Detailed.Validation.BESTEST.nStaRef),Buildings.HeatTransfer.Data.Solids.Generic(
                x=0.066,
                k=0.040,
                c=840,
                d=12,
                nStaRef=Buildings.ThermalZones.Detailed.Validation.BESTEST.nStaRef),Buildings.HeatTransfer.Data.Solids.Generic(
                x=0.012,
                k=0.160,
                c=840,
                d=950,
                nStaRef=Buildings.ThermalZones.Detailed.Validation.BESTEST.nStaRef)}) "Exterior wall"
            annotation (Placement(transformation(extent={{-46,-94},{-32,-80}})));
          parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
            matFlo(
              final nLay=2,
              absIR_a=0.9,
              absIR_b=0.9,
              absSol_a=0.6,
              absSol_b=0.6,
            material={Buildings.HeatTransfer.Data.Solids.Generic(
                x=1.003,
                k=0.040,
                c=0,
                d=0,
                nStaRef=Buildings.ThermalZones.Detailed.Validation.BESTEST.nStaRef),Buildings.HeatTransfer.Data.Solids.Generic(
                x=0.025,
                k=0.140,
                c=1200,
                d=650,
                nStaRef=Buildings.ThermalZones.Detailed.Validation.BESTEST.nStaRef)}) "Floor"
            annotation (Placement(transformation(extent={{14,-94},{28,-80}})));
           parameter Buildings.HeatTransfer.Data.Solids.Generic soil(
            x=2,
            k=1.3,
            c=800,
            d=1500) "Soil properties"
            annotation (Placement(transformation(extent={{34,-96},{54,-76}})));

          Buildings.ThermalZones.Detailed.MixedAir roo(
            redeclare package Medium = MediumZone,
            hRoo=2.7,
            nConExtWin=nConExtWin,
            nConBou=1,
            AFlo=48,
            datConBou(
              layers={matFlo},
              each A=48,
              each til=F_),
            datConExt(
              layers={roof,matExtWal,matExtWal,matExtWal},
              A={48,6*2.7,6*2.7,8*2.7},
              til={C_,Z_,Z_,Z_},
              azi={S_,W_,E_,N_}),
            nConExt=4,
            nConPar=0,
            nSurBou=0,
            datConExtWin(
              layers={matExtWal},
              A={8*2.7},
              glaSys={window600},
              wWin={2*3},
              hWin={2},
              fFra={0.001},
              til={Z_},
              azi={S_}),
            energyDynamics=energyDynamics,
            nPorts=if use_ventilation then 5 else 3)                                                                              "Room model"
            annotation (Placement(transformation(extent={{30,-30},{-40,36}})));
          Modelica.Blocks.Routing.Replicator replicator(nout=max(1,nConExtWin))
            annotation (Placement(transformation(extent={{-4,-4},{4,4}},
                rotation=270,
                origin={48,64})));
          Modelica.Thermal.HeatTransfer.Sources.FixedTemperature TSoi[nConBou](each T=
                283.15) "Boundary condition for construction"
                                                  annotation (Placement(transformation(
                extent={{0,0},{-16,16}},
                origin={40,-68})));
          parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic roof(
            nLay=3,
            absIR_a=0.9,
            absIR_b=0.9,
            absSol_a=0.6,
            absSol_b=0.6,
            material={Buildings.HeatTransfer.Data.Solids.Generic(
                x=0.019,
                k=0.140,
                c=900,
                d=530,
                nStaRef=Buildings.ThermalZones.Detailed.Validation.BESTEST.nStaRef),Buildings.HeatTransfer.Data.Solids.Generic(
                x=0.1118,
                k=0.040,
                c=840,
                d=12,
                nStaRef=Buildings.ThermalZones.Detailed.Validation.BESTEST.nStaRef),Buildings.HeatTransfer.Data.Solids.Generic(
                x=0.010,
                k=0.160,
                c=840,
                d=950,
                nStaRef=Buildings.ThermalZones.Detailed.Validation.BESTEST.nStaRef)}) "Roof"
            annotation (Placement(transformation(extent={{-6,-94},{8,-80}})));
          parameter Buildings.ThermalZones.Detailed.Validation.BESTEST.Data.Win600 window600(
            UFra=3,
            haveExteriorShade=false,
            haveInteriorShade=false) "Window"
            annotation (Placement(transformation(extent={{-26,-94},{-12,-80}})));
          Buildings.HeatTransfer.Conduction.SingleLayer soi(
            A=48,
            material=soil,
            steadyStateInitial=true,
            stateAtSurface_a=false,
            stateAtSurface_b=true,
            T_a_start=283.15,
            T_b_start=283.75) "2m deep soil (per definition on p.4 of ASHRAE 140-2007)"
            annotation (Placement(transformation(
                extent={{10,-12.5},{-6,7.5}},
                rotation=-90,
                origin={8.5,-46})));
          Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor TRooAir
            "Room air temperature"
            annotation (Placement(transformation(extent={{9,-9},{-9,9}},
                rotation=270,
                origin={-1,59})));
          replaceable parameter
            Buildings.ThermalZones.Detailed.Validation.BESTEST.Data.StandardResultsFreeFloating
              staRes(
                minT( Min=-18.8+273.15, Max=-15.6+273.15, Mean=-17.6+273.15),
                maxT( Min=64.9+273.15,  Max=69.5+273.15,  Mean=66.2+273.15),
                meanT(Min=24.2+273.15,  Max=25.9+273.15,  Mean=25.1+273.15))
                  constrainedby Modelica.Icons.Record
            "Reference results from ASHRAE/ANSI Standard 140"
            annotation (Placement(transformation(extent={{-70,-96},{-56,-82}})));

          Modelica.Blocks.Math.Product product1
            "Product to compute infiltration mass flow rate"
            annotation (Placement(transformation(extent={{-42,-52},{-32,-42}})));
          Buildings.Fluid.Sensors.Density density(redeclare package Medium = MediumZone,
              warnAboutOnePortConnection=false)
            "Air density inside the building"
            annotation (Placement(transformation(extent={{-24,-66},{-34,-56}})));
          Buildings.Fluid.Sources.Outside souInf(redeclare package Medium = MediumZone,
              nPorts=1) "Source model for air infiltration"
                   annotation (Placement(transformation(extent={{-70,-42},{-58,-30}})));
          Modelica.Blocks.Math.MultiSum multiSum(nu=1)
            "Multi sum for infiltration air flow rate"
            annotation (Placement(transformation(extent={{-62,-70},{-50,-58}})));
          Modelica.Blocks.Sources.Constant InfiltrationRate(final k=-roo.hRoo*roo.AFlo*
                natInf/3600)
            "0.41 ACH adjusted for the altitude (0.5 at sea level)"
            annotation (Placement(transformation(extent={{-80,-68},{-72,-60}})));
          Buildings.Fluid.Sources.MassFlowSource_T sinInf(
            redeclare package Medium = MediumZone,
            m_flow=1,
            use_m_flow_in=true,
            use_T_in=false,
            use_X_in=false,
            use_C_in=false,
            nPorts=1) "Sink model for air infiltration"
            annotation (Placement(transformation(extent={{-22,-56},{-10,-44}})));
          Utilities.Electrical.ZeroLoad zeroLoad annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={108,-92})));
          Utilities.KPIs.ComfortCalculator comfortCalculatorHea[nZones](TComBou=
                TSetZone_nominal .- dTComfort, each for_heating=true)
            annotation (Placement(transformation(extent={{66,0},{80,14}})));
          Utilities.KPIs.ComfortCalculator comfortCalculatorCool[nZones](TComBou=
                TSetZone_nominal .+ dTComfort, each for_heating=false)
            annotation (Placement(transformation(extent={{66,-18},{80,-4}})));
        equation
          connect(roo.uSha, replicator.y) annotation (Line(
              points={{32.8,32.7},{32.8,38},{48,38},{48,59.6}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(TSoi[1].port, soi.port_a) annotation (Line(
              points={{24,-60},{6,-60},{6,-56}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(soi.port_b, roo.surf_conBou[1]) annotation (Line(
              points={{6,-40},{6,-31.7},{-15.5,-31.7},{-15.5,-23.4}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(roo.heaPorAir, TRooAir.port)  annotation (Line(
              points={{-3.25,3},{-3.25,2},{-2,2},{-2,44},{-1,44},{-1,50}},
              color={191,0,0},
              smooth=Smooth.None));
          connect(roo.qGai_flow, useProBus.intGains) annotation (Line(points={{32.8,16.2},
                  {50,16.2},{50,84},{51,84},{51,101}},
                color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(replicator.u, useProBus.uSha) annotation (Line(points={{48,68.8},{51,68.8},
                  {51,101}},                               color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(TRooAir.T, buiMeaBus.TZoneMea[1]) annotation (Line(points={{-1,68.9},
                  {-1,83.5},{0,83.5},{0,99}},                color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(heatPortCon[1], roo.heaPorAir) annotation (Line(points={{-100,60},{-94,
                  60},{-94,58},{-86,58},{-86,3},{-3.25,3}}, color={191,0,0}));
          connect(roo.heaPorRad, heatPortRad[1]) annotation (Line(points={{-3.25,-3.27},
                  {-84,-3.27},{-84,-60},{-100,-60}}, color={191,0,0}));
          connect(roo.weaBus, weaBus) annotation (Line(
              points={{-36.325,32.535},{-62,32.535},{-62,98},{-47,98}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          if use_ventilation then
            connect(roo.ports[5], portVent_in[1]) annotation (Line(points={{21.25,-13.5},
                    {60,-13.5},{60,32},{100,32},{100,38}},color={0,127,255}));
            connect(roo.ports[4], portVent_out[1]) annotation (Line(points={{21.25,-13.5},
                    {60,-13.5},{60,-40},{100,-40}},       color={0,127,255}));
          end if;
          connect(density.d, product1.u2) annotation (Line(
              points={{-34.5,-61},{-40,-61},{-40,-50},{-43,-50}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(multiSum.y, product1.u1) annotation (Line(
              points={{-48.98,-64},{-42,-64},{-42,-44},{-43,-44}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(InfiltrationRate.y,multiSum. u[1]) annotation (Line(
              points={{-71.6,-64},{-62,-64}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(product1.y, sinInf.m_flow_in) annotation (Line(points={{-31.5,-47},{-23.35,
                  -47},{-23.35,-45.2},{-23.2,-45.2}}, color={0,0,127}));
          connect(souInf.weaBus, weaBus) annotation (Line(
              points={{-70,-35.88},{-74,-35.88},{-74,-38},{-78,-38},{-78,98},{-47,98}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));

          connect(souInf.ports[1], roo.ports[1]) annotation (Line(points={{-58,-36},{32,
                  -36},{32,-13.5},{21.25,-13.5}}, color={0,127,255}));
          connect(density.port, roo.ports[2]) annotation (Line(points={{-29,-66},{-29,-70},
                  {30,-70},{30,-13.5},{21.25,-13.5}}, color={0,127,255}));
          connect(sinInf.ports[1], roo.ports[3]) annotation (Line(points={{-10,-50},{-6,
                  -50},{-6,-40},{32,-40},{32,-15.7},{21.25,-15.7},{21.25,-13.5}}, color=
                 {0,127,255}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{98,-92},{88,-92},{88,-96},{70,-96}},
              color={0,0,0},
              thickness=1));
          connect(comfortCalculatorHea.dTComSec, outBusDem.dTComHea) annotation (Line(
                points={{80.7,7},{100,7},{100,-2},{98,-2}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(comfortCalculatorCool.dTComSec, outBusDem.dTComCoo) annotation (Line(
                points={{80.7,-11},{100,-11},{100,-2},{98,-2}},
                                                            color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(TRooAir.T, comfortCalculatorHea[1].TZone) annotation (Line(points={{-1,68.9},
                  {40,68.9},{40,7},{64.6,7}},   color={0,0,127}));
          connect(TRooAir.T, comfortCalculatorCool[1].TZone) annotation (Line(points={{-1,68.9},
                  {-2,68.9},{-2,70},{0,70},{0,68},{40,68},{40,-11},{64.6,-11}},   color=
                 {0,0,127}));

          annotation (
        experiment(Tolerance=1e-06, StopTime=3.1536e+07),
        __Dymola_Commands(file="modelica://Buildings/Resources/Scripts/Dymola/ThermalZones/Detailed/Validation/BESTEST/Cases6xx/Case600FF.mos"
                "Simulate and plot"), Documentation(info="<html>
<p>This model is based on the Buildings Library v 0.8.1 and used for the test case 600FF of the BESTEST validation suite. </p>
</html>",         revisions="<html>
<ul>
<li>
January 21, 2020, by Michael Wetter:<br/>
Changed calculation of time averaged values to use
<a href=\"modelica://Buildings.Controls.OBC.CDL.Continuous.MovingMean\">
Buildings.Controls.OBC.CDL.Continuous.MovingMean</a>
because this does not trigger a time event every hour.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1714\">issue 1714</a>.
</li>
<li>
October 29, 2016, by Michael Wetter:<br/>
Placed a capacity at the room-facing surface
to reduce the dimension of the nonlinear system of equations,
which generally decreases computing time.<br/>
Removed the pressure drop element which is not needed.<br/>
Linearized the radiative heat transfer, which is the default in
the library, and avoids a large nonlinear system of equations.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/565\">issue 565</a>.
</li>
<li>
December 22, 2014 by Michael Wetter:<br/>
Removed <code>Modelica.Fluid.System</code>
to address issue
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/311\">#311</a>.
</li>
<li>
October 9, 2013, by Michael Wetter:<br/>
Implemented soil properties using a record so that <code>TSol</code> and
<code>TLiq</code> are assigned.
This avoids an error when the model is checked in the pedantic mode.
</li>
<li>
July 15, 2012, by Michael Wetter:<br/>
Added reference results.
Changed implementation to make this model the base class
for all BESTEST cases.
Added computation of hourly and annual averaged room air temperature.
</li>
<li>
October 6, 2011, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
        end BuildingsRoomCase600FF;

        package BaseClasses "Base class with partial demand models"

          partial model PartialDemand "Partial demand model for HPS"
            extends BESMod.Utilities.Icons.BuildingIcon;

            parameter Integer nZones(min=1) "Number of zones /rooms";
            parameter Modelica.Units.SI.Temperature TSetZone_nominal[nZones]=fill(293.15,
                nZones) "Nominal room set temerature"
              annotation (Dialog(group="Temperature demand"));
            parameter Modelica.Units.SI.Area AZone[nZones] "Area of zones/rooms"
              annotation (Dialog(group="Geometry"));
            parameter Modelica.Units.SI.Height hZone[nZones] "Height of zones"
              annotation (Dialog(group="Geometry"));
            parameter Modelica.Units.SI.Area ABui "Ground area of building"
              annotation (Dialog(group="Geometry"));
            parameter Modelica.Units.SI.Height hBui "Height of building"
              annotation (Dialog(group="Geometry"));
            parameter Modelica.Units.SI.Area ARoo "Roof area of building"
              annotation (Dialog(group="Geometry"));
            parameter Boolean use_hydraulic=true "=false to disable hydraulic supply";
            parameter Boolean use_ventilation=true "=false to disable ventilation supply";

            replaceable package MediumZone = IBPSA.Media.Air constrainedby
              Modelica.Media.Interfaces.PartialMedium annotation (choices(
                  choice(redeclare package Medium = IBPSA.Media.Air "Moist air"),
                  choice(redeclare package Medium = IBPSA.Media.Water "Water"),
                  choice(redeclare package Medium =
                      IBPSA.Media.Antifreeze.PropyleneGlycolWater (
                        property_T=293.15,
                        X_a=0.40)
                        "Propylene glycol water, 40% mass fraction")));
            BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
              annotation (Placement(transformation(extent={{24,82},{78,120}}),
                  iconTransformation(extent={{44,88},{66,112}})));

            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortCon[nZones]
              "Heat port for convective heat transfer with room air temperature"
              annotation (Placement(transformation(extent={{-110,50},{-90,70}})));
            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortRad[nZones]
              "Heat port for radiative heat transfer with room radiation temperature"
              annotation (Placement(transformation(extent={{-110,-70},{-90,-50}})));
            BESMod.HugosProject.Systems.Interfaces.DemandOutputs outBusDem
              annotation (Placement(transformation(extent={{88,-12},{108,8}})));
            Modelica.Fluid.Interfaces.FluidPort_a portVent_in[nZones](
                redeclare final package Medium = MediumZone)
                                     if use_ventilation
              "Inlet for the demand of ventilation"
              annotation (Placement(transformation(extent={{90,28},{110,48}}),
                  iconTransformation(extent={{90,28},{110,48}})));
            Modelica.Fluid.Interfaces.FluidPort_b portVent_out[nZones](
                redeclare final package Medium = MediumZone)
                                     if use_ventilation
              "Outlet of the demand of Ventilation"
              annotation (Placement(transformation(extent={{90,-50},{110,-30}}),
                  iconTransformation(extent={{90,-50},{110,-30}})));

            IBPSA.BoundaryConditions.WeatherData.Bus
                weaBus "Weather data bus" annotation (Placement(transformation(extent={{-68,76},
                      {-26,120}}),         iconTransformation(extent={{-68,92},{-48,112}})));
            BESMod.HugosProject.Systems.Interfaces.BuiMeaBus buiMeaBus
              annotation (Placement(transformation(extent={{-20,78},{20,120}}),
                  iconTransformation(extent={{-20,78},{20,120}})));
            Electrical.Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{60,-106},{80,-86}})));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialDemand;
        annotation (Icon(graphics={
                Rectangle(
                  lineColor={200,200,200},
                  fillColor={248,248,248},
                  fillPattern=FillPattern.HorizontalCylinder,
                  extent={{-100.0,-100.0},{100.0,100.0}},
                  radius=25.0),
                Rectangle(
                  lineColor={128,128,128},
                  extent={{-100.0,-100.0},{100.0,100.0}},
                  radius=25.0),
                Ellipse(
                  extent={{-30.0,-30.0},{30.0,30.0}},
                  lineColor={128,128,128},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end BaseClasses;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

          record RefAachen "Reference Building for Aachen"
            extends AixLib.DataBase.ThermalZones.ZoneBaseRecord(
              T_start=293.15,
              withAirCap = true,
              VAir = 483.48248,
              AZone = 185.9548,
              hRad = 5.000000000000001,
              lat=0.88645272708792,
              final nOrientations = 4,
              AWin = {9.2047626, 9.2047626, 9.2047626, 9.2047626},
              ATransparent = {9.2047626, 9.2047626, 9.2047626, 9.2047626},
              hConWin = 2.7,
              RWin = 0.0038702790661868888,
              gWin = 0.75,
              UWin= 3.2013304230329487,
              ratioWinConRad = 0.02,
              AExt = {65.50257830000001, 65.50257830000001, 65.50257830000001, 65.50257830000001},
              hConExt = 2.7,
              nExt = 1,
              RExt = {0.001207765352990691},
              RExtRem = 0.006043857595720014,
              CExt = {10480660.207897373},
              AInt = 588.8568666666666,
              hConInt = 2.3842105263157896,
              nInt = 1,
              RInt = {0.00010636057128817268},
              CInt = {64367784.53377798},
              AFloor = 93.3493096,
              hConFloor = 1.7,
              nFloor = 1,
              RFloor = {0.0012921516953637504},
              RFloorRem =  0.016987471113660366,
              CFloor = {11025394.529932633},
              ARoof = 152.72467724,
              hConRoof = 1.7,
              nRoof = 1,
              RRoof = {0.00035532587679531027},
              RRoofRem = 0.016833579776623572,
              CRoof = {2922197.863507833},
              nOrientationsRoof = 2,
              tiltRoof={0.61086523819802,0.61086523819802},
              aziRoof={3.1415926535898,-1.5707963267949},
              wfRoof = {0.5, 0.5},
              aRoof = 0.5,
              aExt = 0.5,
              TSoil=286.15,
              hConWallOut = 20.0,
              hRadWall = 5.0,
              hConWinOut = 20.0,
              hConRoofOut = 20.0,
              hRadRoof = 5.0,
              tiltExtWalls={1.5707963267949,1.5707963267949,1.5707963267949,
                  1.5707963267949},
              aziExtWalls={0,1.5707963267949,-1.5707963267949,3.1415926535898},
              wfWall = {0.25, 0.25, 0.25, 0.25},
              wfWin = {0.25, 0.25, 0.25, 0.25},
              wfGro = 0.0,
              specificPeople = 0.02,
              internalGainsMoistureNoPeople = 0.5,
              fixedHeatFlowRatePersons = 70,
              activityDegree = 1.2,
              ratioConvectiveHeatPeople = 0.5,
              internalGainsMachinesSpecific = 2.0,
              ratioConvectiveHeatMachines = 0.75,
              lightingPowerSpecific = 7.0,
              ratioConvectiveHeatLighting = 0.5,
              useConstantACHrate = false,
              baseACH = 0.2,
              maxUserACH = 1.0,
              maxOverheatingACH = {3.0, 2.0},
              maxSummerACH = {1.0, 283.15, 290.15},
              winterReduction = {0.2, 273.15, 283.15},
              maxIrr = {100.0, 100.0, 100.0, 100.0},
              shadingFactor = {1.0, 1.0, 1.0, 1.0},
              withAHU = false,
              minAHU = 0.3,
              maxAHU = 0.6,
              hHeat = 10987.666680836159,
              lHeat = 0,
              KRHeat = 10000,
              TNHeat = 1,
              HeaterOn=false,
              hCool = 0,
              lCool = -10987.666680836159,
              KRCool = 10000,
              TNCool = 1,
              CoolerOn = false,
              withIdealThresholds = false,
              TThresholdHeater=288.15,
              TThresholdCooler=295.15);
          end RefAachen;
        end RecordsCollection;

        package HeatDemand "Calculate the heat demand of a building model"
          extends Modelica.Icons.ExamplesPackage;

          model CalcHeaDemROM
            "Calculate the heat demand for a given reduced order model from TEASER"
            extends PartialCalcHeatingDemand(
              TN_heater=building.zoneParam[1].TNHeat,
              KR_heater=building.zoneParam[1].KRHeat,
              h_heater=building.zoneParam.hHeat*10,
              redeclare BESMod.Examples.BAUSimStudy.BESParameters
                systemParameters(
                QDHW_flow_nomial=0,
                TOda_nominal=261.05,
                THydSup_nominal={328.15}),
              redeclare
                BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone building(
                nZones=1,
                redeclare BESMod.Examples.BAUSimStudy.Buildings.Case_1_standard
                  oneZoneParam,
                final ventRate=0.5 .- building.zoneParam.baseACH));
            annotation (Documentation(info="<html>
<p>In order to use this model, choose a number of zones and pass a zoneParam from TEASER for every zone. Further specify the nominal heat outdoor air temperature in the system parameters or pass your custom systemParameters record.</p>
</html>"));
          end CalcHeaDemROM;

          model CalcHeaBuiRoomCase600FF
            "Calculate the heat demand for a given reduced order model from TEASER"
            extends PartialCalcHeatingDemand(
              h_heater={10000},
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.ExampleSystemParameters
                systemParameters(TOda_nominal=265.35, use_ventilation=false),
              redeclare
                BESMod.HugosProject.Systems.Demand.Building.BuildingsRoomCase600FF
                building(natInf=0.5, energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial));
            annotation (Documentation(info="<html>
<p>In order to use this model, choose a number of zones and pass a zoneParam from TEASER for every zone. Further specify the nominal heat outdoor air temperature in the system parameters or pass your custom systemParameters record.</p>
</html>"));
          end CalcHeaBuiRoomCase600FF;

          partial model PartialCalcHeatingDemand
            "Model to calculate the heating demand for a given building record"
            extends Modelica.Icons.Example;
            parameter Real h_heater[building.nZones] "Upper limit controller output of the heater";
            parameter Real KR_heater=1000 "Gain of the heating controller";
            parameter Modelica.Units.SI.Time TN_heater=1
              "Time constant of the heating controller";
            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition
              systemParameters constrainedby
              BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition
              "Parameters relevant for the whole energy system" annotation (
                choicesAllMatching=true, Placement(transformation(extent={{76,-96},
                      {96,-76}})));
            Systems.UserProfiles.NoUser heatDemandScenario annotation (
                Placement(transformation(extent={{-100,18},{-50,80}})));
            replaceable
              BESMod.HugosProject.Systems.Demand.Building.BaseClasses.PartialDemand
              building constrainedby
              BESMod.HugosProject.Systems.Demand.Building.BaseClasses.PartialDemand(
              final TSetZone_nominal=systemParameters.TSetZone_nominal,
              final use_hydraulic=true,
              final use_ventilation=false,
              redeclare package MediumZone = IBPSA.Media.Air) annotation (
                choicesAllMatching=true, Placement(transformation(extent={{24,-34},
                      {72,24}})));
            Modelica.Blocks.Interfaces.RealOutput QDemBuiSum_flow(final unit="W")
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={110,0}), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={110,-80})));
            Modelica.Blocks.Sources.RealExpression
                                             realExpression(y=sum(heaterCooler.heatingPower))
              annotation (Placement(transformation(extent={{10,52},{32,74}})));
            Modelica.Blocks.Interfaces.RealOutput QBui_flow_nominal[building.nZones](
               each final unit="W") "Indoor air temperature" annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={110,40}), iconTransformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={110,-80})));
            AixLib.Utilities.Sources.HeaterCooler.HeaterCoolerPI heaterCooler[
              building.nZones](
              h_heater=h_heater,
              each final l_heater=0,
              each final KR_heater=KR_heater,
              each final TN_heater=TN_heater,
              each final zoneParam=AixLib.DataBase.ThermalZones.ZoneRecordDummy(),
              each recOrSep=false,
              each Heater_on=true,
              each Cooler_on=false,
              each final staOrDyn=false)                                        "Heater Cooler with PI control"
              annotation (Placement(transformation(extent={{-38,0},{-4,38}})));
            Modelica.Blocks.Sources.Constant const[building.nZones](final k=
                  systemParameters.TSetZone_nominal)
              annotation (Placement(transformation(extent={{-74,-28},{-52,-6}})));
            Modelica.Blocks.Sources.BooleanConstant
                                             booleanConstant
                                                  [building.nZones](each final k=true)
              annotation (Placement(transformation(extent={{-112,-46},{-90,-24}})));
            Modelica.Blocks.Sources.BooleanConstant
                                             booleanConstant1
                                                  [building.nZones](each final k=false)
              annotation (Placement(transformation(extent={{-112,-12},{-90,10}})));
            IBPSA.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(
              final filNam=systemParameters.filNamWea,
              TDryBulSou=IBPSA.BoundaryConditions.Types.DataSource.Parameter,
              TDryBul=systemParameters.TOda_nominal,
              TDewPoiSou=IBPSA.BoundaryConditions.Types.DataSource.Parameter,
              TDewPoi=systemParameters.TOda_nominal,
              TBlaSkySou=IBPSA.BoundaryConditions.Types.DataSource.Parameter,
              TBlaSky=systemParameters.TOda_nominal,
              relHumSou=IBPSA.BoundaryConditions.Types.DataSource.Parameter,
              relHum=0,
              winSpeSou=IBPSA.BoundaryConditions.Types.DataSource.Parameter,
              winSpe=0,
              HInfHorSou=IBPSA.BoundaryConditions.Types.DataSource.Parameter,
              HInfHor=0,
              HSou=IBPSA.BoundaryConditions.Types.RadiationDataSource.Input_HGloHor_HDifHor)
              "Weather data reader"
              annotation (Placement(transformation(extent={{-100,86},{-42,152}})));
            Modelica.Blocks.Sources.Constant constIrr(each final k=0)
              annotation (Placement(transformation(extent={{-162,66},{-140,88}})));

            Interfaces.UseProBus                               useProBus annotation (
                Placement(transformation(extent={{16,72},{68,108}}),  iconTransformation(
                    extent={{80,-34},{150,32}})));
          equation

            connect(QDemBuiSum_flow, realExpression.y) annotation (Line(points={{110,0},
                    {80,0},{80,63},{33.1,63}}, color={0,0,127}));
            connect(building.heatPortCon, heaterCooler.heatCoolRoom) annotation (Line(
                  points={{24,12.4},{16,12.4},{16,12},{6,12},{6,11.4},{-5.7,11.4}}, color=
                   {191,0,0}));
            connect(const.y, heaterCooler.setPointHeat) annotation (Line(points={{-50.9,
                    -17},{-17.26,-17},{-17.26,5.32}},
                                                 color={0,0,127}));
            connect(heaterCooler.heatingPower, QBui_flow_nominal) annotation (Line(points=
                   {{-4,26.6},{14,26.6},{14,40},{110,40}}, color={0,0,127}));
            connect(heaterCooler.heaterActive, booleanConstant.y) annotation (Line(points={{-9.44,
                    5.32},{-9.44,-35},{-88.9,-35}},        color={255,0,255}));
            connect(booleanConstant1.y, heaterCooler.coolerActive) annotation (Line(
                  points={{-88.9,-1},{-59.45,-1},{-59.45,5.32},{-32.9,5.32}}, color={255,0,
                    255}));
            connect(weaDat.weaBus, building.weaBus) annotation (Line(
                points={{-42,119},{-8,119},{-8,50},{34.08,50},{34.08,24.58}},
                color={255,204,51},
                thickness=0.5));
            connect(constIrr.y, weaDat.HDifHor_in) annotation (Line(points={{-138.9,77},{
                    -122.45,77},{-122.45,87.65},{-102.9,87.65}}, color={0,0,127}));
            connect(constIrr.y, weaDat.HGloHor_in) annotation (Line(points={{-138.9,77},{
                    -122.45,77},{-122.45,76.1},{-102.9,76.1}}, color={0,0,127}));
            connect(heatDemandScenario.useProBus, useProBus) annotation (Line(
                points={{-51.0417,48.7417},{42,48.7417},{42,90}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(useProBus, building.useProBus) annotation (Line(
                points={{42,90},{40,90},{40,24},{61.2,24}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false), graphics={Text(
                    extent={{-130,-24},{56,-118}},
                    lineColor={28,108,200},
                    textString="Right click -> Parameters -> 
Select your system parameters -> 
Simulate and extract QDemand and 
array based demand for your systemParameters")}),                experiment(StopTime=31536000, Interval=3600),
              Documentation(info="<html>
<p>The heat demand is one of the most important paramters to quantify in order to correctly size the components in a BES. Hence, we add this partial heat demand calculator to enable a heat demand calculation according to EN 12831 for all possible Building-Subsystems.</p>
<h4>Note:</h4>
<ol>
<li>Depending on your subsystem, you have to ensure a nominal air exchange rate of 0.5 1/h is met. </li>
<li>You have to specify the maximal heat load to give the ideal heater (a PI Control) an upper limit. If your demand is equal to the upper limit, be sure to check if the required room temperature is supplied.</li>
<li>Choose some systemParameters. Most importantly, set your nominal outdoor air temperature TOda_nominal</li>
</ol>
</html>"));
          end PartialCalcHeatingDemand;
          annotation (Documentation(info="<html>
<p><span style=\"font-family: Courier New; color: #006400;\">This package is used in place of default examples or tests. </p><p></span></p>
</html>"));
        end HeatDemand;

        model TEASERThermalZone_nightLowering_ramp
          "Reduced order building model, coupled with TEASER, comfort based on night lowering of the temperature"
          extends BaseClasses.PartialDemand(
            ARoo=sum(zoneParam.ARoof)/nZones,
            hBui=sum(zoneParam.VAir)^(1/3),
            ABui=2*sum(zoneParam.VAir)^(1/3),
            hZone=zoneParam.VAir ./ zoneParam.AZone,
            AZone=zoneParam.AZone);
          replaceable parameter AixLib.DataBase.ThermalZones.ZoneBaseRecord oneZoneParam constrainedby
            AixLib.DataBase.ThermalZones.ZoneBaseRecord
            "Default zone if only one is chosen" annotation(choicesAllMatching=true);
          parameter AixLib.DataBase.ThermalZones.ZoneBaseRecord zoneParam[nZones]=fill(oneZoneParam, nZones)
            "Choose an array of multiple zones" annotation(choicesAllMatching=true);
          parameter Real ventRate[nZones]=fill(0, nZones) "Constant mechanical ventilation rate";

          parameter Boolean use_verboseEnergyBalance = true "=false to disable the integration of the verbose energy balance";
          parameter Modelica.Units.SI.TemperatureDifference dTComfort=2
            "Temperature difference to room set temperature at which the comfort is still acceptable. In DIN EN 15251, all temperatures below 22 °C - 2 K count as discomfort. Hence the default value. If your room set temperature is lower, consider using smaller values.";
          parameter Modelica.Units.SI.TemperatureDifference dT_night=2 "temperature lowering at night";
          parameter Modelica.Units.NonSI.Time_hour hMorning=7 "hour when the day begins";
          parameter Modelica.Units.NonSI.Time_hour timeRamp=1 "duration of the ramp";
          parameter Modelica.Fluid.Types.Dynamics energyDynamics=Modelica.Fluid.Types.Dynamics.DynamicFreeInitial
            "Type of energy balance: dynamic (3 initialization options) or steady state"
            annotation (Dialog(tab="Dynamics"));
          parameter Modelica.Units.SI.Temperature T_start=293.15
            "Start value of temperature" annotation (Dialog(tab="Initialization"));

          AixLib.ThermalZones.ReducedOrder.ThermalZone.ThermalZone thermalZone[nZones](
            redeclare each final package Medium = MediumZone,
            each final energyDynamics=energyDynamics,
            each final T_start=T_start,
            final zoneParam=zoneParam,
            each final use_AirExchange=true,
            each final nPorts=if use_ventilation then 2 else 0) annotation (Placement(
                transformation(extent={{35,12},{-39,84}}, rotation=0)));

          Modelica.Blocks.Sources.Constant constTSetRoom[nZones](final k=
                TSetZone_nominal) "Transform Volume l to massflowrate" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={74,60})));

          Modelica.Blocks.Sources.Constant constVentRate[nZones](final k=ventRate)
                                                                      "Transform Volume l to massflowrate"
                                                 annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}}, rotation=180,
                origin={74,30})));

          Utilities.KPIs.InputKPICalculator inputKPICalculatorTraGain[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_hydraulic and use_verboseEnergyBalance
                                    annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-7,-63})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorTraLoss[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_hydraulic and use_verboseEnergyBalance
                                    annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-7,-80})));
          Modelica.Blocks.Nonlinear.Limiter limUp[nZones](each final uMax=
                Modelica.Constants.inf, each final uMin=0) if use_hydraulic and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-28,-66},{-22,-60}})));
          Modelica.Blocks.Nonlinear.Limiter limDown[nZones](each final uMax=
               0, each final uMin=-Modelica.Constants.inf) if use_hydraulic and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-30,-82},{-24,-76}})));
          Utilities.KPIs.InputKPICalculator    inputKPICalculator   [nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance
            annotation (Placement(transformation(
                extent={{-7,-13},{7,13}},
                rotation=180,
                origin={25,-81})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorVentGain[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_ventilation and use_verboseEnergyBalance
                                    annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=180,
                origin={25,-97})));
          Modelica.Blocks.Sources.RealExpression QVent[nZones](y=
                portVent_in.m_flow*inStream(portVent_in.h_outflow) + portVent_out.m_flow
                *portVent_out.h_outflow) if use_ventilation and use_verboseEnergyBalance
            "Internal gains"                                               annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={62,-106})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorVentLoss[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_ventilation and use_verboseEnergyBalance
                                    annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=180,
                origin={25,-114})));
          Modelica.Blocks.Nonlinear.Limiter limVentUp[nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0)
            if use_ventilation and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-3,-3},{3,3}},
                rotation=180,
                origin={43,-97})));
          Modelica.Blocks.Nonlinear.Limiter limVentDown[nZones](each final
              uMax=0, each final uMin=-Modelica.Constants.inf)
            if use_ventilation and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-3,-3},{3,3}},
                rotation=180,
                origin={41,-115})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorTraGain2[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-7,-97})));
          Modelica.Blocks.Sources.RealExpression QAirExc[nZones](y=
                thermalZone.airExc.Q_flow) if use_verboseEnergyBalance "Internal gains"                annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-48,-106})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorTraLoss2[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-7,-114})));
          Modelica.Blocks.Nonlinear.Limiter limAirExcUp[nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0)
                                                             if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-28,-100},{-22,-94}})));
          Modelica.Blocks.Nonlinear.Limiter limAixExDown[nZones](
              each final uMax=0, each final uMin=-Modelica.Constants.inf)
                                                                         if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-30,-116},{-24,-110}})));
          Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensorRad[
            nZones]
            annotation (Placement(transformation(extent={{-82,-70},{-62,-50}})));
          Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensorConv[
            nZones]
            annotation (Placement(transformation(extent={{-86,50},{-66,70}})));
          Modelica.Blocks.Math.Add          addTra
                                                 [nZones]
            if use_hydraulic and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-52,-80},{-42,-70}})));
          Utilities.KPIs.ComfortCalculator_TSet_notConstant comfortCalculatorCool[nZones](
          TComBou=TSetZone_nominal .+ dTComfort,
          hMorning=hMorning,
          dT_night=dT_night,
          timeRamp=timeRamp,
          each for_heating=false)
            annotation (Placement(transformation(extent={{-24,-52},{-4,-32}})));
          Utilities.KPIs.ComfortCalculator_TSet_notConstant comfortCalculatorHea[nZones](
          TComBou=TSetZone_nominal .- dTComfort,
          hMorning=hMorning,
          dT_night=dT_night,
          timeRamp=timeRamp,
          each for_heating=true)
            annotation (Placement(transformation(extent={{-24,-30},{-4,-10}})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorOwaGain[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-7,-137})));
          Modelica.Blocks.Sources.RealExpression QOwa[nZones](y=
                thermalZone.ROM.extWall.Q_flow) if use_verboseEnergyBalance "Internal gains" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-48,-146})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorOwaLoss[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-7,-154})));
          Modelica.Blocks.Nonlinear.Limiter limAirExcUp1
                                                       [nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-28,-140},{-22,-134}})));
          Modelica.Blocks.Nonlinear.Limiter limAixExDown1
                                                        [nZones](each final
              uMax=0, each final uMin=-Modelica.Constants.inf) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-30,-156},{-24,-150}})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorFloorGain[
            nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if oneZoneParam.AFloor > 0  and use_verboseEnergyBalance
            annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-7,-173})));
          Modelica.Blocks.Sources.RealExpression QFloor[nZones](y=
                thermalZone.ROM.floor.Q_flow)
            if oneZoneParam.AFloor > 0 and use_verboseEnergyBalance "Internal gains" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-48,-182})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorFloorLoss[
            nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if oneZoneParam.AFloor > 0 and use_verboseEnergyBalance
            annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-7,-190})));
          Modelica.Blocks.Nonlinear.Limiter limAirExcUp2
                                                       [nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0)
            if oneZoneParam.AFloor > 0 and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-28,-176},{-22,-170}})));
          Modelica.Blocks.Nonlinear.Limiter limAixExDown2
                                                        [nZones](each final
              uMax=0, each final uMin=-Modelica.Constants.inf)
            if oneZoneParam.AFloor > 0 and use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-30,-192},{-24,-186}})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorRoofGain[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-75,-137})));
          Modelica.Blocks.Sources.RealExpression QRoof[nZones](y=
                thermalZone.ROM.roof.Q_flow) if use_verboseEnergyBalance "Internal gains" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-116,-146})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorRoofLoss[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-75,-154})));
          Modelica.Blocks.Nonlinear.Limiter limAirExcUp3
                                                       [nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-96,-140},{-90,-134}})));
          Modelica.Blocks.Nonlinear.Limiter limAixExDown3
                                                        [nZones](each final
              uMax=0, each final uMin=-Modelica.Constants.inf) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-98,-156},{-92,-150}})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorWinGain[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-11},{7,11}},
                rotation=0,
                origin={-75,-173})));
          Modelica.Blocks.Sources.RealExpression QWin[nZones](y=
                thermalZone.ROM.window.Q_flow) if use_verboseEnergyBalance "Internal gains" annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-116,-182})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorWinLoss[nZones](
            unit=fill("W", nZones),
            integralUnit=fill("J", nZones),
            each calc_singleOnTime=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false,
            each calc_intBelThres=false) if use_verboseEnergyBalance annotation (Placement(transformation(
                extent={{-7,-12},{7,12}},
                rotation=0,
                origin={-75,-190})));
          Modelica.Blocks.Nonlinear.Limiter limAirExcUp4
                                                       [nZones](each final
              uMax=Modelica.Constants.inf, each final uMin=0) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-96,-176},{-90,-170}})));
          Modelica.Blocks.Nonlinear.Limiter limAixExDown4
                                                        [nZones](each final
              uMax=0, each final uMin=-Modelica.Constants.inf) if use_verboseEnergyBalance
            annotation (Placement(transformation(extent={{-98,-192},{-92,-186}})));
          Modelica.Blocks.Math.MultiSum multiSum[nZones](each final nu=3) if use_verboseEnergyBalance annotation (Placement(transformation(extent={{-5,-5},{5,5}},
                rotation=180,
                origin={53,-81})));

          Utilities.Electrical.ZeroLoad zeroLoad annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={94,-96})));
        equation

          for i in 1:nZones loop
            connect(weaBus.TDryBul, thermalZone[i].ventTemp) annotation (Line(
                points={{-47,98},{126,98},{126,42.24},{33.52,42.24}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(useProBus.intGains, thermalZone[i].intGains) annotation (Line(
                points={{51,101},{-62,101},{-62,8},{-31.6,8},{-31.6,17.76}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            if use_ventilation then
              connect(portVent_in[i], thermalZone[i].ports[1]) annotation (Line(points={{100,38},
                      {82,38},{82,10},{-2,10},{-2,22.08}},                 color={0,127,
                    255}));
              connect(portVent_out[i], thermalZone[i].ports[2]) annotation (Line(points={{100,-40},
                      {82,-40},{82,2},{-2,2},{-2,22.08}},             color={0,127,255}));
            end if;
            connect(weaBus, thermalZone[i].weaBus) annotation (Line(
              points={{-47,98},{38,98},{38,69.6},{35,69.6}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          end for;
          connect(constTSetRoom.y, thermalZone.TSetCool) annotation (Line(points={{63,60},
                  {48,60},{48,62.4},{33.52,62.4}},color={0,0,127}));
          connect(constTSetRoom.y, thermalZone.TSetHeat) annotation (Line(points={{63,60},
                  {48,60},{48,52.32},{33.52,52.32}},color={0,0,127}));

          connect(constVentRate.y, thermalZone.ventRate) annotation (Line(points={{63,30},
                  {48,30},{48,32.88},{33.52,32.88}},color={0,0,127}));

          // KPIs
          if use_hydraulic then
            connect(inputKPICalculatorTraGain.KPIBus, outBusDem.QTraGain) annotation (
              Line(
              points={{0.14,-63},{6,-63},{6,-64},{10,-64},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
            connect(inputKPICalculatorTraLoss.KPIBus, outBusDem.QTraLoss) annotation (
              Line(
              points={{0.14,-80},{10,-80},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));

            connect(limUp.y, inputKPICalculatorTraGain.u)
            annotation (Line(points={{-21.7,-63},{-15.54,-63}},
                                                              color={0,0,127}));
            connect(limDown.y, inputKPICalculatorTraLoss.u) annotation (Line(points={{-23.7,
                    -79},{-22,-79},{-22,-80},{-15.54,-80}},
                                                       color={0,0,127}));
          end if;
          connect(inputKPICalculator.KPIBus, outBusDem.QIntGain) annotation (Line(
              points={{17.86,-81},{14,-81},{14,-82},{10,-82},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(limAirExcUp.y, inputKPICalculatorTraGain2.u)
            annotation (Line(points={{-21.7,-97},{-15.54,-97}}, color={0,0,127}));
          connect(limAixExDown.y, inputKPICalculatorTraLoss2.u) annotation (Line(points={{-23.7,
                  -113},{-22,-113},{-22,-114},{-15.54,-114}},   color={0,0,127}));
          connect(QAirExc.y, limAirExcUp.u) annotation (Line(points={{-37,-106},{-38,
                  -106},{-38,-97},{-28.6,-97}},
                                         color={0,0,127}));
          connect(QAirExc.y, limAixExDown.u) annotation (Line(points={{-37,-106},{-37,
                  -113},{-30.6,-113}},
                               color={0,0,127}));
          connect(inputKPICalculatorTraGain2.KPIBus, outBusDem.QAirExcGain) annotation (
             Line(
              points={{0.14,-97},{10,-97},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorTraLoss2.KPIBus, outBusDem.QAirExcLoss) annotation (
             Line(
              points={{0.14,-114},{10,-114},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          if use_ventilation then
           connect(limVentUp.y, inputKPICalculatorVentGain.u) annotation (Line(points={{39.7,
                    -97},{33.54,-97}},               color={0,0,127}));
           connect(limVentDown.y, inputKPICalculatorVentLoss.u) annotation (Line(points={{37.7,
                    -115},{37.7,-114},{33.54,-114}},          color={0,0,127}));
           connect(QVent.y, limVentUp.u) annotation (Line(points={{51,-106},{56,-106},{
                    56,-97},{46.6,-97}},
                                 color={0,0,127}));
           connect(QVent.y, limVentDown.u) annotation (Line(points={{51,-106},{51,-114},
                    {44.6,-114},{44.6,-115}},
                            color={0,0,127}));
           connect(inputKPICalculatorVentGain.KPIBus, outBusDem.QVentGain) annotation (
            Line(
            points={{17.86,-97},{17.86,-96},{10,-96},{10,-2},{98,-2}},
            color={255,204,51},
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
           connect(inputKPICalculatorVentLoss.KPIBus, outBusDem.QVentLoss) annotation (
            Line(
            points={{17.86,-114},{10,-114},{10,-2},{98,-2}},
            color={255,204,51},
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
          end if;

          connect(thermalZone.intGainsConv, heatFlowSensorConv.port_b) annotation (Line(
                points={{-39.74,49.44},{-39.74,48},{-52,48},{-52,60},{-66,60}}, color={
                  191,0,0}));
          connect(heatPortCon, heatFlowSensorConv.port_a)
            annotation (Line(points={{-100,60},{-86,60}}, color={191,0,0}));
          connect(heatPortRad, heatFlowSensorRad.port_a)
            annotation (Line(points={{-100,-60},{-82,-60}}, color={191,0,0}));
          connect(heatFlowSensorRad.port_b, thermalZone.intGainsRad) annotation (Line(
                points={{-62,-60},{-48,-60},{-48,48},{-50,48},{-50,60.24},{-39.74,60.24}},
                color={191,0,0}));
          connect(addTra.y, limUp.u) annotation (Line(points={{-41.5,-75},{-32,-75},{
                  -32,-63},{-28.6,-63}},
                              color={0,0,127}));
          connect(addTra.y, limDown.u) annotation (Line(points={{-41.5,-75},{-36,-75},{
                  -36,-79},{-30.6,-79}},
                                   color={0,0,127}));
          connect(heatFlowSensorRad.Q_flow, addTra.u2)
            annotation (Line(points={{-72,-71},{-72,-78},{-53,-78}}, color={0,0,127}));
          connect(heatFlowSensorConv.Q_flow, addTra.u1) annotation (Line(points={{-76,49},
                  {-76,-72},{-53,-72}},                                  color={0,0,127}));
          connect(thermalZone.TAir, outBusDem.TZone) annotation (Line(points={{-42.7,
                  76.8},{-48,76.8},{-48,-2},{98,-2}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(thermalZone.TAir, comfortCalculatorHea.TZone) annotation (Line(points={{-42.7,
                  76.8},{-48,76.8},{-48,-20},{-26,-20}},        color={0,0,127}));
          connect(thermalZone.TAir, comfortCalculatorCool.TZone) annotation (Line(
                points={{-42.7,76.8},{-48,76.8},{-48,-42},{-26,-42}}, color={0,0,127}));
          connect(comfortCalculatorCool.dTComSec, outBusDem.dTComCoo) annotation (Line(
                points={{-3,-42},{10,-42},{10,-2},{98,-2}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(comfortCalculatorHea.dTComSec, outBusDem.dTComHea) annotation (Line(
                points={{-3,-20},{10,-20},{10,-2},{98,-2}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(limAirExcUp1.y, inputKPICalculatorOwaGain.u)
            annotation (Line(points={{-21.7,-137},{-15.54,-137}}, color={0,0,127}));
          connect(limAixExDown1.y, inputKPICalculatorOwaLoss.u) annotation (Line(points=
                 {{-23.7,-153},{-22,-153},{-22,-154},{-15.54,-154}}, color={0,0,127}));
          connect(QOwa.y, limAirExcUp1.u) annotation (Line(points={{-37,-146},{-38,-146},
                  {-38,-137},{-28.6,-137}}, color={0,0,127}));
          connect(QOwa.y, limAixExDown1.u) annotation (Line(points={{-37,-146},{-37,
                  -153},{-30.6,-153}}, color={0,0,127}));
          connect(limAirExcUp2.y, inputKPICalculatorFloorGain.u)
            annotation (Line(points={{-21.7,-173},{-15.54,-173}}, color={0,0,127}));
          connect(limAixExDown2.y, inputKPICalculatorFloorLoss.u) annotation (Line(
                points={{-23.7,-189},{-22,-189},{-22,-190},{-15.54,-190}}, color={0,0,
                  127}));
          connect(QFloor.y, limAirExcUp2.u) annotation (Line(points={{-37,-182},{-38,
                  -182},{-38,-173},{-28.6,-173}}, color={0,0,127}));
          connect(QFloor.y, limAixExDown2.u) annotation (Line(points={{-37,-182},{-37,
                  -189},{-30.6,-189}}, color={0,0,127}));
          connect(limAirExcUp3.y, inputKPICalculatorRoofGain.u)
            annotation (Line(points={{-89.7,-137},{-83.54,-137}}, color={0,0,127}));
          connect(limAixExDown3.y, inputKPICalculatorRoofLoss.u) annotation (Line(
                points={{-91.7,-153},{-90,-153},{-90,-154},{-83.54,-154}}, color={0,0,
                  127}));
          connect(QRoof.y, limAirExcUp3.u) annotation (Line(points={{-105,-146},{-106,
                  -146},{-106,-137},{-96.6,-137}}, color={0,0,127}));
          connect(QRoof.y, limAixExDown3.u) annotation (Line(points={{-105,-146},{-105,
                  -153},{-98.6,-153}}, color={0,0,127}));
          connect(limAirExcUp4.y, inputKPICalculatorWinGain.u)
            annotation (Line(points={{-89.7,-173},{-83.54,-173}}, color={0,0,127}));
          connect(limAixExDown4.y, inputKPICalculatorWinLoss.u) annotation (Line(points=
                 {{-91.7,-189},{-90,-189},{-90,-190},{-83.54,-190}}, color={0,0,127}));
          connect(QWin.y, limAirExcUp4.u) annotation (Line(points={{-105,-182},{-106,
                  -182},{-106,-173},{-96.6,-173}}, color={0,0,127}));
          connect(QWin.y, limAixExDown4.u) annotation (Line(points={{-105,-182},{-105,
                  -189},{-98.6,-189}}, color={0,0,127}));
          connect(inputKPICalculatorOwaGain.KPIBus, outBusDem.QOwaGain) annotation (
              Line(
              points={{0.14,-137},{8,-137},{8,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorOwaLoss.KPIBus, outBusDem.QOwaLoss) annotation (
              Line(
              points={{0.14,-154},{12,-154},{12,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorFloorGain.KPIBus, outBusDem.QFloorGain) annotation (
             Line(
              points={{0.14,-173},{10,-173},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorFloorLoss.KPIBus, outBusDem.QFloorLoss) annotation (
             Line(
              points={{0.14,-190},{10,-190},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorWinLoss.KPIBus, outBusDem.QWinLoss) annotation (
              Line(
              points={{-67.86,-190},{10,-190},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorWinGain.KPIBus, outBusDem.QWinGain) annotation (
              Line(
              points={{-67.86,-173},{12,-173},{12,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorRoofLoss.KPIBus, outBusDem.QRoofLoss) annotation (
              Line(
              points={{-67.86,-154},{-26,-154},{-26,-152},{10,-152},{10,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculatorRoofGain.KPIBus, outBusDem.QRoofGain) annotation (
              Line(
              points={{-67.86,-137},{12,-137},{12,-2},{98,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(thermalZone.TAir, buiMeaBus.TZoneMea) annotation (Line(points={{-42.7,
                  76.8},{-48,76.8},{-48,92},{0,92},{0,99}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(multiSum.y, inputKPICalculator.u)
            annotation (Line(points={{47.15,-81},{33.54,-81}}, color={0,0,127}));
          connect(multiSum.u, thermalZone.QIntGains_flow) annotation (Line(points={{58,-81},
                  {64,-81},{64,-80},{68,-80},{68,-4},{-50,-4},{-50,33.6},{-42.7,33.6}},
                color={0,0,127}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{84,-96},{70,-96}},
              color={0,0,0},
              thickness=1));
            annotation (Diagram(graphics,
                                coordinateSystem(extent={{-100,-100},{100,100}})), Icon(graphics,
                coordinateSystem(extent={{-100,-120},{100,100}})));
        end TEASERThermalZone_nightLowering_ramp;
      annotation (Icon(graphics={
              Rectangle(
                lineColor={200,200,200},
                fillColor={248,248,248},
                fillPattern=FillPattern.HorizontalCylinder,
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Polygon(
                points={{-80,48},{80,48},{0,88},{-80,48}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-48,38},{-10,12}},
                lineColor={0,0,0},
                lineThickness=0.5),
              Rectangle(
                extent={{-60,48},{60,-92}},
                lineColor={0,0,0},
                lineThickness=0.5),
              Rectangle(
                extent={{8,-26},{50,-92}},
                lineColor={0,0,0},
                lineThickness=0.5)}));
      end Building;
    end Demand;

    package UserProfiles "Package with models for user profiles"
      extends BESMod.Utilities.Icons.SystemIcon;

      model TEASERProfiles "Standard TEASER Profiles"
        extends BaseClasses.RecordBasedDHWUser;
        parameter String fileNameIntGains=Modelica.Utilities.Files.loadResource("modelica://BESMod/Resources/InternalGains.txt")
          "File where matrix is stored"
          annotation (Dialog(tab="Inputs", group="Internal Gains"));
        parameter Real gain[3]=fill(1, 3) "Gain value multiplied with internal gains. Used to e.g. disable single gains."          annotation (Dialog(group=
                "Internal Gains",                                                                                                 tab="Inputs"));

        Modelica.Blocks.Sources.CombiTimeTable tableInternalGains(
          final tableOnFile=true,
          final extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
          final tableName="Internals",
          final fileName=fileNameIntGains,
          columns=2:4) "Profiles for internal gains"
          annotation (Placement(transformation(extent={{23,23},{-23,-23}},
              rotation=180,
              origin={-27,1})));

        Modelica.Blocks.Math.Gain gainIntGains[3](k=gain)
          "Profiles for internal gains" annotation (Placement(transformation(
              extent={{23,23},{-23,-23}},
              rotation=180,
              origin={45,1})));

        Modelica.Blocks.Sources.Constant const[nZones](k=
              TSetZone_nominal) "Profiles for internal gains"
          annotation (Placement(transformation(
              extent={{23,23},{-23,-23}},
              rotation=180,
              origin={-87,-45})));
      equation
        connect(tableInternalGains.y, gainIntGains.u) annotation (Line(points={{-1.7,1},
                {-1.7,0.5},{17.4,0.5},{17.4,1}},    color={0,0,127}));
        connect(gainIntGains.y, useProBus.intGains) annotation (Line(points={{70.3,1},
                {79.15,1},{79.15,-1},{115,-1}},             color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const.y, useProBus.TZoneSet) annotation (Line(points={{-61.7,-45},{
                115,-45},{115,-1}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
      end TEASERProfiles;

      model Case600Profiles "Case600FF profiles"
        extends BaseClasses.RecordBasedDHWUser;

        Modelica.Blocks.Sources.Constant const[nZones](final k=
              TSetZone_nominal)                  "Profiles for internal gains"
          annotation (Placement(transformation(
              extent={{23,23},{-23,-23}},
              rotation=180,
              origin={-87,-45})));
        Modelica.Blocks.Sources.Constant qLatGai_flow(k=0) "Latent heat gain"
          annotation (Placement(transformation(extent={{-94,8},{-86,16}})));
        Modelica.Blocks.Sources.Constant qConGai_flow(k=80/48) "Convective heat gain"
          annotation (Placement(transformation(extent={{-114,36},{-106,44}})));
        Modelica.Blocks.Sources.Constant qRadGai_flow(k=120/48) "Radiative heat gain"
          annotation (Placement(transformation(extent={{-102,44},{-94,52}})));
        Modelica.Blocks.Routing.Multiplex3 multiplex3_1
          "Multiplex for internal gains"
          annotation (Placement(transformation(extent={{-36,24},{-12,48}})));
        Modelica.Blocks.Sources.Constant uSha(k=0)
          "Control signal for the shading device"
          annotation (Placement(transformation(extent={{-36,-10},{-14,12}})));
      equation
        connect(const.y, useProBus.TZoneSet) annotation (Line(points={{-61.7,-45},{
                115,-45},{115,-1}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(qConGai_flow.y,multiplex3_1. u2[1]) annotation (Line(
            points={{-105.6,40},{-46,40},{-46,36},{-38.4,36}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(qLatGai_flow.y,multiplex3_1. u3[1])  annotation (Line(
            points={{-85.6,12},{-38.4,12},{-38.4,27.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(qRadGai_flow.y,multiplex3_1. u1[1])  annotation (Line(
            points={{-93.6,48},{-46,48},{-46,44.4},{-38.4,44.4}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(multiplex3_1.y, useProBus.intGains) annotation (Line(points={{-10.8,36},
                {115,36},{115,-1}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(uSha.y, useProBus.uSha) annotation (Line(points={{-12.9,1},{-12.9,-1},
                {115,-1}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
      end Case600Profiles;

      model NoUser "No user"
        extends BaseClasses.RecordBasedDHWUser(
          final use_dhwCalc=false,
          redeclare final
            BESMod.HugosProject.Systems.Demand.DHW.RecordsCollection.NoDHW DHWProfile);

        Modelica.Blocks.Sources.Constant constZero[3](each k=0)
          annotation (Placement(transformation(extent={{-14,-20},{24,18}})));
        Modelica.Blocks.Sources.Constant const[nZones](k=TSetZone_nominal)
          "Profiles for internal gains" annotation (Placement(transformation(
              extent={{23,23},{-23,-23}},
              rotation=180,
              origin={-93,-31})));
      equation
        connect(constZero.y, useProBus.intGains) annotation (Line(points={{25.9,-1},{115,
                -1},{115,-1}},                 color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const.y, useProBus.TZoneSet) annotation (Line(points={{-67.7,-31},{74,
                -31},{74,-1},{115,-1}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
      end NoUser;

      package BaseClasses
      extends Modelica.Icons.BasesPackage;
        partial model PartialUserProfiles
          "Partial model for replaceable user profiles"

          parameter Integer nZones=1 "Number of zones to transfer heat to"  annotation(Dialog(group="Top-Down"));

          parameter Modelica.Units.SI.Temperature TSetZone_nominal[nZones]=fill(293.15,
              nZones) "Nominal set temerature of zones"
            annotation (Dialog(group="Top-Down"));
          parameter Boolean use_dhw = true "= false to disable DHW" annotation(Dialog(group="Top-Down"));
          parameter Modelica.Units.SI.Temperature TSetDHW=323.15
            "Constant DHW demand temperature for design"
            annotation (Dialog(group="Top-Down", enable=use_dhw));
          parameter Modelica.Units.SI.Temperature TDHWWaterCold=283.15
            "Cold water temperature (new water)"
            annotation (Dialog(group="Top-Down", enable=use_dhw));
          parameter Modelica.Units.SI.MassFlowRate mDHW_flow_nominal
            "Nominal mass flow rate" annotation (Dialog(group="Bottom-Up", enable=use_dhw));
          parameter Modelica.Units.SI.Volume VolDHWDay "Average daily tapping volume"
            annotation (Dialog(group="Bottom-Up", enable=use_dhw));

          BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
            annotation (Placement(transformation(extent={{80,-34},{150,32}}),
                iconTransformation(extent={{80,-34},{150,32}})));

          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                    -120},{120,120}}),
                                 graphics={
                Text(
                  extent={{-196,136},{190,24}},
                  lineColor={0,0,0},
                  textString="%name%
"),             Polygon(points={{-118,-96},{-118,-96}}, lineColor={28,108,200}),
                Bitmap(extent={{-96,-96},{90,92}}, fileName="modelica://BESMod/Resources/Images/Users.png")}),
              Diagram(graphics,
                      coordinateSystem(preserveAspectRatio=false, extent={{-120,-120},
                    {120,120}})));
        end PartialUserProfiles;

        partial model RecordBasedDHWUser "Model for DHW-records and nominal, constant set-point temperature as a user"
          extends PartialUserProfiles(VolDHWDay=if use_dhwCalc then V_dhwCalc_day else
                DHWProfile.V_dhw_day, mDHW_flow_nominal=DHWProfile.m_flow_nominal);

          replaceable parameter
            Systems.Demand.DHW.RecordsCollection.PartialDHWTap DHWProfile
            annotation (choicesAllMatching=true, Dialog(group="DHW", enable=
                  not use_dhwCalc and use_dhw));

          parameter Boolean use_dhwCalc=false "=true to use the tables in DHWCalc. Will slow down the simulation, but represents DHW tapping more in a more realistic way."     annotation (Dialog(group="DHW",  enable=use_dhw));
          parameter String tableName="DHWCalc" "Table name on file for DHWCalc"
            annotation (Dialog(group="DHW",  enable=use_dhwCalc and use_dhw));
          parameter String fileName=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/DHWCalc.txt")
            "File where matrix is stored for DHWCalc"
            annotation (Dialog(group="DHW",  enable=use_dhwCalc and use_dhw));
          parameter Modelica.Units.SI.Volume V_dhwCalc_day=0
            "Average daily tapping volume in DHWCalc table" annotation (Dialog(
              group="DHW",
              enable=use_dhwCalc));
          Modelica.Blocks.Sources.CombiTimeTable combiTimeTableDHWInput(
            final tableOnFile=use_dhwCalc,
            final table=DHWProfile.table,
            final tableName=tableName,
            final fileName=fileName,
            final columns=2:5,
            final smoothness=Modelica.Blocks.Types.Smoothness.ConstantSegments,
            final extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
            "Read the input data from the given file. " annotation (Placement(visible=true,
                transformation(
                extent={{-14,-14},{14,14}},
                rotation=0,
                origin={46,86})));
        equation
          connect(combiTimeTableDHWInput.y[4], useProBus.TDHWDemand) annotation (Line(
                points={{61.4,86},{115,86},{115,-1}},  color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(combiTimeTableDHWInput.y[2], useProBus.mDHWDemand_flow) annotation (
              Line(points={{61.4,86},{115,86},{115,-1}},                    color={0,0,
                  127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end RecordBasedDHWUser;

        partial model PartialUserProfiles_nightLowering
          "Partial model for replaceable user profiles"

          parameter Integer nZones=1 "Number of zones to transfer heat to"  annotation(Dialog(group="Top-Down"));

          parameter Modelica.Units.SI.Temperature TSetZone_nominal[nZones]=fill(293.15,
              nZones) "Nominal set temerature of zones"
            annotation (Dialog(group="Top-Down"));
          parameter Modelica.Units.SI.TemperatureDifference dT_night[nZones]=fill(2,
              nZones) "temperature lowering at night"
            annotation (Dialog(group="Top-Down"));
          parameter Modelica.Units.NonSI.Time_hour hMorning[nZones]=fill(7,
              nZones) "hour when the day begins"
            annotation (Dialog(group="Top-Down"));
          parameter Boolean use_dhw = true "= false to disable DHW" annotation(Dialog(group="Top-Down"));
          parameter Modelica.Units.SI.Temperature TSetDHW=323.15
            "Constant DHW demand temperature for design"
            annotation (Dialog(group="Top-Down", enable=use_dhw));
          parameter Modelica.Units.SI.Temperature TDHWWaterCold=283.15
            "Cold water temperature (new water)"
            annotation (Dialog(group="Top-Down", enable=use_dhw));
          parameter Modelica.Units.SI.MassFlowRate mDHW_flow_nominal
            "Nominal mass flow rate" annotation (Dialog(group="Bottom-Up", enable=use_dhw));
          parameter Modelica.Units.SI.Volume VolDHWDay "Average daily tapping volume"
            annotation (Dialog(group="Bottom-Up", enable=use_dhw));

          BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
            annotation (Placement(transformation(extent={{80,-34},{150,32}}),
                iconTransformation(extent={{80,-34},{150,32}})));

          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                    -120},{120,120}}),
                                 graphics={
                Text(
                  extent={{-196,136},{190,24}},
                  lineColor={0,0,0},
                  textString="%name%
"),             Polygon(points={{-118,-96},{-118,-96}}, lineColor={28,108,200}),
                Bitmap(extent={{-96,-96},{90,92}}, fileName="modelica://BESMod/Resources/Images/Users.png")}),
              Diagram(graphics,
                      coordinateSystem(preserveAspectRatio=false, extent={{-120,-120},
                    {120,120}})));
        end PartialUserProfiles_nightLowering;

        partial model RecordBasedDHWUser_nightLowering
          "Model for DHW-records and nominal, constant set-point temperature as a user"
          extends PartialUserProfiles_nightLowering(VolDHWDay=if use_dhwCalc then V_dhwCalc_day else
                DHWProfile.V_dhw_day, mDHW_flow_nominal=DHWProfile.m_flow_nominal);

          replaceable parameter
            Systems.Demand.DHW.RecordsCollection.PartialDHWTap DHWProfile
            annotation (choicesAllMatching=true, Dialog(group="DHW", enable=
                  not use_dhwCalc and use_dhw));

          parameter Boolean use_dhwCalc=false "=true to use the tables in DHWCalc. Will slow down the simulation, but represents DHW tapping more in a more realistic way."     annotation (Dialog(group="DHW",  enable=use_dhw));
          parameter String tableName="DHWCalc" "Table name on file for DHWCalc"
            annotation (Dialog(group="DHW",  enable=use_dhwCalc and use_dhw));
          parameter String fileName=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/DHWCalc.txt")
            "File where matrix is stored for DHWCalc"
            annotation (Dialog(group="DHW",  enable=use_dhwCalc and use_dhw));
          parameter Modelica.Units.SI.Volume V_dhwCalc_day=0
            "Average daily tapping volume in DHWCalc table" annotation (Dialog(
              group="DHW",
              enable=use_dhwCalc));
          Modelica.Blocks.Sources.CombiTimeTable combiTimeTableDHWInput(
            final tableOnFile=use_dhwCalc,
            final table=DHWProfile.table,
            final tableName=tableName,
            final fileName=fileName,
            final columns=2:5,
            final smoothness=Modelica.Blocks.Types.Smoothness.ConstantSegments,
            final extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
            "Read the input data from the given file. " annotation (Placement(visible=true,
                transformation(
                extent={{-14,-14},{14,14}},
                rotation=0,
                origin={46,86})));
        equation
          connect(combiTimeTableDHWInput.y[4], useProBus.TDHWDemand) annotation (Line(
                points={{61.4,86},{115,86},{115,-1}},  color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(combiTimeTableDHWInput.y[2], useProBus.mDHWDemand_flow) annotation (
              Line(points={{61.4,86},{115,86},{115,-1}},                    color={0,0,
                  127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end RecordBasedDHWUser_nightLowering;

        partial model PartialUserProfiles_nightLowering_ramp
          "Partial model for replaceable user profiles"

          parameter Integer nZones=1 "Number of zones to transfer heat to"  annotation(Dialog(group="Top-Down"));

          parameter Modelica.Units.SI.Temperature TSetZone_nominal[nZones]=fill(293.15,
              nZones) "Nominal set temerature of zones"
            annotation (Dialog(group="Top-Down"));
          parameter Modelica.Units.SI.TemperatureDifference dT_night[nZones]=fill(2,
              nZones) "temperature lowering at night"
            annotation (Dialog(group="Top-Down"));
          parameter Modelica.Units.NonSI.Time_hour hMorning[nZones]=fill(7,
              nZones) "hour when the day begins"
            annotation (Dialog(group="Top-Down"));
          parameter Modelica.Units.NonSI.Time_hour timeRamp[nZones]=fill(1,
              nZones) "duration of the ramp"
            annotation (Dialog(group="Top-Down"));

          parameter Boolean use_dhw = true "= false to disable DHW" annotation(Dialog(group="Top-Down"));
          parameter Modelica.Units.SI.Temperature TSetDHW=323.15
            "Constant DHW demand temperature for design"
            annotation (Dialog(group="Top-Down", enable=use_dhw));
          parameter Modelica.Units.SI.Temperature TDHWWaterCold=283.15
            "Cold water temperature (new water)"
            annotation (Dialog(group="Top-Down", enable=use_dhw));
          parameter Modelica.Units.SI.MassFlowRate mDHW_flow_nominal
            "Nominal mass flow rate" annotation (Dialog(group="Bottom-Up", enable=use_dhw));
          parameter Modelica.Units.SI.Volume VolDHWDay "Average daily tapping volume"
            annotation (Dialog(group="Bottom-Up", enable=use_dhw));

          BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
            annotation (Placement(transformation(extent={{80,-34},{150,32}}),
                iconTransformation(extent={{80,-34},{150,32}})));

          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-120,
                    -120},{120,120}}),
                                 graphics={
                Text(
                  extent={{-196,136},{190,24}},
                  lineColor={0,0,0},
                  textString="%name%
"),             Polygon(points={{-118,-96},{-118,-96}}, lineColor={28,108,200}),
                Bitmap(extent={{-96,-96},{90,92}}, fileName="modelica://BESMod/Resources/Images/Users.png")}),
              Diagram(graphics,
                      coordinateSystem(preserveAspectRatio=false, extent={{-120,-120},
                    {120,120}})));
        end PartialUserProfiles_nightLowering_ramp;

        partial model RecordBasedDHWUser_nightLowering_ramp
          "Model for DHW-records and nominal, constant set-point temperature as a user"
          extends PartialUserProfiles_nightLowering_ramp(VolDHWDay=if use_dhwCalc then V_dhwCalc_day else
                DHWProfile.V_dhw_day, mDHW_flow_nominal=DHWProfile.m_flow_nominal);

          replaceable parameter
            Systems.Demand.DHW.RecordsCollection.PartialDHWTap DHWProfile
            annotation (choicesAllMatching=true, Dialog(group="DHW", enable=
                  not use_dhwCalc and use_dhw));

          parameter Boolean use_dhwCalc=false "=true to use the tables in DHWCalc. Will slow down the simulation, but represents DHW tapping more in a more realistic way."     annotation (Dialog(group="DHW",  enable=use_dhw));
          parameter String tableName="DHWCalc" "Table name on file for DHWCalc"
            annotation (Dialog(group="DHW",  enable=use_dhwCalc and use_dhw));
          parameter String fileName=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/DHWCalc.txt")
            "File where matrix is stored for DHWCalc"
            annotation (Dialog(group="DHW",  enable=use_dhwCalc and use_dhw));
          parameter Modelica.Units.SI.Volume V_dhwCalc_day=0
            "Average daily tapping volume in DHWCalc table" annotation (Dialog(
              group="DHW",
              enable=use_dhwCalc));
          Modelica.Blocks.Sources.CombiTimeTable combiTimeTableDHWInput(
            final tableOnFile=use_dhwCalc,
            final table=DHWProfile.table,
            final tableName=tableName,
            final fileName=fileName,
            final columns=2:5,
            final smoothness=Modelica.Blocks.Types.Smoothness.ConstantSegments,
            final extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic)
            "Read the input data from the given file. " annotation (Placement(visible=true,
                transformation(
                extent={{-14,-14},{14,14}},
                rotation=0,
                origin={46,86})));
        equation
          connect(combiTimeTableDHWInput.y[4], useProBus.TDHWDemand) annotation (Line(
                points={{61.4,86},{115,86},{115,-1}},  color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(combiTimeTableDHWInput.y[2], useProBus.mDHWDemand_flow) annotation (
              Line(points={{61.4,86},{115,86},{115,-1}},                    color={0,0,
                  127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end RecordBasedDHWUser_nightLowering_ramp;
      end BaseClasses;

      package Tests "Test package for user-profiles"
        extends Modelica.Icons.ExamplesPackage;
        partial model PartialTest "Partial Test model"
          extends Modelica.Icons.Example;
          replaceable BaseClasses.PartialUserProfiles userProfiles constrainedby
            BaseClasses.PartialUserProfiles annotation (Placement(transformation(extent=
                   {{-50,-54},{48,44}})), choicesAllMatching=true);
          annotation (experiment(
              StopTime=86400,
              Interval=1,
              __Dymola_Algorithm="Dassl"));
        end PartialTest;

        model NoUserTest
          extends PartialTest(redeclare
              BESMod.HugosProject.Systems.UserProfiles.NoUser userProfiles);
        end NoUserTest;

        model TEASERProfileTest
          extends PartialTest(redeclare
              BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles userProfiles);
        end TEASERProfileTest;

        model Case600Profiles
          extends PartialTest(redeclare
              BESMod.HugosProject.Systems.UserProfiles.Case600Profiles userProfiles);
        end Case600Profiles;
      end Tests;

      model TEASERProfiles_nightLowering
        "Standard TEASER Profiles with night lowering of TSet"
        extends BaseClasses.RecordBasedDHWUser_nightLowering;
        parameter String fileNameIntGains=Modelica.Utilities.Files.loadResource("modelica://BESMod/Resources/InternalGains.txt")
          "File where matrix is stored"
          annotation (Dialog(tab="Inputs", group="Internal Gains"));
        parameter Real gain[3]=fill(1, 3) "Gain value multiplied with internal gains. Used to e.g. disable single gains."          annotation (Dialog(group=
                "Internal Gains",                                                                                                 tab="Inputs"));

        Modelica.Blocks.Sources.CombiTimeTable tableInternalGains(
          final tableOnFile=true,
          final extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
          final tableName="Internals",
          final fileName=fileNameIntGains,
          columns=2:4) "Profiles for internal gains"
          annotation (Placement(transformation(extent={{23,23},{-23,-23}},
              rotation=180,
              origin={-27,1})));

        Modelica.Blocks.Math.Gain gainIntGains[3](k=gain)
          "Profiles for internal gains" annotation (Placement(transformation(
              extent={{23,23},{-23,-23}},
              rotation=180,
              origin={45,1})));

        Modelica.Blocks.Sources.Pulse pulse[nZones](
          amplitude=dT_night,
          width=(24 - hMorning[1])/24*100,
          period=24*60*60,
          offset=TSetZone_nominal - dT_night,
          startTime=hMorning*60*60)
          annotation (Placement(transformation(extent={{-104,-82},{-58,-36}})));
      equation
        connect(tableInternalGains.y, gainIntGains.u) annotation (Line(points={{-1.7,1},
                {-1.7,0.5},{17.4,0.5},{17.4,1}},    color={0,0,127}));
        connect(gainIntGains.y, useProBus.intGains) annotation (Line(points={{70.3,1},
                {79.15,1},{79.15,-1},{115,-1}},             color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(pulse.y, useProBus.TZoneSet) annotation (Line(points={{-55.7,
                -59},{115,-59},{115,-1}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
      end TEASERProfiles_nightLowering;

      model TEASERProfiles_nightLowering_ramp
        "Standard TEASER Profiles with night lowering of TSet"
        extends BaseClasses.RecordBasedDHWUser_nightLowering_ramp;
        parameter String fileNameIntGains=Modelica.Utilities.Files.loadResource("modelica://BESMod/Resources/InternalGains.txt")
          "File where matrix is stored"
          annotation (Dialog(tab="Inputs", group="Internal Gains"));
        parameter Real gain[3]=fill(1, 3) "Gain value multiplied with internal gains. Used to e.g. disable single gains."          annotation (Dialog(group=
                "Internal Gains",                                                                                                 tab="Inputs"));

        Modelica.Blocks.Sources.CombiTimeTable tableInternalGains(
          final tableOnFile=true,
          final extrapolation=Modelica.Blocks.Types.Extrapolation.Periodic,
          final tableName="Internals",
          final fileName=fileNameIntGains,
          columns=2:4) "Profiles for internal gains"
          annotation (Placement(transformation(extent={{23,23},{-23,-23}},
              rotation=180,
              origin={-27,1})));

        Modelica.Blocks.Math.Gain gainIntGains[3](k=gain)
          "Profiles for internal gains" annotation (Placement(transformation(
              extent={{23,23},{-23,-23}},
              rotation=180,
              origin={45,1})));

        Modelica.Blocks.Sources.Trapezoid trapezoid[nZones](
          amplitude=dT_night,
          rising=timeRamp*60*60,
          width=(24 - hMorning[1])*60*60,
          falling=0,
          period=24*60*60,
          offset=TSetZone_nominal - dT_night,
          startTime=(hMorning - timeRamp)*60*60)
          annotation (Placement(transformation(extent={{-106,-76},{-70,-40}})));
      equation
        connect(tableInternalGains.y, gainIntGains.u) annotation (Line(points={{-1.7,1},
                {-1.7,0.5},{17.4,0.5},{17.4,1}},    color={0,0,127}));
        connect(gainIntGains.y, useProBus.intGains) annotation (Line(points={{70.3,1},
                {79.15,1},{79.15,-1},{115,-1}},             color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(trapezoid.y, useProBus.TZoneSet) annotation (Line(points={{-68.2,
                -58},{115,-58},{115,-1}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
      end TEASERProfiles_nightLowering_ramp;
    end UserProfiles;

    package Hydraulical "All hydraulical based systems"
      extends BESMod.Utilities.Icons.SystemIcon;
      package Control
        extends BESMod.Utilities.Icons.ControlPackage;

        model ConstHys_OnOff_HPSControll
          "Constant Hysteresis for an on/off HP"
          extends BaseClasses.PartialTwoPoint_HPS_Controller(
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.OnOffHeatPumpController
              HP_nSet_Controller(final n_opt=nOptHP),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresis
              BufferOnOffController(Hysteresis=bivalentControlData.dTHysBui,
                dt_hr=bivalentControlData.dtHeaRodBui),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresis
              DHWOnOffContoller(Hysteresis=bivalentControlData.dTHysDHW, dt_hr=
                  bivalentControlData.dtHeaRodDHW));
          parameter Real nOptHP=0.7
            "Frequency of the heat pump map with an optimal isentropic efficiency. Necessary, as on-off HP will be optimized for this frequency and only used there."
            annotation (Dialog(group="Heat Pumps"));
        equation

          connect(sigBusGen.hp_bus.TConInMea, HP_nSet_Controller.T_Meas) annotation (
              Line(
              points={{-152,-99},{-114,-99},{-114,0},{97,0},{97,61.2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
        end ConstHys_OnOff_HPSControll;

        model ConstHys_P_ConOut_HPSController
          "Hys + P with condenser outlet as control variable"
          extends BaseClasses.PartialTwoPoint_HPS_Controller(
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.P_InverterHeatPumpController
              HP_nSet_Controller(P=bivalentControlData.k, nMin=
                  bivalentControlData.nMin),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresis
              BufferOnOffController(Hysteresis=bivalentControlData.dTHysBui,
                dt_hr=bivalentControlData.dtHeaRodBui),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresis
              DHWOnOffContoller(Hysteresis=bivalentControlData.dTHysDHW, dt_hr=
                  bivalentControlData.dtHeaRodDHW));

        equation
          connect(HP_nSet_Controller.T_Meas, sigBusGen.hp_bus.TConInMea)
            annotation (Line(points={{97,61.2},{97,-99},{-152,-99}},
                color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
        end ConstHys_P_ConOut_HPSController;

        model ConstHys_P_ConIn_HPSController
          "Hys + P with condenser intlet as control variable"
          extends BaseClasses.PartialTwoPoint_HPS_Controller(
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.P_InverterHeatPumpController
              HP_nSet_Controller(P=bivalentControlData.k, nMin=
                  bivalentControlData.nMin),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresis
              BufferOnOffController,
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresis
              DHWOnOffContoller(Hysteresis=bivalentControlData.dTHysDHW, dt_hr=
                  bivalentControlData.dtHeaRodDHW));

        equation
          connect(HP_nSet_Controller.T_Meas, sigBusGen.hp_bus.TConOutMea)
            annotation (Line(points={{97,61.2},{97,-99},{-152,-99}},
                color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
        end ConstHys_P_ConIn_HPSController;

        model ConstHys_PI_ConOut_HPSController
          "Hys + PI with condenser outlet as control variable"
          extends BaseClasses.PartialTwoPoint_HPS_Controller(
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.PI_InverterHeatPumpController
              HP_nSet_Controller(
              P=bivalentControlData.k,
              nMin=bivalentControlData.nMin,
              T_I=bivalentControlData.T_I),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresisTimeBasedHR
              BufferOnOffController(
              Hysteresis=bivalentControlData.dTHysBui,
              dt_hr=bivalentControlData.dtHeaRodBui,
              addSet_dt_hr=bivalentControlData.addSet_dtHeaRodBui),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresisTimeBasedHR
              DHWOnOffContoller(
              Hysteresis=bivalentControlData.dTHysDHW,
              dt_hr=bivalentControlData.dtHeaRodDHW,
              addSet_dt_hr=bivalentControlData.addSet_dtHeaRodDHW));

        equation
          connect(HP_nSet_Controller.T_Meas, sigBusGen.hp_bus.TConOutMea) annotation (
              Line(points={{97,61.2},{97,-64},{-152,-64},{-152,-99}},  color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
        end ConstHys_PI_ConOut_HPSController;

        model ConstHys_PI_StoTop_HPSController
          "Using const. hys + PI Inverter + top level storage as controller"
          extends BaseClasses.PartialTwoPoint_HPS_Controller(
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.PI_InverterHeatPumpController
              HP_nSet_Controller(
              P=bivalentControlData.k,
              nMin=bivalentControlData.nMin,
              T_I=bivalentControlData.T_I),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresis
              BufferOnOffController(Hysteresis=bivalentControlData.dTHysBui,
                dt_hr=bivalentControlData.dtHeaRodBui),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresis
              DHWOnOffContoller(Hysteresis=bivalentControlData.dTHysDHW, dt_hr=
                  bivalentControlData.dtHeaRodDHW));

          Modelica.Blocks.Logical.Switch switch2 "on: DHW, off: Buffer"
            annotation (Placement(transformation(extent={{-5,-5},{5,5}},
                rotation=90,
                origin={83,-27})));
        equation
          connect(DHWHysOrLegionella.y, switch2.u2) annotation (Line(points={{-71.25,
                  69},{-20,69},{-20,-30},{6,-30},{6,-33},{83,-33}}, color={255,0,255}));
          connect(switch2.u1, sigBusDistr.T_StoDHW_top) annotation (Line(points={{79,-33},
                  {79,-62},{108,-62},{108,-100},{1,-100}},                    color={
                  0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(switch2.u3, sigBusDistr.T_StoBuf_top) annotation (Line(points={{87,-33},
                  {87,-46},{1,-46},{1,-100}},                      color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
        end ConstHys_PI_StoTop_HPSController;

        model Biv_PI_ConFlow_HPSController
          "Using alt_bivalent + PI Inverter + Return Temperature as controller"
          extends BaseClasses.PartialTwoPoint_HPS_Controller(
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
              TSet_DHW,
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.PI_InverterHeatPumpController
              HP_nSet_Controller(
              P=bivalentControlData.k,
              nMin=bivalentControlData.nMin,
              T_I=bivalentControlData.T_I),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.AlternativeBivalentOnOffController
              BufferOnOffController(final T_biv=bivalentControlData.TBiv,
                hysteresis=bivalentControlData.dTHysDHW),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.AlternativeBivalentOnOffController
              DHWOnOffContoller(final T_biv=bivalentControlData.TBiv,
                hysteresis=bivalentControlData.dTHysDHW));

        equation
          connect(HP_nSet_Controller.T_Meas, sigBusGen.hp_bus.TConInMea)
            annotation (Line(points={{97,61.2},{97,-66},{-118,-66},{-118,-99},{-152,-99}},
                                       color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
        end Biv_PI_ConFlow_HPSController;

        model NoControl "No control"
          extends BaseClasses.PartialControl;
        end NoControl;

        model MonovalentGasBoiler "PI Control of gas boiler"
          extends BaseClasses.SystemWithThermostaticValveControl;
          BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatingCurve
            heatingCurve(
            TRoomSet=monovalentControlParas.TSetRoomConst,
            GraHeaCurve=monovalentControlParas.gradientHeatCurve,
            THeaThres=monovalentControlParas.TSetRoomConst,
            dTOffSet_HC=monovalentControlParas.dTOffSetHeatCurve) annotation (
              Placement(transformation(extent={{-220,18},{-198,40}})));
          BESMod.HugosProject.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
            TSet_DHW(T_DHW=distributionParameters.TDHW_nominal) annotation (
              Placement(transformation(extent={{-220,74},{-200,96}})));
          replaceable
            BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.PI_InverterHeatPumpController
            HP_nSet_Controller(
            P=monovalentControlParas.k,
            nMin=monovalentControlParas.nMin,
            T_I=monovalentControlParas.T_I,
            Ni=monovalentControlParas.Ni) annotation (choicesAllMatching=true,
              Placement(transformation(extent={{18,60},{60,96}})));
          Modelica.Blocks.Logical.OnOffController BoilerOnOffBuf(bandwidth=
                monovalentControlParas.dTHysBui, pre_y_start=true)
            "Generates the on/off signal depending on the temperature inputs"
            annotation (Placement(transformation(extent={{-132,22},{-104,50}})));
          Modelica.Blocks.Logical.OnOffController boilerOnOffDHW(bandwidth=
                monovalentControlParas.dTHysDHW, pre_y_start=true)
            "Generates the on/off signal depending on the temperature inputs"
            annotation (Placement(transformation(extent={{-132,70},{-104,98}})));
          Modelica.Blocks.Sources.Constant const_dT_loading(k=distributionParameters.dTTra_nominal[1])
                                             annotation (Placement(transformation(
                extent={{4,-4},{-4,4}},
                rotation=180,
                origin={-76,88})));
          Modelica.Blocks.Math.Add add_dT_LoadingBuf
            annotation (Placement(transformation(extent={{-52,84},{-42,94}})));
          Modelica.Blocks.Logical.Or BoiOn annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-8,78})));
          Modelica.Blocks.Logical.Switch switch1
            annotation (Placement(transformation(extent={{-5,-5},{5,5}},
                rotation=0,
                origin={-29,97})));
          Modelica.Blocks.Sources.Constant const_dT_loading1(k=distributionParameters.dTTraDHW_nominal
                 + monovalentControlParas.dTHysDHW /2) annotation (Placement(transformation(
                extent={{4,-4},{-4,4}},
                rotation=180,
                origin={-76,104})));
          Modelica.Blocks.Math.Add add_dT_LoadingDHW
            annotation (Placement(transformation(extent={{-54,108},{-44,118}})));
          replaceable parameter RecordsCollection.BivalentHeatPumpControlDataDefinition
            monovalentControlParas constrainedby
            RecordsCollection.BivalentHeatPumpControlDataDefinition(                                     final TBiv=monovalentControlParas.TOda_nominal)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-226,-38},{-206,-18}})));
        equation
          connect(sigBusDistr,TSet_DHW. sigBusDistr) annotation (Line(
              points={{1,-100},{10,-100},{10,-146},{-280,-146},{-280,84.89},{-220,84.89}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(BoilerOnOffBuf.u, sigBusDistr.TStoBufTopMea) annotation (Line(points={{-134.8,
                  27.6},{-150,27.6},{-150,-66},{1,-66},{1,-100}},
                              color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(boilerOnOffDHW.u, sigBusDistr.TStoDHWTopMea) annotation (Line(points={{-134.8,
                  75.6},{-160,75.6},{-160,-62},{112,-62},{112,-100},{1,-100}},
                                      color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(TSet_DHW.TSet_DHW, boilerOnOffDHW.reference) annotation (Line(
                points={{-199,85},{-156,85},{-156,92.4},{-134.8,92.4}}, color={0,0,
                  127}));
          connect(heatingCurve.TSet, BoilerOnOffBuf.reference) annotation (Line(
                points={{-196.9,29},{-162,29},{-162,44.4},{-134.8,44.4}}, color={0,0,
                  127}));
          connect(const_dT_loading.y, add_dT_LoadingBuf.u2) annotation (Line(points={{
                  -71.6,88},{-64,88},{-64,86},{-53,86}}, color={0,0,127}));
          connect(BoiOn.y, HP_nSet_Controller.HP_On) annotation (Line(points={{-1.4,78},
                  {13.8,78}},                       color={255,0,255}));
          connect(boilerOnOffDHW.y, BoiOn.u1) annotation (Line(points={{-102.6,84},{-86,
                  84},{-86,78},{-15.2,78}},   color={255,0,255}));
          connect(BoilerOnOffBuf.y, BoiOn.u2) annotation (Line(points={{-102.6,36},{-86,
                  36},{-86,73.2},{-15.2,73.2}},
                                              color={255,0,255}));
          connect(boilerOnOffDHW.y, switch1.u2) annotation (Line(points={{-102.6,84},{
                  -96,84},{-96,97},{-35,97}},  color={255,0,255}));
          connect(boilerOnOffDHW.y, sigBusDistr.dhw_on) annotation (Line(points={{-102.6,
                  84},{-96,84},{-96,-60},{1,-60},{1,-100}},
                color={255,0,255}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(HP_nSet_Controller.T_Meas, sigBusGen.TBoiOut) annotation (Line(
                points={{39,56.4},{39,-54},{-152,-54},{-152,-99}},  color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(HP_nSet_Controller.n_Set, sigBusGen.uBoiSet) annotation (Line(
                points={{62.1,78},{74,78},{74,-48},{-118,-48},{-118,-99},{-152,-99}},
                color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(heatingCurve.TOda, weaBus.TDryBul) annotation (Line(points={{-222.2,
                  29},{-237,29},{-237,2}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(const_dT_loading1.y, add_dT_LoadingDHW.u2) annotation (Line(points={{
                  -71.6,104},{-66,104},{-66,110},{-55,110}}, color={0,0,127}));
          connect(TSet_DHW.TSet_DHW, add_dT_LoadingDHW.u1) annotation (Line(points={{
                  -199,85},{-184,85},{-184,116},{-55,116}}, color={0,0,127}));
          connect(switch1.y, HP_nSet_Controller.T_Set) annotation (Line(points={{-23.5,
                  97},{13.8,97},{13.8,88.8}}, color={0,0,127}));
          connect(add_dT_LoadingBuf.y, switch1.u3) annotation (Line(points={{-41.5,89},
                  {-38.75,89},{-38.75,93},{-35,93}}, color={0,0,127}));
          connect(add_dT_LoadingDHW.y, switch1.u1) annotation (Line(points={{-43.5,113},
                  {-35,113},{-35,101}}, color={0,0,127}));
          connect(heatingCurve.TSet, add_dT_LoadingBuf.u1) annotation (Line(points={{
                  -196.9,29},{-176,29},{-176,60},{-60,60},{-60,92},{-53,92}}, color={0,
                  0,127}));
          connect(BoiOn.y, HP_nSet_Controller.IsOn) annotation (Line(points={{-1.4,78},{
                  4,78},{4,40},{26.4,40},{26.4,56.4}}, color={255,0,255}));
        end MonovalentGasBoiler;

        model PartBiv_PI_ConOut_HPS
          "Part-parallel PI controlled HPS according to condenser outflow"
          extends BaseClasses.PartialTwoPoint_HPS_Controller(
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.PI_InverterHeatPumpController
              HP_nSet_Controller(
              P=bivalentControlData.k,
              nMin=bivalentControlData.nMin,
              T_I=bivalentControlData.T_I),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ParallelBivalentControl
              BufferOnOffController(
              Hysteresis=bivalentControlData.dTHysBui,
              TCutOff=TCutOff,
              TBiv=bivalentControlData.TBiv,
              TOda_nominal=bivalentControlData.TOda_nominal,
              TRoom=bivalentControlData.TSetRoomConst,
              QDem_flow_nominal=sum(transferParameters.Q_flow_nominal),
              QHP_flow_cutOff=QHP_flow_cutOff),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ParallelBivalentControl
              DHWOnOffContoller(
              Hysteresis=bivalentControlData.dTHysDHW,
              TCutOff=TCutOff,
              TBiv=bivalentControlData.TBiv,
              TOda_nominal=bivalentControlData.TOda_nominal,
              TRoom=bivalentControlData.TSetRoomConst,
              QDem_flow_nominal=sum(transferParameters.Q_flow_nominal),
              QHP_flow_cutOff=QHP_flow_cutOff));

          parameter Modelica.Units.SI.Temperature TCutOff "Cut-off temperature";
          parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff;

        equation
            connect(HP_nSet_Controller.T_Meas, sigBusGen.hp_bus.TConOutMea) annotation (
               Line(points={{97,61.2},{97,-56},{-152,-56},{-152,-99}},  color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));

          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end PartBiv_PI_ConOut_HPS;

        package Components "Package with additional models or components used for subsystems not present in any existing model library"

          model HeatingCurve
            "Defines T_supply of buffer storage tank (in dependency of ambient temperature)"

            parameter Modelica.Units.SI.Temperature TRoomSet=295.15
              "Expected room temperature (22°C)";
            parameter Real GraHeaCurve=1 "Heat curve gradient";
            parameter Modelica.Units.SI.Temperature THeaThres=273.15 + 15
              "Constant heating threshold temperature";
            parameter Modelica.Units.SI.TemperatureDifference dTOffSet_HC=2
              "Additional Offset of heating curve";

            Modelica.Blocks.Interfaces.RealInput TOda
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
            Modelica.Blocks.Interfaces.RealOutput TSet
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));

          equation
            if TOda < THeaThres then
              TSet = GraHeaCurve*(TRoomSet - TOda) + TRoomSet + dTOffSet_HC;
            else
              // No heating required.
              TSet = TRoomSet + dTOffSet_HC;
            end if;
            annotation (Icon(graphics={Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                                       Text(
                    extent={{-100,230},{100,30}},
                    lineColor={0,0,0},
                    textString="%name")}));
          end HeatingCurve;

          package DHWSetControl

            model AntiLegionellaControl "Control to avoid Legionella in the DHW"
              extends BaseClasses.PartialTSet_DHW_Control;
              parameter Modelica.Units.SI.ThermodynamicTemperature TLegMin=333.15
                "Temperature at which the legionella in DWH dies";
              parameter Real percentageDeath=0.999 "Specify the percentage of legionella you want to kill. 100 Percent would be impossible, as the model is based on exponential growth/death";
              parameter Modelica.Units.SI.Time triggerEvery
                "Time passed before next disinfection. Each day would be 86400 s"
                annotation (Dialog(enable=weekly));
              parameter Boolean aux_for_desinfection = true "Use aux heater for desinfection";
              Modelica.Units.SI.Time minTimeAntLeg(displayUnit="min")=
                get_minTimeAntLeg_for_TLegMin(fitMinLegTime.y[1], percentageDeath)
                "Minimal duration of antilegionella control to ensure correct disinfection";
              function get_minTimeAntLeg_for_TLegMin
                input Modelica.Units.SI.Temperature timeAtNinetyPercent;
                input Real percentageDeath;
                output Modelica.Units.SI.Time minTimeAntLeg;
              algorithm
                minTimeAntLeg := log(1-percentageDeath) / log(1-0.9) * timeAtNinetyPercent * 3600;
              end get_minTimeAntLeg_for_TLegMin;
              AixLib.Utilities.Logical.SmoothSwitch switchTLeg
                "Switch to Legionalla control if needed"
                annotation (Placement(transformation(extent={{64,-6},{78,8}})));

              Modelica.Blocks.Sources.Constant constTLegMin(final k=TLegMin)
                "Temperature at which the legionella in DWH dies"
                annotation (Placement(transformation(extent={{-88,-84},{-70,-66}})));
              Modelica.Blocks.Sources.Constant const(final k=T_DHW)
                annotation (Placement(transformation(extent={{-6,78},{14,98}})));
              Modelica.Blocks.Logical.GreaterEqual
                                           TConLessTLegMin
                "Compare if current TCon is smaller than the minimal TLeg"
                annotation (Placement(transformation(extent={{-80,-32},{-60,-12}})));
              Modelica.Blocks.Logical.Timer timeAntiLeg "Time in which legionella will die"
                annotation (Placement(transformation(extent={{-30,-32},{-10,-12}})));
              Modelica.Blocks.Logical.Greater
                                           greaterThreshold
                annotation (Placement(transformation(extent={{4,-30},{18,-14}})));
              Modelica.Blocks.Logical.Pre pre1
                annotation (Placement(transformation(extent={{-54,-28},{-42,-16}})));
              Modelica.Blocks.MathInteger.TriggeredAdd triggeredAdd(
                use_reset=true,
                use_set=false,
                y_start=0)
                          "See info of model for description"
                annotation (Placement(transformation(extent={{-20,22},{-8,34}})));
              Modelica.Blocks.Sources.IntegerConstant intConPluOne(final k=1)
                "Value for counting"
                annotation (Placement(transformation(extent={{-44,22},{-32,34}})));
              Modelica.Blocks.Math.IntegerToReal intToReal "Converts Integer to Real"
                annotation (Placement(transformation(extent={{2,22},{14,34}})));
              Modelica.Blocks.Logical.LessThreshold    lessThreshold(final threshold=1)
                "Checks if value is less than one"
                annotation (Placement(transformation(extent={{26,18},{46,38}})));

              Modelica.Blocks.Sources.BooleanExpression triggerControl(y=((time - t1) >
                    triggerEvery))
                annotation (Placement(transformation(extent={{-48,-6},{-28,14}})));

              Modelica.Blocks.Logical.Not not2
                annotation (Placement(transformation(extent={{60,-56},{72,-44}})));

              Modelica.Blocks.Sources.RealExpression realExpression(y=minTimeAntLeg)
                annotation (Placement(transformation(extent={{-30,-58},{-10,-38}})));
              Modelica.Blocks.Logical.And and1
                annotation (Placement(transformation(extent={{78,-64},{90,-52}})));
              Modelica.Blocks.Sources.BooleanConstant booleanConstant(final k=
                    aux_for_desinfection)
                "Temperature at which the legionella in DWH dies"
                annotation (Placement(transformation(extent={{54,-92},{72,-74}})));
            protected
              Modelica.Units.SI.Time t1 "Helper variable for control";
              Modelica.Units.NonSI.Temperature_degC TLegMinDegC=TLegMin - 273.15;
              Modelica.Blocks.Tables.CombiTable1Dv fitMinLegTime(table=[45.5505451608561,
                    62.916073325099134; 48.78942881500426,7.736506444512433;
                    51.23771705478529,1.7687971042538275; 53.542872526585,
                    0.47986000155581393; 55.85049580472921,0.16470935490617822;
                    58.450217615650374,0.07001663558934895; 62.20891102436398,
                    0.028517297027731203; 65.03006236819671,0.017814514615367875;
                    68.72055458338941,0.010893105323934898; 73.06411809575089,
                    0.007255730019232521; 75.88841028402207,0.006114735966220416;
                    78.13366536545968,0.005494625286920662], u={TLegMinDegC});

            algorithm
              when greaterThreshold.y then
                t1 := time;
              end when;
            equation
              connect(switchTLeg.u3, constTLegMin.y) annotation (Line(points={{62.6,-4.6},{52,
                      -4.6},{52,-75},{-69.1,-75}},color={0,0,127}));
              connect(switchTLeg.y, TSet_DHW) annotation (Line(points={{78.7,1},{92,1},{92,0},
                      {110,0}},            color={0,0,127}));
              connect(const.y, switchTLeg.u1) annotation (Line(points={{15,88},{56,88},{56,6.6},
                      {62.6,6.6}},        color={0,0,127}));
              connect(timeAntiLeg.u,pre1. y)
                annotation (Line(points={{-32,-22},{-41.4,-22}},
                                                             color={255,0,255}));
              connect(TConLessTLegMin.y,pre1. u)
                annotation (Line(points={{-59,-22},{-55.2,-22}},
                                                             color={255,0,255}));
              connect(greaterThreshold.y,triggeredAdd. reset) annotation (Line(points={{18.7,
                      -22},{22,-22},{22,12},{-10.4,12},{-10.4,20.8}},color={255,0,255}));
              connect(intToReal.u,triggeredAdd. y)
                annotation (Line(points={{0.8,28},{-6.8,28}}, color={255,127,0}));
              connect(intConPluOne.y,triggeredAdd. u)
                annotation (Line(points={{-31.4,28},{-22.4,28}}, color={255,127,0}));
              connect(intToReal.y,lessThreshold. u) annotation (Line(points={{14.6,28},{24,28}},
                                            color={0,0,127}));
              connect(constTLegMin.y, TConLessTLegMin.u2) annotation (Line(points={{-69.1,-75},
                      {-50,-75},{-50,-50},{-100,-50},{-100,-30},{-82,-30}}, color={0,0,127}));
              connect(sigBusDistr.TStoDHWBotMea, TConLessTLegMin.u1) annotation (Line(
                  points={{-100,-1},{-94,-1},{-94,-22},{-82,-22}},
                  color={255,204,51},
                  thickness=0.5), Text(
                  string="%first",
                  index=-1,
                  extent={{-6,3},{-6,3}},
                  horizontalAlignment=TextAlignment.Right));
              connect(lessThreshold.y, switchTLeg.u2) annotation (Line(points={{47,28},{52,28},
                      {52,1},{62.6,1}}, color={255,0,255}));
              connect(triggerControl.y, triggeredAdd.trigger) annotation (Line(points={{-27,
                      4},{-17.6,4},{-17.6,20.8}}, color={255,0,255}));
              connect(lessThreshold.y, not2.u) annotation (Line(points={{47,28},{48,28},{48,
                      -50},{58.8,-50}}, color={255,0,255}));
              connect(timeAntiLeg.y, greaterThreshold.u1)
                annotation (Line(points={{-9,-22},{2.6,-22}}, color={0,0,127}));
              connect(realExpression.y, greaterThreshold.u2) annotation (Line(points={{-9,-48},
                      {-9,-38},{2.6,-38},{2.6,-28.4}}, color={0,0,127}));
              connect(not2.y, and1.u1) annotation (Line(points={{72.6,-50},{74,-50},{74,-58},
                      {76.8,-58}}, color={255,0,255}));
              connect(y, and1.y)
                annotation (Line(points={{110,-58},{90.6,-58}}, color={255,0,255}));
              connect(booleanConstant.y, and1.u2) annotation (Line(points={{72.9,-83},{80,
                      -83},{80,-62.8},{76.8,-62.8}}, color={255,0,255}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                        Rectangle(
                      extent={{-100,99.5},{100,-100}},
                      lineColor={175,175,175},
                      lineThickness=0.5,
                      fillPattern=FillPattern.Solid,
                      fillColor={255,255,170}),
                    Ellipse(extent={{-80,98},{80,-62}}, lineColor={160,160,164},
                      fillColor={215,215,215},
                      fillPattern=FillPattern.Solid),
                    Line(points={{0,98},{0,78}}, color={160,160,164}),
                    Line(points={{80,18},{60,18}},
                                                 color={160,160,164}),
                    Line(points={{0,-62},{0,-42}}, color={160,160,164}),
                    Line(points={{-80,18},{-60,18}},
                                                   color={160,160,164}),
                    Line(points={{37,88},{26,68}}, color={160,160,164}),
                    Line(points={{70,56},{49,44}}, color={160,160,164}),
                    Line(points={{71,-19},{52,-9}},  color={160,160,164}),
                    Line(points={{39,-52},{29,-33}}, color={160,160,164}),
                    Line(points={{-39,-52},{-29,-34}}, color={160,160,164}),
                    Line(points={{-71,-19},{-50,-8}},  color={160,160,164}),
                    Line(points={{-71,55},{-54,46}}, color={160,160,164}),
                    Line(points={{-38,88},{-28,69}}, color={160,160,164}),
                    Line(
                      points={{0,18},{-50,68}},
                      thickness=0.5),
                    Line(
                      points={{0,18},{40,18}},
                      thickness=0.5),
                    Line(
                      points={{0,18},{0,86}},
                      thickness=0.5,
                      color={238,46,47}),
                    Line(
                      points={{0,18},{-18,-14}},
                      thickness=0.5,
                      color={238,46,47}),
                    Text(
                      extent={{-14,0},{72,-36}},
                      lineColor={238,46,47},
                      lineThickness=0.5,
                      textString=DynamicSelect("%TLegMin K", String(TLegMin-273.15)+ "°C")),
                    Text(
                      extent={{-94,0},{56,-154}},
                      lineColor={28,108,200},
                      textString="Day of week: %trigWeekDay
Hour of Day: %trigHour",
                      horizontalAlignment=TextAlignment.Left),
                    Text(
                      extent={{-104,146},{100,92}},
                      lineColor={28,108,200},
                      textString="%name")}),                                                           Diagram(graphics,
                    coordinateSystem(preserveAspectRatio=false)),
                Documentation(info="<html>
<p>This model represents the anti legionella control of a real heat pump. Based on a daily or weekly approach, the given supply temperature is raised above the minimal temperature required for the thermal desinfection (at least 60 &deg;C) for a given duration minTimeAntLeg.</p>
</html>",             revisions="<html>
<ul>
<li>
<i>November 26, 2018&nbsp;</i> by Fabian Wüllhorst: <br/>
First implementation (see issue <a href=\"https://github.com/RWTH-EBC/IBPSA/issues/577\">#577</a>)
</li>
</ul>
</html>"));
            end AntiLegionellaControl;

            model ConstTSet_DHW "Constant DHW set temperature"
              extends BaseClasses.PartialTSet_DHW_Control;

              Modelica.Blocks.Sources.Constant const(final k=T_DHW)
                annotation (Placement(transformation(extent={{-18,-22},{28,24}})));

              Modelica.Blocks.Sources.BooleanConstant
                                               booleanConstant(final k=false)
                annotation (Placement(transformation(extent={{38,-66},{60,-48}})));
            equation
              connect(const.y, TSet_DHW) annotation (Line(points={{30.3,1},{68.15,1},{68.15,
                      0},{110,0}}, color={0,0,127}));
              connect(booleanConstant.y, y) annotation (Line(points={{61.1,-57},{86.15,-57},
                      {86.15,-58},{110,-58}}, color={255,0,255}));
              annotation (Icon(graphics={
                    Polygon(
                      points={{-80,90},{-86,68},{-74,68},{-80,90}},
                      lineColor={95,95,95},
                      fillColor={95,95,95},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-80,68},{-80,-80}}, color={95,95,95}),
                    Line(
                      points={{-80,0},{80,0}},
                      color={0,0,255},
                      thickness=0.5),
                    Polygon(
                      points={{90,-70},{68,-64},{68,-76},{90,-70}},
                      lineColor={95,95,95},
                      fillColor={95,95,95},
                      fillPattern=FillPattern.Solid),
                    Text(
                      extent={{70,-80},{94,-100}},
                      textString="time"),
                    Line(points={{-90,-70},{82,-70}}, color={95,95,95})}));
            end ConstTSet_DHW;

            package BaseClasses "Package with base classes for IBPSA.Controls.HeatPump.SecurityControls"

              partial model PartialTSet_DHW_Control "Model to output the dhw set temperature"
                parameter Modelica.Media.Interfaces.Types.Temperature T_DHW
                  "Constant TSet DHW output value";
                Modelica.Blocks.Interfaces.RealOutput TSet_DHW
                  annotation (Placement(transformation(extent={{100,-10},{120,10}})));
                Systems.Hydraulical.Interfaces.DistributionControlBus sigBusDistr
                  "Necessary to control DHW temperatures" annotation (Placement(
                      transformation(extent={{-114,-14},{-86,12}})));
                Modelica.Blocks.Interfaces.BooleanOutput
                                                y "Set auxilliar heater to true"
                  annotation (Placement(transformation(extent={{100,-68},{120,-48}})));
                annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                      Rectangle(
                        extent={{-100,100},{100,-100}},
                        lineColor={0,0,0},
                        fillColor={215,215,215},
                        fillPattern=FillPattern.Solid,
                        lineThickness=0.5), Text(
                        extent={{-128,28},{124,-18}},
                        lineColor={28,108,200},
                        lineThickness=1,
                        textString="%name")}),                                 Diagram(graphics,
                      coordinateSystem(preserveAspectRatio=false)));
              end PartialTSet_DHW_Control;
            annotation (Icon(graphics={
                    Rectangle(
                      lineColor={200,200,200},
                      fillColor={248,248,248},
                      fillPattern=FillPattern.HorizontalCylinder,
                      extent={{-100.0,-100.0},{100.0,100.0}},
                      radius=25.0),
                    Rectangle(
                      lineColor={128,128,128},
                      extent={{-100.0,-100.0},{100.0,100.0}},
                      radius=25.0),
                    Ellipse(
                      extent={{-30.0,-30.0},{30.0,30.0}},
                      lineColor={128,128,128},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid)}), Documentation(revisions="<html>
<ul>
<li>
<i>November 26, 2018&nbsp;</i> by Fabian Wüllhorst: <br/>
First implementation (see issue <a href=\"https://github.com/RWTH-EBC/IBPSA/issues/577\">#577</a>)
</li>
</ul>
</html>",             info="<html>
<p>This package contains base classes that are used to construct the models in <a href=\"modelica://IBPSA.Controls.HeatPump.SecurityControls\">SecurityControls</a></p>
</html>"));
            end BaseClasses;
          annotation (Documentation(revisions="<html>
<ul>
<li>
<i>November 26, 2018&nbsp;</i> by Fabian Wüllhorst: <br/>
First implementation (see issue <a href=\"https://github.com/RWTH-EBC/IBPSA/issues/577\">#577</a>)
</li>
</ul>
</html>",           info="<html>
<p>Package with models for simulation of heat pump relevant security control strategies.</p>
</html>"));
          end DHWSetControl;

          package ThermostaticValveController

            model ThermostaticValvePControlled
             extends BaseClasses.PartialThermostaticValveController;

             parameter Real Kvs[nZones]=fill(1.2, nZones)   "Kv value at full opening (=1)";
             parameter Real Kv_setT[nZones]=fill(1.4, nZones)
                "Kv value when set temperature = measured temperature";
             parameter Real P[nZones] = fill(2, nZones) "Deviation of P-controller when valve is closed";

            equation
              for i in 1:nZones loop
                //Calculating the valve opening depending on the temperature deviation
                opening[i] =min(1, max(leakageOpening, (P[i] -TZoneMea [i] -TZoneSet
                          [i])*(Kv_setT[i]/Kvs[i])/P[i]));
              end for;
              annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Line(points={{-82,-82},{-82,-22},{-82,0},{74,0}},  color={0,0,127}),
                    Polygon(
                      points={{88,-82},{66,-74},{66,-90},{88,-82}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-92,-82},{80,-82}}, color={192,192,192}),
                    Line(points={{-82,76},{-82,-92}}, color={192,192,192}),
                    Polygon(
                      points={{-82,88},{-90,66},{-74,66},{-82,88}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid)}),                      Diagram(graphics,
                    coordinateSystem(preserveAspectRatio=false)));
            end ThermostaticValvePControlled;

            model ThermostaticValvePIControlled
              extends BaseClasses.PartialThermostaticValveController;

              parameter Real k[nZones]=fill(0.2, nZones)
                                 "Gain of controller";
              parameter Modelica.Units.SI.Time Ti[nZones]=fill(1800, nZones)
                "Time constant of Integrator block";
              Modelica.Blocks.Continuous.LimPID PI[nZones](
                each final controllerType=Modelica.Blocks.Types.SimpleController.PI,
                final k=k,
                final Ti=Ti,
                each final yMax=1,
                each final yMin=leakageOpening)
                annotation (Placement(transformation(extent={{-10,-10},{10,10}})));

            equation
              connect(TZoneMea, PI.u_m) annotation (Line(points={{-120,60},{-54,60},{-54,
                      -26},{0,-26},{0,-12}}, color={0,0,127}));
              connect(PI.y, opening)
                annotation (Line(points={{11,0},{120,0}}, color={0,0,127}));
              connect(TZoneSet, PI.u_s) annotation (Line(points={{-120,-60},{-40,-60},{-40,
                      0},{-12,0}}, color={0,0,127}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Polygon(
                      points={{-80,90},{-88,68},{-72,68},{-80,90}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
                    Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
                    Polygon(
                      points={{90,-80},{68,-72},{68,-88},{90,-80}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-80,-80},{-80,-20},{-80,-20},{52,80}},
                                                                       color={0,0,127})}),
                                                                             Diagram(graphics,
                    coordinateSystem(preserveAspectRatio=false)));
            end ThermostaticValvePIControlled;

            package BaseClasses

              partial model PartialThermostaticValveController
               parameter Integer nZones(min=1) "Number of zones";
               parameter Real leakageOpening = 0.0001
                  "may be useful for simulation stability. Always check the influence it has on your results";

                Modelica.Blocks.Interfaces.RealInput TZoneMea[nZones]
                  annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
                Modelica.Blocks.Interfaces.RealOutput opening[nZones]
                  annotation (Placement(transformation(extent={{100,-20},{140,20}})));
                Modelica.Blocks.Interfaces.RealInput TZoneSet[nZones]
                  annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
                annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                      Rectangle(
                        extent={{-100,100},{100,-100}},
                        lineColor={0,0,0},
                        fillColor={215,215,215},
                        fillPattern=FillPattern.Solid,
                        lineThickness=0.5)}),                                  Diagram(graphics,
                      coordinateSystem(preserveAspectRatio=false)));
              end PartialThermostaticValveController;
            end BaseClasses;
          end ThermostaticValveController;

          package Tests
          extends Modelica.Icons.ExamplesPackage;
            model OnOffControllerTest
              extends Modelica.Icons.Example;

              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ConstantHysteresis
                constantHysteresis annotation (Placement(transformation(extent=
                        {{-28,42},{16,82}})));
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.DegreeMinuteController
                degreeMinuteController(DegreeMinuteReset=100) annotation (
                  Placement(transformation(
                    extent={{-21,-20},{21,20}},
                    rotation=0,
                    origin={-5,2})));
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.FloatingHysteresis
                floatingHysteresis(Hysteresis_max=15, Hysteresis_min=2)
                annotation (Placement(transformation(extent={{-26,-76},{16,-38}})));
              Modelica.Blocks.Sources.Constant T_Set(k=323.15)
                annotation (Placement(transformation(extent={{-160,-20},{-124,16}})));
              Modelica.Blocks.Sources.Sine T_Top(
                amplitude=30,
                f=1/3600,
                offset=313.15)
                annotation (Placement(transformation(extent={{-160,44},{-122,82}})));
              Modelica.Blocks.Sources.Constant T_Set1(k=273.15)
                annotation (Placement(transformation(extent={{-152,-90},{-116,-54}})));
            equation
              connect(T_Set.y, degreeMinuteController.T_Set) annotation (Line(points={{-122.2,
                      -2},{-106,-2},{-106,0},{-70,0},{-70,-28},{-5,-28},{-5,-20}},
                             color={0,0,127}));
              connect(T_Set.y, floatingHysteresis.T_Set) annotation (Line(points={{-122.2,
                      -2},{-86,-2},{-86,-94},{-5,-94},{-5,-77.9}},       color={0,0,127}));
              connect(T_Set.y, constantHysteresis.T_Set) annotation (Line(points={{-122.2,
                      -2},{-112,-2},{-112,-4},{-80,-4},{-80,32},{-6,32},{-6,40}},
                    color={0,0,127}));
              connect(T_Top.y, constantHysteresis.T_Top) annotation (Line(points={{-120.1,
                      63},{-44,63},{-44,76},{-30.2,76}}, color={0,0,127}));
              connect(T_Top.y, constantHysteresis.T_bot) annotation (Line(points={{-120.1,
                      63},{-72,63},{-72,40},{-44,40},{-44,52},{-30.2,52}}, color={0,0,127}));
              connect(T_Top.y, degreeMinuteController.T_Top) annotation (Line(points={{-120.1,
                      63},{-96,63},{-96,16},{-28.1,16}},        color={0,0,127}));
              connect(T_Top.y, degreeMinuteController.T_bot) annotation (Line(points={{-120.1,
                      63},{-88,63},{-88,-8},{-28.1,-8}},            color={0,0,127}));
              connect(T_Top.y, floatingHysteresis.T_Top) annotation (Line(points={{-120.1,
                      63},{-92,63},{-92,-43.7},{-28.1,-43.7}},   color={0,0,127}));
              connect(T_Top.y, floatingHysteresis.T_bot) annotation (Line(points={{-120.1,
                      63},{-90,63},{-90,-66.5},{-28.1,-66.5}},   color={0,0,127}));
              connect(T_Set1.y, floatingHysteresis.T_oda) annotation (Line(points={{-114.2,
                      -72},{-60.1,-72},{-60.1,-35.72},{-5,-35.72}}, color={0,0,127}));
              connect(T_Set1.y, degreeMinuteController.T_oda) annotation (Line(points={{
                      -114.2,-72},{-58,-72},{-58,24.4},{-5,24.4}}, color={0,0,127}));
              connect(T_Set1.y, constantHysteresis.T_oda) annotation (Line(points={{-114.2,
                      -72},{-60,-72},{-60,84.4},{-6,84.4}}, color={0,0,127}));
              annotation (Icon(graphics,
                               coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                    coordinateSystem(preserveAspectRatio=false)),
                experiment(StopTime=86400, Interval=1));
            end OnOffControllerTest;
          end Tests;

          package OnOffController "Package for models of simple on off controls"

            package BaseClasses
              partial model PartialOnOffController "Partial model for an on off controller"
                Modelica.Blocks.Interfaces.RealInput T_Top
                  "Top layer temperature of the storage in distribution system"
                  annotation (Placement(transformation(extent={{-140,40},{-100,80}}),
                      iconTransformation(extent={{-120,60},{-100,80}})));
                Modelica.Blocks.Interfaces.BooleanOutput HP_On(start=true)
                  "Turn the main the device of a HPS, the HP on or off" annotation (Placement(
                      transformation(extent={{100,50},{120,70}}), iconTransformation(extent={
                          {100,56},{128,84}})));
                Modelica.Blocks.Interfaces.RealInput T_Set "Set point temperature"
                  annotation (Placement(transformation(
                        extent={{-20,-20},{20,20}},
                      rotation=90,
                      origin={0,-118}),                  iconTransformation(extent={{-10,-10},{10,10}},
                      rotation=90,
                      origin={0,-110})));
                Modelica.Blocks.Interfaces.RealInput T_bot
                  "Supply temperature of the lower layers of the storage. Does not have to be the lowest layer, depending on comfort even the top may be selected"
                  annotation (Placement(transformation(extent={{-140,-80},{-100,-40}}),
                      iconTransformation(extent={{-120,-60},{-100,-40}})));
                Modelica.Blocks.Interfaces.BooleanOutput Auxilliar_Heater_On(start=true)
                  "Turn the auxilliar heater (most times a heating rod) on or off"
                  annotation (Placement(transformation(extent={{100,-70},{120,-50}}),
                      iconTransformation(extent={{100,-64},{128,-36}})));
                Modelica.Blocks.Interfaces.RealInput T_oda "Ambient air temperature"
                  annotation (Placement(transformation(
                      extent={{-20,-20},{20,20}},
                      rotation=270,
                      origin={0,120}), iconTransformation(
                      extent={{-10,-10},{10,10}},
                      rotation=270,
                      origin={0,112})));
                Modelica.Blocks.Interfaces.RealOutput    Auxilliar_Heater_set(start=1)
                  "Setpoint of the auxilliar heater"
                  annotation (Placement(transformation(extent={{100,-90},{120,-70}}),
                      iconTransformation(extent={{100,-100},{128,-72}})));
                annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                      Rectangle(
                        extent={{-100,100},{100,-100}},
                        lineColor={0,0,0},
                        fillColor={215,215,215},
                        fillPattern=FillPattern.Solid,
                        lineThickness=0.5)}), Diagram(graphics,
                                                      coordinateSystem(preserveAspectRatio=
                          false)));
              end PartialOnOffController;
            annotation (Icon(graphics={
                    Rectangle(
                      lineColor={200,200,200},
                      fillColor={248,248,248},
                      fillPattern=FillPattern.HorizontalCylinder,
                      extent={{-100.0,-100.0},{100.0,100.0}},
                      radius=25.0),
                    Rectangle(
                      lineColor={128,128,128},
                      extent={{-100.0,-100.0},{100.0,100.0}},
                      radius=25.0),
                    Ellipse(
                      extent={{-30.0,-30.0},{30.0,30.0}},
                      lineColor={128,128,128},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid)}));
            end BaseClasses;

            model ConstantHysteresis
              "On-Off controller with a constant hysteresis"
              extends BaseClasses.PartialOnOffController;

              parameter Modelica.Units.SI.TemperatureDifference Hysteresis=10;
              parameter Modelica.Units.SI.Time dt_hr=20*60
                "Seconds for regulation when hr should be activated: If lower set temperature is hurt for more than this time period";

              /******************************* Variables *******************************/

              Modelica.Units.SI.Time t1(start=0) "Helper variable for hr algorithm";

            algorithm

               // For initialisation: activate both systems
               //when time > 1 then
               //  HP_On := true;
               //  Auxilliar_Heater_On :=true;
               //end when;

               // When upper temperature of storage tank is lower than lower hysteresis value, activate hp
               when T_Top < T_Set - Hysteresis/2 then
                 HP_On := true;
                 t1 :=time; // Start activation counter
               end when;
               // When second / lower temperature of storage tank is higher than upper hysteresis, deactivate hp
               when T_bot > T_Set + Hysteresis/2 then
                 HP_On := false;
                 Auxilliar_Heater_On := false;
                 Auxilliar_Heater_set := 0;
               end when;

               // Activate hr in case temperature is below lower hysteresis and critical time period is passed
               when (T_Top < T_Set - Hysteresis/2) and time > (t1 + dt_hr) and HP_On then
                 Auxilliar_Heater_On :=true;
                 Auxilliar_Heater_set := 1;
               end when;

              annotation (Icon(graphics={     Polygon(
                        points={{-65,89},{-73,67},{-57,67},{-65,89}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),Line(points={{-65,67},{-65,-81}},
                      color={192,192,192}),Line(points={{-90,-70},{82,-70}}, color={192,
                      192,192}),Polygon(
                        points={{90,-70},{68,-62},{68,-78},{90,-70}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),
                                        Text(
                        extent={{-65,93},{-12,75}},
                        lineColor={160,160,164},
                        textString="y"),Line(
                        points={{-80,-70},{30,-70}},
                        thickness=0.5),Line(
                        points={{-50,10},{80,10}},
                        thickness=0.5),Line(
                        points={{-50,10},{-50,-70}},
                        thickness=0.5),Line(
                        points={{30,10},{30,-70}},
                        thickness=0.5),Line(
                        points={{-10,-65},{0,-70},{-10,-75}},
                        thickness=0.5),Line(
                        points={{-10,15},{-20,10},{-10,5}},
                        thickness=0.5),Line(
                        points={{-55,-20},{-50,-30},{-44,-20}},
                        thickness=0.5),Line(
                        points={{25,-30},{30,-19},{35,-30}},
                        thickness=0.5),Text(
                        extent={{-99,2},{-70,18}},
                        lineColor={160,160,164},
                        textString="true"),Text(
                        extent={{-98,-87},{-66,-73}},
                        lineColor={160,160,164},
                        textString="false"),Text(
                        extent={{19,-87},{44,-70}},
                        lineColor={0,0,0},
                        textString="uHigh"),Text(
                        extent={{-63,-88},{-38,-71}},
                        lineColor={0,0,0},
                        textString="uLow"),Line(points={{-69,10},{-60,10}}, color={160,
                      160,164})}));
            end ConstantHysteresis;

            model DegreeMinuteController
              "OnOff controller based on degree minute approach"
              extends BaseClasses.PartialOnOffController;

              parameter Real DegreeMinute_HP_on(unit="K.min")=-60 "Degree minute when HP is turned on";
              parameter Real DegreeMinute_HP_off(unit="K.min")=0 "Degree minute when HP is turned off";
              parameter Real DegreeMinute_AuxHeater_on(unit="K.min")=-600 "Degree minute when auxilliar heater is turned on";
              parameter Real DegreeMinuteReset(unit="K.min")=300 "Degree minute when the value is reset. Value based on additional paper, to avoid errors in summer periods";
              parameter Modelica.Units.SI.TemperatureDifference delta_T_AuxHeater_off=1
                "Temperature difference when to turn off the auxilliar heater";
              parameter Modelica.Units.SI.TemperatureDifference delta_T_reset=10
                "Temperature difference when to reset the sum to 0";

              Real DegreeMinute(start=0) "Current degree minute value";
              Modelica.Units.SI.TemperatureDifference delta_T=T_Top - T_Set;

            algorithm
              when DegreeMinute < DegreeMinute_HP_on then
                HP_On := true;
              end when;

              when DegreeMinute > DegreeMinute_HP_off then
                HP_On := false;
              end when;

              when DegreeMinute < DegreeMinute_AuxHeater_on then
                Auxilliar_Heater_On := true;
                Auxilliar_Heater_set := 1;
              end when;

              when delta_T > delta_T_AuxHeater_off then
                Auxilliar_Heater_On := false;
                Auxilliar_Heater_set := 0;
              end when;

            equation
              // TODO: Check why the simple hys wont work?!
              //HP_On = (not pre(HP_On) and DegreeMinute > DegreeMinute_HP_on) or (pre(HP_On) and DegreeMinute < DegreeMinute_HP_off);
              //Auxilliar_Heater_On = (not pre(Auxilliar_Heater_On) and DegreeMinute > DegreeMinute_AuxHeater_on) or (pre(Auxilliar_Heater_On) and delta_T < delta_T_AuxHeater_off);
              der(DegreeMinute) = delta_T /60;
              when (delta_T > delta_T_reset) then
                reinit(DegreeMinute, 0);
              elsewhen (DegreeMinute > DegreeMinuteReset) then
                reinit(DegreeMinute, 0);
              end when;
              annotation (Icon(graphics={Text(
                      extent={{-44,58},{40,-60}},
                      lineColor={0,0,0},
                      textString="°C
_______

 minute")}),             Documentation(info="<html>
<p style=\"margin-left: 30px;\">The method is based on the following paper: https://www.sciencedirect.com/science/article/abs/pii/S037877881300282X</p>
<p><br>&bull; Turn on the heat pump when the sum is lower than &minus;60 degree&ndash;minute.</p>
<p>&bull; Turn off the heat pump when the sum goes back to 0 degree&ndash;minute.</p>
<p>&bull; Turn on the electrical auxiliary heater when the sum is lower than &minus;600 degree&ndash;minute.</p>
<p>&bull; Turn off the electrical auxiliary heater when the supply temperature is 1 K higher than the required temperature.</p>
<p>&bull; Reset the sum to zero whenever the supply temperature is 10 K higher than the required temperature.</p>
</html>"));
            end DegreeMinuteController;

            model FloatingHysteresis
              "OnOff controller based on the theory of floating hysteresis"
              extends BaseClasses.PartialOnOffController;

              parameter Modelica.Units.SI.TemperatureDifference Hysteresis_max=10
                "Maximum hysteresis";
              parameter Modelica.Units.SI.TemperatureDifference Hysteresis_min=10
                "Minimum hysteresis";
              parameter Modelica.Units.SI.Time time_factor=20
                "The time which should be spent to have the floating hysteresis equal to the average of maximum and minimum hysteresis.";
              parameter Modelica.Units.SI.Time dt_hr=20*60
                "Seconds for regulation when hr should be activated: If lower set temperature is hurt for more than this time period";

              /******************************* Variables *******************************/

              Modelica.Units.SI.Time t1(start=0) "Helper variable for hr algorithm";
              Modelica.Units.SI.TemperatureDifference Hysteresis_floating=Hysteresis_min +
                  (Hysteresis_max - Hysteresis_min)/(1 + (t1/time_factor));

            algorithm

               // For initialisation: activate both systems
               //when time > 1 then
               //  HP_On := true;
               //  Auxilliar_Heater_On :=true;
               //end when;

               // When upper temperature of storage tank is lower than lower hysteresis value, activate hp
               when T_Top < T_Set - Hysteresis_floating/2 then
                 HP_On := true;
                 t1 :=time; // Start activation counter
               end when;
               // When second / lower temperature of storage tank is higher than upper hysteresis, deactivate hp
               when T_bot > T_Set + Hysteresis_floating/2 then
                 HP_On := false;
                 Auxilliar_Heater_On := false;
                 Auxilliar_Heater_set := 0;
               end when;

               // Activate hr in case temperature is below lower hysteresis and critical time period is passed
               when (T_Top < T_Set - Hysteresis_floating/2) and time > (t1 + dt_hr) and HP_On then
                 Auxilliar_Heater_On :=true;
                 Auxilliar_Heater_set := 1;
               end when;

              annotation (Icon(graphics={
                                       Line(
                        points={{-50,48},{80,48}},
                        thickness=0.5),Line(
                        points={{-10,53},{-20,48},{-10,43}},
                        thickness=0.5),Line(
                        points={{25,8},{30,19},{35,8}},
                        thickness=0.5),Line(
                        points={{30,48},{30,-32}},
                        thickness=0.5),Line(
                        points={{-10,-27},{0,-32},{-10,-37}},
                        thickness=0.5), Line(
                        points={{-80,-32},{30,-32}},
                        thickness=0.5),Line(
                        points={{-50,48},{-50,-32}},
                        thickness=0.5),Line(
                        points={{-55,18},{-50,8},{-44,18}},
                        thickness=0.5),Text(
                        extent={{-99,40},{-70,56}},
                        lineColor={160,160,164},
                        textString="true"),Text(
                        extent={{-98,-49},{-66,-35}},
                        lineColor={160,160,164},
                        textString="false"),           Line(points={{-64,86},{-65,-43}},
                      color={192,192,192}),Line(points={{-69,48},{-60,48}}, color={160,
                      160,164}),Polygon(
                        points={{90,-32},{68,-24},{68,-40},{90,-32}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),
                                           Line(points={{-90,-32},{82,-32}}, color={192,
                      192,192}),            Text(
                        extent={{19,-49},{44,-32}},
                        lineColor={0,0,0},
                        textString="uHigh"),Text(
                        extent={{-63,-50},{-38,-33}},
                        lineColor={0,0,0},
                        textString="uLow"),
                                Polygon(
                        points={{11,0},{-11,8},{-11,-8},{11,0}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid,
                      origin={-65,84},
                      rotation=90),         Text(
                        extent={{-87,-84},{84,-54}},
                        lineColor={0,0,0},
                      textString="uLow, uHigh=f(h_max, h_min, time)")}));
            end FloatingHysteresis;

            block StorageHysteresis "On-off controller for a storage control. "
              extends Modelica.Blocks.Icons.PartialBooleanBlock;
              Modelica.Blocks.Interfaces.RealInput T_set "Set temperature"
                annotation (Placement(transformation(extent={{-140,100},{-100,60}})));
              Modelica.Blocks.Interfaces.RealInput T_top
                "Connector of Real input signal used as measurement signal of upper level storage temperature"
                annotation (Placement(transformation(extent={{-140,20},{-100,-20}})));
              Modelica.Blocks.Interfaces.BooleanOutput y
                "Connector of Real output signal used as actuator signal"
                annotation (Placement(transformation(extent={{100,-10},{120,10}})));

              parameter Real bandwidth(start=0.1) "Bandwidth around reference signal";
              parameter Boolean pre_y_start=false "Value of pre(y) at initial time";

              Modelica.Blocks.Interfaces.RealInput T_bot
                "Connector of Real input signal used as measurement signal of bottom temperature of storage"
                annotation (Placement(transformation(extent={{-140,-60},{-100,-100}})));
            initial equation
              pre(y) = pre_y_start;
            equation
              y = pre(y) and (T_bot < T_set + bandwidth/2) or (T_top < T_set - bandwidth/2);
              annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,
                        -100},{100,100}}), graphics={
                    Text(
                      extent={{-92,74},{44,44}},
                      textString="reference"),
                    Text(
                      extent={{-94,-52},{-34,-74}},
                      textString="u"),
                    Line(points={{-76,-32},{-68,-6},{-50,26},{-24,40},{-2,42},{16,36},{32,28},{48,12},{58,-6},{68,-28}},
                      color={0,0,127}),
                    Line(points={{-78,-2},{-6,18},{82,-12}},
                      color={255,0,0}),
                    Line(points={{-78,12},{-6,30},{82,0}}),
                    Line(points={{-78,-16},{-6,4},{82,-26}}),
                    Line(points={{-82,-18},{-56,-18},{-56,-40},{64,-40},{64,-20},{90,-20}},
                      color={255,0,255})}), Documentation(info="<html>
<p>The block StorageHysteresis sets the output signal <b>y</b> to <b>true</b> when the input signal <b>T_top</b> falls below the <b>T_set</b> signal minus half of the bandwidth and sets the output signal <b>y</b> to <b>false</b> when the input signal <b>T_bot</b> exceeds the <b>T_set</b> signal plus half of the bandwidth.</p>
<p>This control ensure that the whole storage has the required temperature. If you just want to control one layer, apply the same Temperature to both <b>T_top</b> and <b>T_bot</b>.</p>
</html>"));
            end StorageHysteresis;

            model AlternativeBivalentOnOffController "Controlls an alternative bivalent heat pump system with storages"
              extends BaseClasses.PartialOnOffController;
              StorageHysteresis storageHysteresis(final bandwidth=hysteresis, final
                  pre_y_start=true)
                annotation (Placement(transformation(extent={{-40,22},{0,62}})));
              Modelica.Blocks.Logical.GreaterEqualThreshold greaterEqualT_biv(threshold=
                    T_biv) annotation (Placement(transformation(extent={{20,80},{40,100}})));
              parameter Modelica.Units.SI.Temperature T_biv=271.15 "Bivalent temperature";
              Modelica.Blocks.Logical.And greaterEqualT_biv1
                annotation (Placement(transformation(extent={{60,60},{80,80}})));
              Modelica.Blocks.Logical.And greaterEqualT_biv2
                annotation (Placement(transformation(extent={{60,-60},{80,-40}})));
              Modelica.Blocks.Logical.Not greaterEqualT_biv3 annotation (Placement(
                    transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=270,
                    origin={50,-10})));
              parameter Real hysteresis=10 "Bandwidth around reference signal";
              Modelica.Blocks.Math.BooleanToReal
                                         or3(final realTrue=1, final realFalse=0)
                                             annotation (Placement(transformation(
                    extent={{-6,-6},{6,6}},
                    rotation=0,
                    origin={82,-80})));
            equation
              connect(T_Set, storageHysteresis.T_set) annotation (Line(points={{0,-118},{
                      -56,-118},{-56,58},{-44,58}},             color={0,0,127}));
              connect(T_Top, storageHysteresis.T_top) annotation (Line(points={{-120,60},{
                      -74,60},{-74,42},{-44,42}},
                                                color={0,0,127}));
              connect(T_bot, storageHysteresis.T_bot) annotation (Line(points={{-120,-60},{
                      -50,-60},{-50,26},{-44,26}},   color={0,0,127}));
              connect(T_oda, greaterEqualT_biv.u)
                annotation (Line(points={{0,120},{0,90},{18,90}}, color={0,0,127}));
              connect(HP_On, greaterEqualT_biv1.y) annotation (Line(points={{110,60},{96,60},
                      {96,70},{81,70}}, color={255,0,255}));
              connect(greaterEqualT_biv.y, greaterEqualT_biv1.u1) annotation (Line(points={
                      {41,90},{52,90},{52,70},{58,70}}, color={255,0,255}));
              connect(storageHysteresis.y, greaterEqualT_biv1.u2) annotation (Line(points={
                      {2,42},{26.85,42},{26.85,62},{58,62}}, color={255,0,255}));
              connect(Auxilliar_Heater_On, greaterEqualT_biv2.y) annotation (Line(points={{
                      110,-60},{96,-60},{96,-50},{81,-50}}, color={255,0,255}));
              connect(greaterEqualT_biv.y, greaterEqualT_biv3.u)
                annotation (Line(points={{41,90},{50,90},{50,2}}, color={255,0,255}));
              connect(greaterEqualT_biv3.y, greaterEqualT_biv2.u1)
                annotation (Line(points={{50,-21},{50,-50},{58,-50}}, color={255,0,255}));
              connect(storageHysteresis.y, greaterEqualT_biv2.u2) annotation (Line(points={
                      {2,42},{28,42},{28,-58},{58,-58}}, color={255,0,255}));
              connect(Auxilliar_Heater_set, or3.y)
                annotation (Line(points={{110,-80},{88.6,-80}}, color={0,0,127}));
              connect(greaterEqualT_biv2.y, or3.u) annotation (Line(points={{81,-50},{82,
                      -50},{82,-70},{74.8,-70},{74.8,-80}}, color={255,0,255}));
            end AlternativeBivalentOnOffController;

            model ConstantHysteresisTimeBasedHR
              "On-Off controller with a constant hysteresis for a time-based hr control"
              extends
                BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.BaseClasses.PartialOnOffController;

              parameter Modelica.Units.SI.TemperatureDifference Hysteresis=10;
              parameter Modelica.Units.SI.Time dt_hr
                "Seconds for regulation when hr should be activated: If lower set temperature is hurt for more than this time period";
              parameter Real addSet_dt_hr=1 "Each time dt_hr passes, the output of the heating rod is increased by this amount in percentage. Maximum and default is 100 (on-off hr)%";

              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.StorageHysteresis
                storageHysteresis(final bandwidth=Hysteresis, final pre_y_start=
                   true) annotation (Placement(transformation(extent={{-58,18},
                        {-18,58}})));
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.Utilities.TriggerTime
                triggerTime annotation (Placement(transformation(extent={{-32,-88},
                        {-12,-68}})));
              Modelica.Blocks.Sources.RealExpression realExpression(y=min(floor((time -
                    triggerTime.y)/dt_hr)*addSet_dt_hr, 1))
                annotation (Placement(transformation(extent={{6,-70},{26,-50}})));
              Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=Modelica.Constants.eps)
                annotation (Placement(transformation(extent={{70,-68},{86,-52}})));

              Modelica.Blocks.Logical.Switch         switch1
                annotation (Placement(transformation(extent={{34,-86},{48,-72}})));
              Modelica.Blocks.Sources.Constant       const(final k=0)
                annotation (Placement(transformation(extent={{14,-98},{24,-88}})));
              Modelica.Blocks.Logical.OnOffController AuxilliarHeaterHys(bandwidth=
                    Hysteresis/2, pre_y_start=true)
                "Generates the on/off signal depending on the temperature inputs"
                annotation (Placement(transformation(extent={{-62,-70},{-42,-50}})));
              Modelica.Blocks.Math.Add               add1(k1=-1)
                annotation (Placement(transformation(extent={{-7,-7},{7,7}},
                    rotation=90,
                    origin={-69,-95})));
              Modelica.Blocks.Sources.Constant       const2(final k=Hysteresis/4)
                annotation (Placement(transformation(extent={{-98,-118},{-88,-108}})));
            equation
              connect(T_Top, storageHysteresis.T_top) annotation (Line(points={{-120,60},{
                      -86,60},{-86,38},{-62,38}},
                                              color={0,0,127}));
              connect(T_Set, storageHysteresis.T_set) annotation (Line(points={{0,-118},{0,
                      -20},{-80,-20},{-80,54},{-62,54}},
                                                    color={0,0,127}));
              connect(storageHysteresis.y, HP_On) annotation (Line(points={{-16,38},{30,38},
                      {30,60},{110,60}}, color={255,0,255}));
              connect(greaterThreshold.y, Auxilliar_Heater_On)
                annotation (Line(points={{86.8,-60},{110,-60}},
                                                              color={255,0,255}));
              connect(const.y, switch1.u3) annotation (Line(points={{24.5,-93},{28,-93},{28,
                      -84.6},{32.6,-84.6}}, color={0,0,127}));
              connect(switch1.y, Auxilliar_Heater_set) annotation (Line(points={{48.7,-79},
                      {70,-79},{70,-80},{110,-80}}, color={0,0,127}));
              connect(switch1.y, greaterThreshold.u) annotation (Line(points={{48.7,-79},{
                      56,-79},{56,-60},{68.4,-60}}, color={0,0,127}));
              connect(realExpression.y, switch1.u1) annotation (Line(points={{27,-60},{30,
                      -60},{30,-73.4},{32.6,-73.4}}, color={0,0,127}));
              connect(T_Top, storageHysteresis.T_bot) annotation (Line(points={{-120,60},{
                      -92,60},{-92,22},{-62,22}}, color={0,0,127}));
              connect(T_Top, AuxilliarHeaterHys.u) annotation (Line(points={{-120,60},{-92,
                      60},{-92,-66},{-64,-66}}, color={0,0,127}));
              connect(const2.y, add1.u1) annotation (Line(points={{-87.5,-113},{-74,-113},{
                      -74,-103.4},{-73.2,-103.4}}, color={0,0,127}));
              connect(add1.y, AuxilliarHeaterHys.reference) annotation (Line(points={{-69,
                      -87.3},{-69,-54},{-64,-54}}, color={0,0,127}));
              connect(T_Set, add1.u2) annotation (Line(points={{0,-118},{0,-104},{-20,-104},
                      {-20,-103.4},{-64.8,-103.4}}, color={0,0,127}));
              connect(AuxilliarHeaterHys.y, triggerTime.u) annotation (Line(points={{-41,-60},
                      {-38,-60},{-38,-78},{-34,-78}},      color={255,0,255}));
              connect(AuxilliarHeaterHys.y, switch1.u2) annotation (Line(points={{-41,-60},
                      {2,-60},{2,-79},{32.6,-79}},                     color={255,0,255}));
              annotation (Icon(graphics={     Polygon(
                        points={{-65,89},{-73,67},{-57,67},{-65,89}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),Line(points={{-65,67},{-65,-81}},
                      color={192,192,192}),Line(points={{-90,-70},{82,-70}}, color={192,
                      192,192}),Polygon(
                        points={{90,-70},{68,-62},{68,-78},{90,-70}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),
                                        Text(
                        extent={{-65,93},{-12,75}},
                        lineColor={160,160,164},
                        textString="y"),Line(
                        points={{-80,-70},{30,-70}},
                        thickness=0.5),Line(
                        points={{-50,10},{80,10}},
                        thickness=0.5),Line(
                        points={{-50,10},{-50,-70}},
                        thickness=0.5),Line(
                        points={{30,10},{30,-70}},
                        thickness=0.5),Line(
                        points={{-10,-65},{0,-70},{-10,-75}},
                        thickness=0.5),Line(
                        points={{-10,15},{-20,10},{-10,5}},
                        thickness=0.5),Line(
                        points={{-55,-20},{-50,-30},{-44,-20}},
                        thickness=0.5),Line(
                        points={{25,-30},{30,-19},{35,-30}},
                        thickness=0.5),Text(
                        extent={{-99,2},{-70,18}},
                        lineColor={160,160,164},
                        textString="true"),Text(
                        extent={{-98,-87},{-66,-73}},
                        lineColor={160,160,164},
                        textString="false"),Text(
                        extent={{19,-87},{44,-70}},
                        lineColor={0,0,0},
                        textString="uHigh"),Text(
                        extent={{-63,-88},{-38,-71}},
                        lineColor={0,0,0},
                        textString="uLow"),Line(points={{-69,10},{-60,10}}, color={160,
                      160,164})}));
            end ConstantHysteresisTimeBasedHR;

            model ParallelBivalentControl
              "Parallel bivalent control"
              extends
                BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.BaseClasses.PartialOnOffController;

              parameter Modelica.Units.SI.TemperatureDifference Hysteresis=10;
              parameter Modelica.Units.SI.Temperature TCutOff "Cut-off temperature";
              parameter Modelica.Units.SI.Temperature TBiv "Bivalence temperature";
              parameter Modelica.Units.SI.Temperature TOda_nominal "Nominal temperature ";
              parameter Modelica.Units.SI.Temperature TRoom "Room set temperature";
              parameter Modelica.Units.SI.HeatFlowRate QDem_flow_nominal;
              parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff;

              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.StorageHysteresis
                storageHysteresis(final bandwidth=Hysteresis, final pre_y_start=
                   true) annotation (Placement(transformation(extent={{-58,18},
                        {-18,58}})));

              Modelica.Blocks.Logical.GreaterEqualThreshold greaterEqualT_biv(threshold=
                    TCutOff)
                           annotation (Placement(transformation(extent={{12,54},{36,78}})));
              Modelica.Blocks.Logical.And and1
                annotation (Placement(transformation(extent={{60,46},{80,66}})));

            protected
              parameter Real phiBiv = (TRoom - TBiv)/(TRoom - TOda_nominal) "Part load at bivalence temperature";
              parameter Real partLoadHeaPumAtCutOff(min=0, max=1)=QHP_flow_cutOff/QDem_flow_nominal "Percentage of nominal heat demand supplied by heat pump at cut-off temperature";

              Real partLoadAuxHea = min(1, (TRoom - T_oda) / (TRoom - TOda_nominal));

            equation

              if T_oda < TCutOff then
                // Only auxilliar device is active
                Auxilliar_Heater_On = storageHysteresis.y;
                Auxilliar_Heater_set = partLoadAuxHea;
              elseif T_oda < TBiv then
                // Both devices are active
                Auxilliar_Heater_On = storageHysteresis.y;
                Auxilliar_Heater_set = max(0, partLoadAuxHea - (partLoadHeaPumAtCutOff  + (phiBiv - partLoadHeaPumAtCutOff)* (T_oda - TCutOff) / (TBiv - TCutOff)));
              else
                // Only heat pump is active
                Auxilliar_Heater_On = false;
                Auxilliar_Heater_set = 0;
              end if;

              connect(T_Top, storageHysteresis.T_top) annotation (Line(points={{-120,60},{-86,
                      60},{-86,38},{-62,38}}, color={0,0,127}));
              connect(T_Set, storageHysteresis.T_set) annotation (Line(points={{0,-118},{0,
                      -20},{-80,-20},{-80,54},{-62,54}},
                                                    color={0,0,127}));
              connect(T_Top, storageHysteresis.T_bot) annotation (Line(points={{-120,60},{
                      -92,60},{-92,22},{-62,22}}, color={0,0,127}));
              connect(greaterEqualT_biv.y, and1.u1) annotation (Line(points={{37.2,66},{42,66},
                      {42,56},{58,56}}, color={255,0,255}));
              connect(storageHysteresis.y, and1.u2) annotation (Line(points={{-16,38},{42,38},
                      {42,48},{58,48}}, color={255,0,255}));
              connect(and1.y, HP_On) annotation (Line(points={{81,56},{92,56},{92,60},{110,60}},
                    color={255,0,255}));
              connect(T_oda, greaterEqualT_biv.u)
                annotation (Line(points={{0,120},{0,66},{9.6,66}}, color={0,0,127}));
              annotation (Icon(graphics={     Polygon(
                        points={{-65,89},{-73,67},{-57,67},{-65,89}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),Line(points={{-65,67},{-65,-81}},
                      color={192,192,192}),Line(points={{-90,-70},{82,-70}}, color={192,
                      192,192}),Polygon(
                        points={{90,-70},{68,-62},{68,-78},{90,-70}},
                        lineColor={192,192,192},
                        fillColor={192,192,192},
                        fillPattern=FillPattern.Solid),
                                        Text(
                        extent={{-65,93},{-12,75}},
                        lineColor={160,160,164},
                        textString="y"),Line(
                        points={{-80,-70},{30,-70}},
                        thickness=0.5),Line(
                        points={{-50,10},{80,10}},
                        thickness=0.5),Line(
                        points={{-50,10},{-50,-70}},
                        thickness=0.5),Line(
                        points={{30,10},{30,-70}},
                        thickness=0.5),Line(
                        points={{-10,-65},{0,-70},{-10,-75}},
                        thickness=0.5),Line(
                        points={{-10,15},{-20,10},{-10,5}},
                        thickness=0.5),Line(
                        points={{-55,-20},{-50,-30},{-44,-20}},
                        thickness=0.5),Line(
                        points={{25,-30},{30,-19},{35,-30}},
                        thickness=0.5),Text(
                        extent={{-99,2},{-70,18}},
                        lineColor={160,160,164},
                        textString="true"),Text(
                        extent={{-98,-87},{-66,-73}},
                        lineColor={160,160,164},
                        textString="false"),Text(
                        extent={{19,-87},{44,-70}},
                        lineColor={0,0,0},
                        textString="uHigh"),Text(
                        extent={{-63,-88},{-38,-71}},
                        lineColor={0,0,0},
                        textString="uLow"),Line(points={{-69,10},{-60,10}}, color={160,
                      160,164})}), Diagram(graphics={Rectangle(
                      extent={{100,-40},{20,-100}},
                      lineColor={28,108,200},
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid), Text(
                      extent={{20,-50},{94,-84}},
                      lineColor={28,108,200},
                      textString="Internal
(see equations)")}));
            end ParallelBivalentControl;

            package Examples
                extends Modelica.Icons.ExamplesPackage;

              partial model PartialOnOffController
                extends Modelica.Icons.Example;
                parameter Real TSetDef=273.15 + 50 "Constant output value";
                parameter Real dTHys "Hysterisis value";
                replaceable BaseClasses.PartialOnOffController onOffController annotation (
                    choicesAllMatching=true, Placement(transformation(extent={{-18,-16},{38,
                          38}})));
                Modelica.Blocks.Sources.Ramp ramp(
                  height=70,
                  duration=3600,
                  offset=273.15 - 30)
                  annotation (Placement(transformation(extent={{-78,58},{-58,78}})));
                Modelica.Blocks.Sources.Pulse pulse(
                  amplitude=dTHys + 2,
                  period=1800,
                  offset=TSetDef - dTHys/2 - 1)
                  annotation (Placement(transformation(extent={{-84,2},{-64,22}})));
                Modelica.Blocks.Sources.Constant constTSet(k=TSetDef)
                  annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));

              equation
                connect(ramp.y, onOffController.T_oda)
                  annotation (Line(points={{-57,68},{10,68},{10,41.24}}, color={0,0,127}));
                connect(pulse.y, onOffController.T_Top) annotation (Line(points={{-63,12},{-56,
                        12},{-56,30},{-20.8,30},{-20.8,29.9}}, color={0,0,127}));
                connect(pulse.y, onOffController.T_bot) annotation (Line(points={{-63,12},{-56,
                        12},{-56,-2.5},{-20.8,-2.5}}, color={0,0,127}));
                connect(constTSet.y, onOffController.T_Set)
                  annotation (Line(points={{-39,-50},{10,-50},{10,-18.7}}, color={0,0,127}));
                annotation (Icon(graphics,
                                 coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                      coordinateSystem(preserveAspectRatio=false)),
                  experiment(
                    StopTime=3600,
                    Interval=1,
                    __Dymola_Algorithm="Dassl"));
              end PartialOnOffController;

              model ParallelBivalentControl
                extends PartialOnOffController(dTHys=onOffController.Hysteresis, redeclare
                    BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ParallelBivalentControl
                    onOffController(
                    Auxilliar_Heater_On(start=false),
                    Auxilliar_Heater_set(start=0),
                    Hysteresis=10,
                    TCutOff=263.15,
                    TBiv=270.15,
                    TOda_nominal=258.15,
                    TRoom=293.15,
                    QDem_flow_nominal=12000,
                    QHP_flow_cutOff=3000));
              end ParallelBivalentControl;
            end Examples;

            package Utilities

              block TriggerTime
                Modelica.Blocks.Interfaces.RealOutput y
                  annotation (Placement(transformation(extent={{100,-10},{120,10}})));
                Modelica.Blocks.Interfaces.BooleanInput u(start=false, fixed=true)
                  annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));

              algorithm
                when edge(u) then
                  y:=time;
                end when;
                annotation (Icon(graphics,
                                 coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                      coordinateSystem(preserveAspectRatio=false)));
              end TriggerTime;

              block CountTimeBelowThreshold
                Modelica.Blocks.Interfaces.RealOutput y
                  annotation (Placement(transformation(extent={{100,-10},{120,10}})));
                Modelica.Blocks.Interfaces.BooleanInput u
                  annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));

              algorithm
                when edge(u) then
                  y:=time;
                end when;
                annotation (Icon(graphics,
                                 coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                      coordinateSystem(preserveAspectRatio=false)));
              end CountTimeBelowThreshold;
            end Utilities;
          end OnOffController;

          package HeatPumpNSetController "Models for calculating the relative compressor speed n_set"

            package BaseClasses

              partial model PartialHPNSetController "Partial HP Controller model"
                Modelica.Blocks.Interfaces.BooleanInput HP_On
                  "True if heat pump is turned on according to two point controller"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
                Modelica.Blocks.Interfaces.RealOutput n_Set "Relative compressor set value"
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));
                Modelica.Blocks.Interfaces.RealInput T_Set "Current set temperature"
              annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
                Modelica.Blocks.Interfaces.RealInput T_Meas "Current measured temperature"
              annotation (Placement(transformation(
                  extent={{-20,-20},{20,20}},
                  rotation=90,
                  origin={0,-120})));
                Modelica.Blocks.Math.Feedback feedback
              annotation (Placement(transformation(extent={{4,90},{24,110}})));
                Modelica.Blocks.Continuous.Integrator integrator
              annotation (Placement(transformation(extent={{70,104},{90,124}})));
                Modelica.Blocks.Interfaces.RealOutput IAE "Integral Absolute Error"
              annotation (Placement(transformation(extent={{100,90},{120,110}}),
                  iconTransformation(extent={{100,80},{120,100}})));
                Modelica.Blocks.Interfaces.RealOutput ISE "Integral Square Error" annotation (
               Placement(transformation(extent={{100,40},{120,60}}), iconTransformation(
                    extent={{100,40},{120,60}})));
                Modelica.Blocks.Math.Abs abs1
              annotation (Placement(transformation(extent={{36,104},{56,124}})));
                Modelica.Blocks.Continuous.Integrator integrator1
              annotation (Placement(transformation(extent={{70,70},{90,90}})));
                Modelica.Blocks.Math.Product product "Square the difference"
              annotation (Placement(transformation(extent={{38,70},{58,90}})));
                Modelica.Blocks.Interfaces.BooleanInput IsOn(start=true)
                  "True if heat pump is actually on" annotation (Placement(transformation(
                      extent={{-20,-20},{20,20}},
                      rotation=90,
                      origin={-60,-120})));
              equation
                connect(
                    T_Set, feedback.u1) annotation (Line(points={{-120,60},{-100,60},{
                    -100,100},{6,100}}, color={0,0,127}));
                connect(
                    T_Meas, feedback.u2) annotation (Line(points={{0,-120},{0,-84},{-88,
                    -84},{-88,88},{14,88},{14,92}}, color={0,0,127}));
                connect(
                    feedback.y, abs1.u) annotation (Line(points={{23,100},{24,100},{24,
                    114},{34,114}}, color={0,0,127}));
                connect(
                    abs1.y, integrator.u)
              annotation (Line(points={{57,114},{68,114}}, color={0,0,127}));
                connect(
                    integrator.y, IAE) annotation (Line(points={{91,114},{96,114},{96,98},
                    {110,98},{110,100}}, color={0,0,127}));
                connect(
                    ISE, integrator1.y)
              annotation (Line(points={{110,50},{100,50},{100,80},{91,80}},
                                                          color={0,0,127}));
                connect(
                    feedback.y, product.u1) annotation (Line(points={{23,100},{30,100},{
                    30,86},{36,86}}, color={0,0,127}));
                connect(
                    integrator1.u, product.y)
              annotation (Line(points={{68,80},{59,80}}, color={0,0,127}));
                connect(
                    feedback.y, product.u2) annotation (Line(points={{23,100},{30,100},{
                    30,74},{36,74}}, color={0,0,127}));
                annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                      Rectangle(
                        extent={{-100,100},{100,-100}},
                        lineColor={0,0,0},
                        fillColor={215,215,215},
                        fillPattern=FillPattern.Solid,
                        lineThickness=0.5)}), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
              end PartialHPNSetController;

              model PartialInverterHeatPumpController
                "Partial controller for inverter controlled heat pumps"
                extends BaseClasses.PartialHPNSetController(HP_On(start=true));
                parameter Real P "Gain of PID-controller";
                parameter Real yMax=1 "Upper limit of output";
                parameter Real yOff=0 "Constant output value if device is turned off";
                parameter Real y_start=0 "Initial value of output";
                parameter Real nMin=0.5 "Lower limit of compressor frequency - default 0.5";
                BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.LimPID
                  PID(
                  final k=P,
                  final yMax=yMax,
                  final yMin=nMin,
                  final wp=1,
                  final wd=0,
                  final initType=Modelica.Blocks.Types.Init.InitialState,
                  homotopyType=Modelica.Blocks.Types.LimiterHomotopy.NoHomotopy,
                  final strict=false,
                  final xi_start=0,
                  final xd_start=0,
                  final y_start=y_start,
                  final limitsAtInit=true) annotation (Placement(transformation(
                        extent={{-30,22},{6,58}})));

                Modelica.Blocks.Logical.Switch onOffSwitch
                  annotation (Placement(transformation(extent={{38,-14},{68,16}})));
                Modelica.Blocks.Sources.Constant const(final k=yOff) "HP turned off"
                  annotation (Placement(transformation(extent={{-6,-36},{10,-20}})));
                Modelica.Blocks.Logical.And and1
                  annotation (Placement(transformation(extent={{-52,-64},{-32,-44}})));

              equation
                connect(HP_On, onOffSwitch.u2) annotation (Line(points={{-120,0},{34,0},{34,1},
                        {35,1}},    color={255,0,255}));
                connect(onOffSwitch.y, n_Set) annotation (Line(points={{69.5,1},{74,1},{74,0},
                        {110,0}}, color={0,0,127}));
                connect(const.y, onOffSwitch.u3)
                  annotation (Line(points={{10.8,-28},{35,-28},{35,-11}}, color={0,0,127}));
                connect(PID.y, onOffSwitch.u1) annotation (Line(points={{7.8,40},{14,40},{14,
                        13},{35,13}}, color={0,0,127}));
                connect(T_Set, PID.u_s) annotation (Line(points={{-120,60},{-70,60},{-70,40},
                        {-33.6,40}}, color={0,0,127}));
                connect(T_Meas, PID.u_m) annotation (Line(points={{0,-120},{0,-54},{-12,-54},
                        {-12,18.4}}, color={0,0,127}));
                connect(and1.y, PID.IsOn) annotation (Line(points={{-31,-54},{-22.8,-54},{
                        -22.8,18.4}}, color={255,0,255}));
                connect(HP_On, and1.u1) annotation (Line(points={{-120,0},{-72,0},{-72,-54},{
                        -54,-54}}, color={255,0,255}));
                connect(IsOn, and1.u2) annotation (Line(points={{-60,-120},{-60,-62},{-54,-62}},
                      color={255,0,255}));
              end PartialInverterHeatPumpController;
            end BaseClasses;

            model OnOffHeatPumpController
              "Controller for a on off heat pump, either zero or one"
              extends BaseClasses.PartialHPNSetController;

              parameter Real n_opt "Frequency of the heat pump map with an optimal isentropic efficiency. Necessary, as on-off HP will be optimized for this frequency and only used there.";

              Modelica.Blocks.Math.BooleanToReal hp_on_to_n_hp
                annotation (Placement(transformation(extent={{22,-22},{-22,22}},
                    rotation=180,
                    origin={-4,3.55271e-15})));
              Modelica.Blocks.Math.Gain gain(final k=n_opt)
                annotation (Placement(transformation(extent={{56,-10},{76,10}})));
            equation
              connect(HP_On, hp_on_to_n_hp.u) annotation (Line(points={{-120,0},{-76,0},{
                      -76,7.54952e-15},{-30.4,7.54952e-15}}, color={255,0,255}));
              connect(hp_on_to_n_hp.y, gain.u) annotation (Line(points={{20.2,1.55431e-15},
                      {28,1.55431e-15},{28,0},{54,0}},
                                               color={0,0,127}));
              connect(gain.y, n_Set) annotation (Line(points={{77,0},{110,0}},
                                   color={0,0,127}));
              annotation (Icon(graphics={
                  Line(points={{-100.0,0.0},{-45.0,0.0}},
                    color={0,0,127}),
                  Ellipse(lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid,
                    extent={{-45.0,-10.0},{-25.0,10.0}}),
                  Line(points={{-35.0,0.0},{30.0,35.0}},
                    color={0,0,127}),
                  Line(points={{45.0,0.0},{100.0,0.0}},
                    color={0,0,127}),
                  Ellipse(lineColor={0,0,127},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid,
                    extent={{25.0,-10.0},{45.0,10.0}})}));
            end OnOffHeatPumpController;

            model P_InverterHeatPumpController
              "P-Controller for inverter controlled heat pumps"
              extends BaseClasses.PartialInverterHeatPumpController(PID(controllerType=
                      Modelica.Blocks.Types.SimpleController.P));

              annotation (Icon(graphics={
                    Polygon(
                      points={{-80,90},{-88,68},{-72,68},{-80,90}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
                    Polygon(
                      points={{90,-80},{68,-72},{68,-88},{90,-80}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
                    Line(points={{-80,-80},{-80,-20},{-80,2},{76,2}},  color={0,0,127})}));
            end P_InverterHeatPumpController;

            model PI_InverterHeatPumpController
              "PI-Controller for inverter controlled heat pumps"
              extends
                HeatPumpNSetController.BaseClasses.PartialInverterHeatPumpController(PID(
                  controllerType=Modelica.Blocks.Types.SimpleController.PI,
                  Ti=T_I,
                  final Ni=Ni));
              parameter Modelica.Units.SI.Time T_I "Time constant of Integrator block";
              parameter Real Ni=0.9 "Ni*Ti is time constant of anti-windup compensation";
              annotation (Icon(graphics={
                    Polygon(
                      points={{-80,90},{-88,68},{-72,68},{-80,90}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
                    Polygon(
                      points={{90,-80},{68,-72},{68,-88},{90,-80}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
                    Line(points={{-80,-80},{-80,-20},{-80,-20},{52,80}},
                                                                       color={0,0,127})}));
            end PI_InverterHeatPumpController;

            model PID_InverterHeatPumpController
              "PID-Controller for inverter controlled heat pumps"
              extends
                HeatPumpNSetController.BaseClasses.PartialInverterHeatPumpController(PID(
                  controllerType=Modelica.Blocks.Types.SimpleController.PID,
                  final Ti=T_I,
                  final Td=T_D,
                  final Ni=Ni,
                  final Nd=Nd));
              parameter Modelica.Units.SI.Time T_I "Time constant of Integrator block";
              parameter Modelica.Units.SI.Time T_D "Time constant of Derivative block";
              parameter Real Ni=0.9 "Ni*Ti is time constant of anti-windup compensation";
              parameter Real Nd=10 "The higher Nd, the more ideal the derivative block";
              annotation (Icon(graphics={
                    Line(points={{-78,-80},{-78,52},{-76,-52},{68,76}},color={0,0,127}),
                    Polygon(
                      points={{-80,90},{-88,68},{-72,68},{-80,90}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
                    Polygon(
                      points={{90,-80},{68,-72},{68,-88},{90,-80}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-90,-80},{82,-80}}, color={192,192,192})}));
            end PID_InverterHeatPumpController;

            block LimPID
              "P, PI, PD, and PID controller with limited output, anti-windup compensation, setpoint weighting and optional feed-forward"
              import InitPID =
                     Modelica.Blocks.Types.Init;
              import Modelica.Blocks.Types.Init;
              import Modelica.Blocks.Types.SimpleController;
              extends Modelica.Blocks.Interfaces.SVcontrol;
              output Real controlError = u_s - u_m
                "Control error (set point - measurement)";
              parameter .Modelica.Blocks.Types.SimpleController controllerType=
                     .Modelica.Blocks.Types.SimpleController.PID "Type of controller";
              parameter Real k(min=0, unit="1") = 1 "Gain of controller";
              parameter Modelica.Units.SI.Time Ti(min=Modelica.Constants.small) = 0.5
                "Time constant of Integrator block" annotation (Dialog(enable=
                      controllerType == .Modelica.Blocks.Types.SimpleController.PI or
                      controllerType == .Modelica.Blocks.Types.SimpleController.PID));
              parameter Modelica.Units.SI.Time Td(min=0) = 0.1
                "Time constant of Derivative block" annotation (Dialog(enable=
                      controllerType == .Modelica.Blocks.Types.SimpleController.PD or
                      controllerType == .Modelica.Blocks.Types.SimpleController.PID));
              parameter Real yMax(start=1) "Upper limit of output";
              parameter Real yMin=-yMax "Lower limit of output";
              parameter Real wp(min=0) = 1
                "Set-point weight for Proportional block (0..1)";
              parameter Real wd(min=0) = 0 "Set-point weight for Derivative block (0..1)"
                 annotation(Dialog(enable=controllerType==.Modelica.Blocks.Types.SimpleController.PD or
                                            controllerType==.Modelica.Blocks.Types.SimpleController.PID));
              parameter Real Ni(min=100*Modelica.Constants.eps) = 0.9
                "Ni*Ti is time constant of anti-windup compensation"
                 annotation(Dialog(enable=controllerType==.Modelica.Blocks.Types.SimpleController.PI or
                                          controllerType==.Modelica.Blocks.Types.SimpleController.PID));
              parameter Real Nd(min=100*Modelica.Constants.eps) = 10
                "The higher Nd, the more ideal the derivative block"
                 annotation(Dialog(enable=controllerType==.Modelica.Blocks.Types.SimpleController.PD or
                                            controllerType==.Modelica.Blocks.Types.SimpleController.PID));
              parameter Boolean withFeedForward=false "Use feed-forward input?"
                annotation(Evaluate=true, choices(checkBox=true));
              parameter Real kFF=1 "Gain of feed-forward input"
                annotation(Dialog(enable=withFeedForward));
              parameter .Modelica.Blocks.Types.Init initType=.Modelica.Blocks.Types.Init.InitialState
                "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)"
                annotation (Evaluate=true, Dialog(group="Initialization"));
              parameter Real xi_start=0
                "Initial or guess value for integrator output (= integrator state)"
                annotation (Dialog(group="Initialization",
                            enable=controllerType==.Modelica.Blocks.Types.SimpleController.PI or
                                   controllerType==.Modelica.Blocks.Types.SimpleController.PID));
              parameter Real xd_start=0
                "Initial or guess value for state of derivative block"
                annotation (Dialog(group="Initialization",
                                     enable=controllerType==.Modelica.Blocks.Types.SimpleController.PD or
                                            controllerType==.Modelica.Blocks.Types.SimpleController.PID));
              parameter Real y_start=0 "Initial value of output"
                annotation(Dialog(enable=initType == .Modelica.Blocks.Types.Init.InitialOutput,    group=
                      "Initialization"));
              parameter Modelica.Blocks.Types.LimiterHomotopy homotopyType = Modelica.Blocks.Types.LimiterHomotopy.Linear
                "Simplified model for homotopy-based initialization"
                annotation (Evaluate=true, Dialog(group="Initialization"));
              parameter Boolean strict=false "= true, if strict limits with noEvent(..)"
                annotation (Evaluate=true, choices(checkBox=true), Dialog(tab="Advanced"));
              parameter Boolean limitsAtInit=true
                "Has no longer an effect and is only kept for backwards compatibility (the implementation uses now the homotopy operator)"
                annotation (Dialog(tab="Dummy"),Evaluate=true, choices(checkBox=true));
              constant Modelica.Units.SI.Time unitTime=1 annotation (HideResult=true);
              Modelica.Blocks.Interfaces.RealInput u_ff if withFeedForward
                "Optional connector of feed-forward input signal"
               annotation (Placement(
                    transformation(
                    origin={60,-120},
                    extent={{20,-20},{-20,20}},
                    rotation=270)));
              Modelica.Blocks.Math.Add addP(k1=wp, k2=-1)
                annotation (Placement(transformation(extent={{-80,40},{-60,60}})));
              Modelica.Blocks.Math.Add addD(k1=wd, k2=-1) if with_D
                annotation (Placement(transformation(extent={{-80,-10},{-60,10}})));
              Modelica.Blocks.Math.Gain P(k=1)
                annotation (Placement(transformation(extent={{-50,40},{-30,60}})));
              Modelica.Blocks.Continuous.Integrator I(
                k=unitTime/Ti,
                use_reset=true,
                y_start=xi_start,
                initType=if initType == InitPID.SteadyState then Init.SteadyState else if
                    initType == InitPID.InitialState or initType == InitPID.InitialState
                     then Init.InitialState else Init.NoInit) if with_I
                annotation (Placement(transformation(extent={{-50,-60},{-30,-40}})));
              Modelica.Blocks.Continuous.Derivative D(
                k=Td/unitTime,
                T=max([Td/Nd,1.e-14]),
                x_start=xd_start,
                initType=if initType ==InitPID.SteadyState  or initType ==InitPID.InitialOutput
                     then Init.SteadyState else if initType ==InitPID.InitialState  then
                    Init.InitialState else Init.NoInit) if with_D
                annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));
              Modelica.Blocks.Math.Gain gainPID(k=k)
                annotation (Placement(transformation(extent={{20,-10},{40,10}})));
              Modelica.Blocks.Math.Add3 addPID
                annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
              Modelica.Blocks.Math.Add3 addI(k2=-1) if with_I
                annotation (Placement(transformation(extent={{-80,-60},{-60,-40}})));
              Modelica.Blocks.Math.Add addSat(k1=+1, k2=-1) if with_I annotation (Placement(
                    transformation(
                    origin={80,-50},
                    extent={{-10,-10},{10,10}},
                    rotation=270)));
              Modelica.Blocks.Math.Gain gainTrack(k=1/(k*Ni)) if with_I
                annotation (Placement(transformation(extent={{0,-80},{-20,-60}})));
              Modelica.Blocks.Nonlinear.Limiter limiter(
                uMax=yMax,
                uMin=yMin,
                strict=strict,
                homotopyType=homotopyType)
                annotation (Placement(transformation(extent={{70,-10},{90,10}})));
            protected
              parameter Boolean with_I = controllerType==SimpleController.PI or
                                         controllerType==SimpleController.PID annotation(Evaluate=true, HideResult=true);
              parameter Boolean with_D = controllerType==SimpleController.PD or
                                         controllerType==SimpleController.PID annotation(Evaluate=true, HideResult=true);
            public
              Modelica.Blocks.Sources.Constant Dzero(k=0) if not with_D
                annotation (Placement(transformation(extent={{-40,20},{-30,30}})));
              Modelica.Blocks.Sources.Constant Izero(k=0) if not with_I
                annotation (Placement(transformation(extent={{0,-55},{-10,-45}})));
              Modelica.Blocks.Sources.Constant FFzero(k=0) if not withFeedForward
                annotation (Placement(transformation(extent={{30,-35},{40,-25}})));
              Modelica.Blocks.Math.Add addFF(k1=1, k2=kFF)
                annotation (Placement(transformation(extent={{48,-6},{60,6}})));
              Modelica.Blocks.Interfaces.BooleanInput IsOn(start=true)
                "True if heat pump is actually on" annotation (Placement(transformation(
                    extent={{-20,-20},{20,20}},
                    rotation=90,
                    origin={-60,-120})));
            initial equation
              if initType==InitPID.InitialOutput then
                gainPID.y = y_start;
              end if;
            equation
              if initType ==InitPID.InitialOutput  and (y_start < yMin or y_start > yMax) then
                  Modelica.Utilities.Streams.error("LimPID: Start value y_start (=" + String(y_start) +
                     ") is outside of the limits of yMin (=" + String(yMin) +") and yMax (=" + String(yMax) + ")");
              end if;

              connect(u_s, addP.u1) annotation (Line(points={{-120,0},{-96,0},{-96,56},{
                      -82,56}}, color={0,0,127}));
              connect(u_s, addD.u1) annotation (Line(points={{-120,0},{-96,0},{-96,6},{
                      -82,6}}, color={0,0,127}));
              connect(u_s, addI.u1) annotation (Line(points={{-120,0},{-96,0},{-96,-42},{
                      -82,-42}}, color={0,0,127}));
              connect(addP.y, P.u) annotation (Line(points={{-59,50},{-52,50}}, color={0,
                      0,127}));
              connect(addD.y, D.u)
                annotation (Line(points={{-59,0},{-52,0}}, color={0,0,127}));
              connect(addI.y, I.u) annotation (Line(points={{-59,-50},{-52,-50}}, color={
                      0,0,127}));
              connect(P.y, addPID.u1) annotation (Line(points={{-29,50},{-20,50},{-20,8},{-12,
                      8}},     color={0,0,127}));
              connect(D.y, addPID.u2)
                annotation (Line(points={{-29,0},{-12,0}},color={0,0,127}));
              connect(I.y, addPID.u3) annotation (Line(points={{-29,-50},{-20,-50},{-20,-8},
                      {-12,-8}},    color={0,0,127}));
              connect(limiter.y, addSat.u1) annotation (Line(points={{91,0},{94,0},{94,
                      -20},{86,-20},{86,-38}}, color={0,0,127}));
              connect(limiter.y, y)
                annotation (Line(points={{91,0},{110,0}}, color={0,0,127}));
              connect(addSat.y, gainTrack.u) annotation (Line(points={{80,-61},{80,-70},{2,-70}},
                                color={0,0,127}));
              connect(gainTrack.y, addI.u3) annotation (Line(points={{-21,-70},{-88,-70},{-88,
                      -58},{-82,-58}},     color={0,0,127}));
              connect(u_m, addP.u2) annotation (Line(
                  points={{0,-120},{0,-92},{-92,-92},{-92,44},{-82,44}},
                  color={0,0,127},
                  thickness=0.5));
              connect(u_m, addD.u2) annotation (Line(
                  points={{0,-120},{0,-92},{-92,-92},{-92,-6},{-82,-6}},
                  color={0,0,127},
                  thickness=0.5));
              connect(u_m, addI.u2) annotation (Line(
                  points={{0,-120},{0,-92},{-92,-92},{-92,-50},{-82,-50}},
                  color={0,0,127},
                  thickness=0.5));
              connect(Dzero.y, addPID.u2) annotation (Line(points={{-29.5,25},{-24,25},{-24,
                      0},{-12,0}},    color={0,0,127}));
              connect(Izero.y, addPID.u3) annotation (Line(points={{-10.5,-50},{-20,-50},{-20,
                      -8},{-12,-8}},    color={0,0,127}));
              connect(addPID.y, gainPID.u)
                annotation (Line(points={{11,0},{18,0}}, color={0,0,127}));
              connect(addFF.y, limiter.u)
                annotation (Line(points={{60.6,0},{68,0}}, color={0,0,127}));
              connect(gainPID.y, addFF.u1) annotation (Line(points={{41,0},{44,0},{44,3.6},
                      {46.8,3.6}},color={0,0,127}));
              connect(FFzero.y, addFF.u2) annotation (Line(points={{40.5,-30},{44,-30},{44,
                      -3.6},{46.8,-3.6}},
                                    color={0,0,127}));
              connect(addFF.u2, u_ff) annotation (Line(points={{46.8,-3.6},{44,-3.6},{44,
                      -92},{60,-92},{60,-120}},
                                           color={0,0,127}));
              connect(addFF.y, addSat.u2) annotation (Line(points={{60.6,0},{64,0},{64,-20},
                      {74,-20},{74,-38}}, color={0,0,127}));
              connect(IsOn, I.reset) annotation (Line(points={{-60,-120},{-60,-80},{-34,-80},
                      {-34,-62}}, color={255,0,255}));
              annotation (defaultComponentName="PID",
                Icon(coordinateSystem(
                    preserveAspectRatio=true,
                    extent={{-100,-100},{100,100}}), graphics={
                    Line(points={{-80,78},{-80,-90}}, color={192,192,192}),
                    Polygon(
                      points={{-80,90},{-88,68},{-72,68},{-80,90}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-90,-80},{82,-80}}, color={192,192,192}),
                    Polygon(
                      points={{90,-80},{68,-72},{68,-88},{90,-80}},
                      lineColor={192,192,192},
                      fillColor={192,192,192},
                      fillPattern=FillPattern.Solid),
                    Line(points={{-80,-80},{-80,-20},{30,60},{80,60}}, color={0,0,127}),
                    Text(
                      extent={{-20,-20},{80,-60}},
                      lineColor={192,192,192},
                      textString="%controllerType"),
                    Line(
                      visible=strict,
                      points={{30,60},{81,60}},
                      color={255,0,0})}),
                Diagram(graphics={Text(
                        extent={{79,-112},{129,-102}},
                        lineColor={0,0,255},
                      textString=" (feed-forward)")}),
                Documentation(info="<html>
<p>
Via parameter <strong>controllerType</strong> either <strong>P</strong>, <strong>PI</strong>, <strong>PD</strong>,
or <strong>PID</strong> can be selected. If, e.g., PI is selected, all components belonging to the
D-part are removed from the block (via conditional declarations).
The example model
<a href=\"modelica://Modelica.Blocks.Examples.PID_Controller\">Modelica.Blocks.Examples.PID_Controller</a>
demonstrates the usage of this controller.
Several practical aspects of PID controller design are incorporated
according to chapter 3 of the book:
</p>

<dl>
<dt>&Aring;str&ouml;m K.J., and H&auml;gglund T.:</dt>
<dd> <strong>PID Controllers: Theory, Design, and Tuning</strong>.
     Instrument Society of America, 2nd edition, 1995.
</dd>
</dl>

<p>
Besides the additive <strong>proportional, integral</strong> and <strong>derivative</strong>
part of this controller, the following features are present:
</p>
<ul>
<li> The output of this controller is limited. If the controller is
     in its limits, anti-windup compensation is activated to drive
     the integrator state to zero.</li>
<li> The high-frequency gain of the derivative part is limited
     to avoid excessive amplification of measurement noise.</li>
<li> Setpoint weighting is present, which allows to weight
     the setpoint in the proportional and the derivative part
     independently from the measurement. The controller will respond
     to load disturbances and measurement noise independently of this setting
     (parameters wp, wd). However, setpoint changes will depend on this
     setting. For example, it is useful to set the setpoint weight wd
     for the derivative part to zero, if steps may occur in the
     setpoint signal.</li>
<li> Optional feed-forward. It is possible to add a feed-forward signal.
     The feed-forward signal is added before limitation.</li>
</ul>

<p>
The parameters of the controller can be manually adjusted by performing
simulations of the closed loop system (= controller + plant connected
together) and using the following strategy:
</p>

<ol>
<li> Set very large limits, e.g., yMax = Modelica.Constants.inf</li>
<li> Select a <strong>P</strong>-controller and manually enlarge parameter <strong>k</strong>
     (the total gain of the controller) until the closed-loop response
     cannot be improved any more.</li>
<li> Select a <strong>PI</strong>-controller and manually adjust parameters
     <strong>k</strong> and <strong>Ti</strong> (the time constant of the integrator).
     The first value of Ti can be selected, such that it is in the
     order of the time constant of the oscillations occurring with
     the P-controller. If, e.g., vibrations in the order of T=10 ms
     occur in the previous step, start with Ti=0.01 s.</li>
<li> If you want to make the reaction of the control loop faster
     (but probably less robust against disturbances and measurement noise)
     select a <strong>PID</strong>-Controller and manually adjust parameters
     <strong>k</strong>, <strong>Ti</strong>, <strong>Td</strong> (time constant of derivative block).</li>
<li> Set the limits yMax and yMin according to your specification.</li>
<li> Perform simulations such that the output of the PID controller
     goes in its limits. Tune <strong>Ni</strong> (Ni*Ti is the time constant of
     the anti-windup compensation) such that the input to the limiter
     block (= limiter.u) goes quickly enough back to its limits.
     If Ni is decreased, this happens faster. If Ni=infinity, the
     anti-windup compensation is switched off and the controller works bad.</li>
</ol>

<p>
<strong>Initialization</strong>
</p>

<p>
This block can be initialized in different
ways controlled by parameter <strong>initType</strong>. The possible
values of initType are defined in
<a href=\"modelica://Modelica.Blocks.Types.InitPID\">Modelica.Blocks.Types.InitPID</a>.
This type is identical to
<a href=\"modelica://Modelica.Blocks.Types.Init\">Types.Init</a>,
with the only exception that the additional option
<strong>DoNotUse_InitialIntegratorState</strong> is added for
backward compatibility reasons (= integrator is initialized with
InitialState whereas differential part is initialized with
NoInit which was the initialization in version 2.2 of the Modelica
standard library).
</p>

<p>
Based on the setting of initType, the integrator (I) and derivative (D)
blocks inside the PID controller are initialized according to the following table:
</p>

<table border=1 cellspacing=0 cellpadding=2>
  <tr><td><strong>initType</strong></td>
      <td><strong>I.initType</strong></td>
      <td><strong>D.initType</strong></td></tr>

  <tr><td><strong>NoInit</strong></td>
      <td>NoInit</td>
      <td>NoInit</td></tr>

  <tr><td><strong>SteadyState</strong></td>
      <td>SteadyState</td>
      <td>SteadyState</td></tr>

  <tr><td><strong>InitialState</strong></td>
      <td>InitialState</td>
      <td>InitialState</td></tr>

  <tr><td><strong>InitialOutput</strong><br>
          and initial equation: y = y_start</td>
      <td>NoInit</td>
      <td>SteadyState</td></tr>

  <tr><td><strong>DoNotUse_InitialIntegratorState</strong></td>
      <td>InitialState</td>
      <td>NoInit</td></tr>
</table>

<p>
In many cases, the most useful initial condition is
<strong>SteadyState</strong> because initial transients are then no longer
present. If initType = InitPID.SteadyState, then in some
cases difficulties might occur. The reason is the
equation of the integrator:
</p>

<pre>
   <strong>der</strong>(y) = k*u;
</pre>

<p>
The steady state equation \"der(x)=0\" leads to the condition that the input u to the
integrator is zero. If the input u is already (directly or indirectly) defined
by another initial condition, then the initialization problem is <strong>singular</strong>
(has none or infinitely many solutions). This situation occurs often
for mechanical systems, where, e.g., u = desiredSpeed - measuredSpeed and
since speed is both a state and a derivative, it is natural to
initialize it with zero. As sketched this is, however, not possible.
The solution is to not initialize u_m or the variable that is used
to compute u_m by an algebraic equation.
</p>

<p>
When initializing in steady-state, homotopy-based initialization can help the convergence of the solver,
by using a simplified model a the beginning of the solution process. Different options are available.
</p>

<ul>
<li><strong>homotopyType=Linear</strong> (default): the limitations are removed from the simplified model,
making it linear. Use this if you know that the controller will not be saturated at steady state.</li>
<li><strong>homotopyType=UpperLimit</strong>: if it is known a priori the controller will be stuck at the upper
limit yMax, this option assumes y = yMax as a simplified model.</li>
<li><strong>homotopyType=LowerLimit</strong>: if it is known a priori the controller will be stuck at the lower
limit yMin, this option assumes y = yMin as a simplified model.</li>
<li><strong>homotopyType=NoHomotopy</strong>: this option does not apply any simplification and keeps the
limiter active throughout the homotopy transformation. Use this if it is unknown whether the controller
is saturated or not at initialization and if the limitations on the output must be enforced throughout
the entire homotopy transformation.</li>
</ul>

<p>
The parameter <strong>limitAtInit</strong> is obsolete since MSL 3.2.2 and only kept for backwards compatibility.
</p>
</html>"));
            end LimPID;
          end HeatPumpNSetController;
        end Components;

        package BaseClasses "Base class with partial control models"

          partial model PartialControl "Partial controller for HPS"
           extends BESMod.Utilities.Icons.ControlIcon;
            BESMod.HugosProject.Systems.Hydraulical.Interfaces.GenerationControlBus
              sigBusGen annotation (Placement(transformation(extent={{-178,-124},
                      {-126,-74}})));
            BESMod.HugosProject.Systems.Hydraulical.Interfaces.DistributionControlBus
              sigBusDistr annotation (Placement(transformation(extent={{-22,-128},
                      {24,-72}})));
            BESMod.HugosProject.Systems.Hydraulical.Interfaces.ControlOutputs outBusCtrl
              annotation (Placement(transformation(extent={{230,-10},{250,10}})));
            IBPSA.BoundaryConditions.WeatherData.Bus
                weaBus "Weather data bus" annotation (Placement(transformation(extent={{-258,
                      -20},{-216,24}}),    iconTransformation(extent={{-252,-12},{
                      -216,22}})));
            Interfaces.TransferControlBus sigBusTra
              annotation (Placement(transformation(extent={{152,-124},{196,-76}})));
            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.SubsystemControlBaseDataDefinition
              generationParameters annotation (Placement(transformation(extent={{-226,
                      -104},{-174,-86}})));
            replaceable parameter
              BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.DistributionControlBaseDataDefinition
              distributionParameters annotation (Placement(transformation(
                    extent={{-70,-108},{-16,-88}})));
            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.SubsystemControlBaseDataDefinition
              transferParameters annotation (Placement(transformation(extent={{110,
                      -108},{158,-88}})));
            BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
              annotation (Placement(transformation(extent={{-140,80},{-98,126}}),
                  iconTransformation(extent={{-138,80},{-88,124}})));
            BESMod.HugosProject.Systems.Interfaces.BuiMeaBus buiMeaBus
              annotation (Placement(transformation(extent={{42,84},{88,122}}),
                  iconTransformation(extent={{42,84},{88,122}})));
            Interfaces.SystemControlBus sigBusHyd annotation (Placement(transformation(
                    extent={{-48,84},{-8,118}}), iconTransformation(extent={{-48,84},{-8,
                      118}})));
          equation

            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-240,
                      -100},{240,100}}), graphics={
                  Rectangle(
                    extent={{-240,100},{240,-100}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-234,8},{226,-10}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{160,16},{208,-20}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={175,175,175},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-234,-52},{226,-70}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-234,68},{226,50}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-196,-42},{-148,-78}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={175,175,175},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-74,76},{-26,40}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={175,175,175},
                    fillPattern=FillPattern.Solid)}),                      Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false, extent={{-240,-100},{240,
                      100}})));
          end PartialControl;

          partial model SystemWithThermostaticValveControl
            extends PartialControl;
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.ThermostaticValveController.BaseClasses.PartialThermostaticValveController
              thermostaticValveController constrainedby
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.ThermostaticValveController.BaseClasses.PartialThermostaticValveController(
                final nZones=transferParameters.nParallelDem, final
                leakageOpening=thermostaticValveParameters.leakageOpening)
              annotation (choicesAllMatching=true, Placement(transformation(
                    extent={{112,-94},{138,-64}})));
            replaceable parameter
              BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
              thermostaticValveParameters annotation (choicesAllMatching=true,
                Placement(transformation(extent={{178,-80},{198,-60}})));
          equation
            connect(thermostaticValveController.opening, sigBusTra.opening) annotation (
                Line(points={{140.6,-79},{174,-79},{174,-100}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(thermostaticValveController.TZoneMea, buiMeaBus.TZoneMea) annotation (
               Line(points={{109.4,-70},{104,-70},{104,-42},{238,-42},{238,103},{65,103}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(thermostaticValveController.TZoneSet, useProBus.TZoneSet) annotation (
               Line(points={{109.4,-88},{102,-88},{102,-40},{236,-40},{236,103},{-119,103}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            annotation (Diagram(graphics={
                  Rectangle(
                    extent={{74,-58},{206,-100}},
                    lineColor={162,29,33},
                    lineThickness=1),
                  Text(
                    extent={{76,-100},{180,-120}},
                    lineColor={162,29,33},
                    lineThickness=1,
                    textString="Thermostatic Valve")}));
          end SystemWithThermostaticValveControl;

          partial model PartialTwoPoint_HPS_Controller
            "Partial model with replaceable blocks for rule based control of HPS using on off heating rods"
            extends
              BESMod.HugosProject.Systems.Hydraulical.Control.BaseClasses.SystemWithThermostaticValveControl;
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.BaseClasses.PartialOnOffController
              DHWOnOffContoller annotation (choicesAllMatching=true, Placement(
                  transformation(extent={{-128,78},{-112,94}})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.BaseClasses.PartialOnOffController
              BufferOnOffController annotation (choicesAllMatching=true,
                Placement(transformation(extent={{-128,34},{-112,48}})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.HeatPumpSafetyControl
              safetyControl annotation (choicesAllMatching=true, Placement(
                  transformation(extent={{200,30},{220,50}})));
            replaceable parameter RecordsCollection.BivalentHeatPumpControlDataDefinition
              bivalentControlData constrainedby
              RecordsCollection.BivalentHeatPumpControlDataDefinition(
                final TOda_nominal=generationParameters.TOda_nominal,
                TSup_nominal=generationParameters.TSup_nominal[1],
                TSetRoomConst=sum(transferParameters.TDem_nominal)/transferParameters.nParallelDem)
              annotation (choicesAllMatching=true, Placement(transformation(extent={{-92,-32},{-70,-10}})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.DHWSetControl.BaseClasses.PartialTSet_DHW_Control
              TSet_DHW constrainedby
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.DHWSetControl.BaseClasses.PartialTSet_DHW_Control(
                final T_DHW=distributionParameters.TDHW_nominal) annotation (
                choicesAllMatching=true, Placement(transformation(extent={{-216,
                      66},{-192,90}})));
            BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatingCurve
              heatingCurve(
              TRoomSet=bivalentControlData.TSetRoomConst,
              GraHeaCurve=bivalentControlData.gradientHeatCurve,
              THeaThres=bivalentControlData.TSetRoomConst,
              dTOffSet_HC=bivalentControlData.dTOffSetHeatCurve) annotation (
                Placement(transformation(extent={{-212,18},{-190,40}})));
            Modelica.Blocks.MathBoolean.Or
                                       HRactive(nu=3)
                                                annotation (Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={15,25})));
            Modelica.Blocks.Logical.Or HP_active
                                                annotation (Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={27,91})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.BaseClasses.PartialHPNSetController
              HP_nSet_Controller annotation (choicesAllMatching=true, Placement(
                  transformation(extent={{82,64},{112,92}})));
            Modelica.Blocks.Logical.Switch switch1
              annotation (Placement(transformation(extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={63,73})));
            Modelica.Blocks.Sources.Constant const_dT_loading1(k=distributionParameters.dTTra_nominal[1])
                                                                    annotation (Placement(
                  transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=180,
                  origin={14,58})));

            Modelica.Blocks.MathBoolean.Or
                                       DHWHysOrLegionella(nu=4)
              "Use the HR if the HP reached its limit" annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={-77,69})));
            AixLib.Controls.HeatPump.SafetyControls.SafetyControl securityControl(
              final minRunTime=safetyControl.minRunTime,
              final minLocTime=safetyControl.minLocTime,
              final maxRunPerHou=safetyControl.maxRunPerHou,
              final use_opeEnv=safetyControl.use_opeEnv,
              final use_opeEnvFroRec=false,
              final dataTable=AixLib.DataBase.HeatPump.EN14511.Vitocal200AWO201(
                  tableUppBou=[-20,50; -10,60; 30,60; 35,55]),
              final tableUpp=safetyControl.tableUpp,
              final use_minRunTime=safetyControl.use_minRunTime,
              final use_minLocTime=safetyControl.use_minLocTime,
              final use_runPerHou=safetyControl.use_runPerHou,
              final dTHystOperEnv=safetyControl.dT_opeEnv,
              final use_deFro=false,
              final minIceFac=0,
              final use_chiller=false,
              final calcPel_deFro=0,
              final pre_n_start=safetyControl.pre_n_start_hp,
              use_antFre=false) annotation (Placement(transformation(
                  extent={{-16,-17},{16,17}},
                  rotation=0,
                  origin={210,81})));
            Modelica.Blocks.Sources.BooleanConstant hp_mode(final k=true) annotation (
                Placement(transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={155,69})));
            Modelica.Blocks.Sources.Constant hp_iceFac(final k=1) annotation (Placement(
                  transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={-181,-85})));

            Modelica.Blocks.Routing.RealPassThrough realPassThrough_T_Amb1
              "Only used to make warning disappear, has no effect on model veloccity"
              annotation (Placement(transformation(extent={{-242,-102},{-220,-80}})));

            Modelica.Blocks.Logical.Switch switchHR annotation (Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={43,25})));
            Modelica.Blocks.Sources.Constant constZero(final k=0) annotation (Placement(
                  transformation(
                  extent={{2,-2},{-2,2}},
                  rotation=180,
                  origin={24,10})));
            Modelica.Blocks.Math.Max max annotation (Placement(transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=180,
                  origin={24,38})));

            Modelica.Blocks.Math.Add add_dT_LoadingBuf
              annotation (Placement(transformation(extent={{38,54},{48,64}})));
            Modelica.Blocks.Sources.Constant const_dT_loading2(k=distributionParameters.dTTraDHW_nominal
                   + bivalentControlData.dTHysDHW/2) annotation (Placement(transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=180,
                  origin={14,74})));
            Modelica.Blocks.Math.Add add_dT_LoadingDHW
              annotation (Placement(transformation(extent={{36,78},{46,88}})));

            Modelica.Blocks.Math.BooleanToReal booleanToReal annotation (Placement(
                  transformation(
                  extent={{-6,-6},{6,6}},
                  rotation=270,
                  origin={-38,-36})));
            Modelica.Blocks.Logical.Not bufOn "buffer is charged" annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=270,
                  origin={-37,-17})));
            Utilities.SupervisoryControl.SupervisoryControl supervisoryControlDHW(ctrlType=
                  supCtrlTypeDHWSet)
              annotation (Placement(transformation(extent={{-182,72},{-170,84}})));
            parameter Utilities.SupervisoryControl.Types.SupervisoryControlType
              supCtrlTypeDHWSet = Utilities.SupervisoryControl.Types.SupervisoryControlType.Local "Type of supervisory control for DHW Setpoint";
          equation
            connect(BufferOnOffController.T_Top, sigBusDistr.TStoBufTopMea) annotation (
                Line(points={{-128.8,45.9},{-316,45.9},{-316,-166},{4,-166},{4,-100},{1,-100}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(DHWOnOffContoller.T_Top, sigBusDistr.TStoDHWTopMea) annotation (Line(
                  points={{-128.8,91.6},{-316,91.6},{-316,-166},{1,-166},{1,-100}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(heatingCurve.TSet, BufferOnOffController.T_Set) annotation (Line(
                  points={{-188.9,29},{-120,29},{-120,33.3}}, color={0,0,127}));

            connect(DHWOnOffContoller.T_bot, sigBusDistr.TStoDHWTopMea) annotation (Line(
                  points={{-128.8,82},{-318,82},{-318,-166},{1,-166},{1,-100}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(HP_active.y, HP_nSet_Controller.HP_On) annotation (Line(points={{32.5,
                    91},{70,91},{70,78},{79,78}}, color={255,0,255}));
            connect(sigBusDistr, TSet_DHW.sigBusDistr) annotation (Line(
                points={{1,-100},{-2,-100},{-2,-152},{-292,-152},{-292,77.88},{-216,77.88}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));

            connect(DHWOnOffContoller.Auxilliar_Heater_On, HRactive.u[1]) annotation (
                Line(points={{-110.88,82},{-22,82},{-22,23.8333},{10,23.8333}}, color={
                    255,0,255}));
            connect(BufferOnOffController.Auxilliar_Heater_On, HRactive.u[2]) annotation (
               Line(points={{-110.88,37.5},{-94,37.5},{-94,25},{10,25}},           color=
                    {255,0,255}));
            connect(TSet_DHW.y, HRactive.u[3]) annotation (Line(points={{-190.8,
                    71.04},{-96,71.04},{-96,26.1667},{10,26.1667}},                 color=
                   {255,0,255}));
            connect(securityControl.sigBusHP, sigBusGen.hp_bus) annotation (Line(
                points={{192,69.27},{180,69.27},{180,70},{184,70},{184,-54},{-152,-54},{-152,
                    -99}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(securityControl.modeOut, sigBusGen.hp_bus.modeSet)
              annotation (Line(points={{227.333,77.6},{268,77.6},{268,-136},{
                    -152,-136},{-152,-99}},            color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(securityControl.modeSet, hp_mode.y) annotation (Line(points={{191.867,
                    77.6},{168,77.6},{168,69},{162.7,69}}, color={255,0,255}));
            connect(securityControl.nOut, sigBusGen.hp_bus.nSet) annotation (Line(
                  points={{227.333,84.4},{264,84.4},{264,-132},{-42,-132},{-42,
                    -99},{-152,-99}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(hp_iceFac.y, sigBusGen.hp_bus.iceFacMea) annotation (Line(
                  points={{-173.3,-85},{-156.65,-85},{-156.65,-99},{-152,-99}},
                                color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(HP_nSet_Controller.n_Set, securityControl.nSet) annotation (Line(
                  points={{113.5,78},{144,78},{144,84.4},{191.867,84.4}}, color={0,0,127}));
            connect(BufferOnOffController.HP_On, HP_active.u2) annotation (Line(points={{-110.88,
                    45.9},{-78,45.9},{-78,54},{-38,54},{-38,87},{21,87}},
                                                           color={255,0,255}));
            connect(DHWOnOffContoller.HP_On, HP_active.u1) annotation (Line(points={{-110.88,
                    91.6},{-32,91.6},{-32,91},{21,91}},    color={255,0,255}));
            connect(DHWHysOrLegionella.y, sigBusDistr.dhw_on) annotation (Line(
                  points={{-71.25,69},{-26,69},{-26,-100},{1,-100}},
                  color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(DHWHysOrLegionella.y, switch1.u2) annotation (Line(points={{-71.25,69},
                    {-20,69},{-20,73},{57,73}},             color={255,0,255}));

            connect(realPassThrough_T_Amb1.y, sigBusGen.hp_bus.TOdaMea) annotation (Line(
                  points={{-218.9,-91},{-200,-91},{-200,-99},{-152,-99}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(realPassThrough_T_Amb1.u, weaBus.TDryBul) annotation (
                Line(points={{-244.2,-91},{-256,-91},{-256,2},{-237,2}},            color=
                   {0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(TSet_DHW.y, DHWHysOrLegionella.u[1]) annotation (Line(points={{-190.8,
                    71.04},{-96,71.04},{-96,67.6875},{-82,67.6875}},    color={255,0,255}));
            connect(DHWOnOffContoller.Auxilliar_Heater_On, DHWHysOrLegionella.u[2])
              annotation (Line(points={{-110.88,82},{-92,82},{-92,68.5625},{-82,68.5625}},
                                                                                  color={
                    255,0,255}));
            connect(DHWOnOffContoller.HP_On, DHWHysOrLegionella.u[3]) annotation (Line(
                  points={{-110.88,91.6},{-90,91.6},{-90,69.4375},{-82,69.4375}},
                  color={255,0,255}));
            connect(TSet_DHW.y, DHWHysOrLegionella.u[4]) annotation (Line(points={{-190.8,
                    71.04},{-136.4,71.04},{-136.4,70.3125},{-82,70.3125}},
                                                                         color={255,0,255}));
            connect(realPassThrough_T_Amb1.y, DHWOnOffContoller.T_oda) annotation (Line(
                  points={{-218.9,-91},{-218.9,-62},{-250,-62},{-250,92},{-120,92},{-120,
                    94.96}}, color={0,0,127}));
            connect(realPassThrough_T_Amb1.y, BufferOnOffController.T_oda) annotation (
                Line(points={{-218.9,-91},{-218.9,-64},{-252,-64},{-252,48.84},{-120,
                    48.84}}, color={0,0,127}));
            connect(BufferOnOffController.T_bot, sigBusDistr.TStoBufTopMea) annotation (
                Line(points={{-128.8,37.5},{-130,37.5},{-130,-86},{134,-86},{134,-100},{1,
                    -100}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(HRactive.y, switchHR.u2)
              annotation (Line(points={{20.75,25},{37,25}}, color={255,0,255}));
            connect(constZero.y, switchHR.u3) annotation (Line(points={{26.2,10},{28,10},{
                    28,21},{37,21}}, color={0,0,127}));
            connect(max.y, switchHR.u1)
              annotation (Line(points={{28.4,38},{37,38},{37,29}}, color={0,0,127}));
            connect(BufferOnOffController.Auxilliar_Heater_set, max.u1) annotation (Line(
                  points={{-110.88,34.98},{-84,34.98},{-84,35.6},{19.2,35.6}}, color={0,0,
                    127}));
            connect(DHWOnOffContoller.Auxilliar_Heater_set, max.u2) annotation (Line(
                  points={{-110.88,79.12},{-104,79.12},{-104,64},{-10,64},{-10,40.4},{19.2,
                    40.4}}, color={0,0,127}));
            connect(switchHR.y, sigBusGen.hr_on) annotation (Line(points={{48.5,25},{62,25},
                    {62,-48},{-152,-48},{-152,-99}},  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(realPassThrough_T_Amb1.y, heatingCurve.TOda) annotation (Line(
                  points={{-218.9,-91},{-208,-91},{-208,-28},{-226,-28},{-226,29},{
                    -214.2,29}}, color={0,0,127}));
            connect(HP_nSet_Controller.IsOn, sigBusGen.hp_bus.onOffMea) annotation (Line(
                  points={{88,61.2},{88,-58},{-152,-58},{-152,-99}}, color={255,0,255}),
                Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(const_dT_loading2.y,add_dT_LoadingDHW. u2) annotation (Line(points={{18.4,74},
                    {24,74},{24,80},{35,80}},                  color={0,0,127}));
            connect(switch1.y, HP_nSet_Controller.T_Set) annotation (Line(points={{68.5,
                    73},{70,73},{70,86.4},{79,86.4}}, color={0,0,127}));
            connect(heatingCurve.TSet, add_dT_LoadingBuf.u1) annotation (Line(points={{
                    -188.9,29},{4,29},{4,62},{37,62}}, color={0,0,127}));
            connect(add_dT_LoadingBuf.y, switch1.u3) annotation (Line(points={{48.5,59},{
                    54,59},{54,69},{57,69}}, color={0,0,127}));
            connect(add_dT_LoadingDHW.y, switch1.u1) annotation (Line(points={{46.5,83},{
                    51.25,83},{51.25,77},{57,77}}, color={0,0,127}));
            connect(const_dT_loading1.y, add_dT_LoadingBuf.u2) annotation (Line(points={{
                    18.4,58},{26,58},{26,56},{37,56}}, color={0,0,127}));
            connect(booleanToReal.y, sigBusDistr.uThrWayVal) annotation (Line(points={{
                    -38,-42.6},{-38,-62},{1,-62},{1,-100}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(booleanToReal.u, bufOn.y) annotation (Line(points={{-38,-28.8},{-38,
                    -26},{-37,-26},{-37,-22.5}}, color={255,0,255}));
            connect(bufOn.u, DHWHysOrLegionella.y) annotation (Line(points={{-37,-11},{
                    -37,70},{-71.25,70},{-71.25,69}}, color={255,0,255}));
            connect(TSet_DHW.TSet_DHW, supervisoryControlDHW.uLoc) annotation (Line(
                  points={{-190.8,78},{-188,78},{-188,73.2},{-183.2,73.2}}, color={0,0,
                    127}));
            connect(supervisoryControlDHW.y, DHWOnOffContoller.T_Set) annotation (Line(
                  points={{-168.8,78},{-150,78},{-150,74},{-122,74},{-122,77.2},{-120,
                    77.2}}, color={0,0,127}));
            connect(supervisoryControlDHW.y, add_dT_LoadingDHW.u1) annotation (Line(
                  points={{-168.8,78},{-150,78},{-150,76},{-10,76},{-10,86},{35,86}},
                  color={0,0,127}));
            connect(supervisoryControlDHW.activateInt, sigBusHyd.overwriteTSetDHW)
              annotation (Line(points={{-183.2,78},{-186,78},{-186,94},{-28,94},{-28,101}},
                  color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(supervisoryControlDHW.uSup, sigBusHyd.TSetDHW) annotation (Line(
                  points={{-183.2,82.8},{-183.2,92},{-28,92},{-28,101}}, color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            annotation (Diagram(graphics={
                  Rectangle(
                    extent={{-240,100},{-50,60}},
                    lineColor={238,46,47},
                    lineThickness=1),
                  Text(
                    extent={{-234,94},{-140,128}},
                    lineColor={238,46,47},
                    lineThickness=1,
                    textString="DHW Control"),
                  Rectangle(
                    extent={{-240,58},{-50,14}},
                    lineColor={0,140,72},
                    lineThickness=1),
                  Text(
                    extent={{-216,-16},{-122,18}},
                    lineColor={0,140,72},
                    lineThickness=1,
                    textString="Buffer Control"),
                  Rectangle(
                    extent={{0,100},{132,52}},
                    lineColor={28,108,200},
                    lineThickness=1),
                  Text(
                    extent={{4,122},{108,102}},
                    lineColor={28,108,200},
                    lineThickness=1,
                    textString="Heat Pump Control"),
                  Rectangle(
                    extent={{0,46},{132,4}},
                    lineColor={162,29,33},
                    lineThickness=1),
                  Text(
                    extent={{2,4},{106,-16}},
                    lineColor={162,29,33},
                    lineThickness=1,
                    textString="Heating Rod Control"),
                  Rectangle(
                    extent={{138,100},{240,52}},
                    lineColor={28,108,200},
                    lineThickness=1),
                  Text(
                    extent={{138,122},{242,102}},
                    lineColor={28,108,200},
                    lineThickness=1,
                    textString="Heat Pump Safety")}));
          end PartialTwoPoint_HPS_Controller;

          partial model PartialTwoPoint_HPS_Controller_GenWithTwoPorts
            "Partial model with replaceable blocks for generation system with two ports"
            extends
              BESMod.HugosProject.Systems.Hydraulical.Control.BaseClasses.SystemWithThermostaticValveControl;
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.BaseClasses.PartialOnOffController
              DHWOnOffContoller annotation (choicesAllMatching=true, Placement(
                  transformation(extent={{-128,78},{-112,94}})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.BaseClasses.PartialOnOffController
              BufferOnOffController annotation (choicesAllMatching=true,
                Placement(transformation(extent={{-128,34},{-112,48}})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.HeatPumpSafetyControl
              safetyControl annotation (choicesAllMatching=true, Placement(
                  transformation(extent={{200,30},{220,50}})));
            replaceable parameter RecordsCollection.BivalentHeatPumpControlDataDefinition
              bivalentControlData constrainedby
              RecordsCollection.BivalentHeatPumpControlDataDefinition(
                final TOda_nominal=generationParameters.TOda_nominal,
                TSup_nominal=generationParameters.TSup_nominal[1],
                TSetRoomConst=sum(transferParameters.TDem_nominal)/transferParameters.nParallelDem)
              annotation (choicesAllMatching=true, Placement(transformation(extent={{-92,-32},{-70,-10}})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.DHWSetControl.BaseClasses.PartialTSet_DHW_Control
              TSet_DHW constrainedby
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.DHWSetControl.BaseClasses.PartialTSet_DHW_Control(
                final T_DHW=distributionParameters.TDHW_nominal) annotation (
                choicesAllMatching=true, Placement(transformation(extent={{-216,
                      66},{-192,90}})));
            BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatingCurve
              heatingCurve(
              TRoomSet=bivalentControlData.TSetRoomConst,
              GraHeaCurve=bivalentControlData.gradientHeatCurve,
              THeaThres=bivalentControlData.TSetRoomConst,
              dTOffSet_HC=bivalentControlData.dTOffSetHeatCurve) annotation (
                Placement(transformation(extent={{-212,18},{-190,40}})));
            Modelica.Blocks.MathBoolean.Or
                                       HRactive(nu=3)
                                                annotation (Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={15,25})));
            Modelica.Blocks.Logical.Or HP_active
                                                annotation (Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={27,91})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.BaseClasses.PartialHPNSetController
              HP_nSet_Controller annotation (choicesAllMatching=true, Placement(
                  transformation(extent={{82,64},{112,92}})));
            Modelica.Blocks.Logical.Switch switch1
              annotation (Placement(transformation(extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={63,73})));
            Modelica.Blocks.Sources.Constant const_dT_loading1(k=distributionParameters.dTTra_nominal[1])
                                                                    annotation (Placement(
                  transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=180,
                  origin={14,58})));

            Modelica.Blocks.MathBoolean.Or
                                       DHWHysOrLegionella(nu=4)
              "Use the HR if the HP reached its limit" annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={-77,69})));
            AixLib.Controls.HeatPump.SafetyControls.SafetyControl securityControl(
              final minRunTime=safetyControl.minRunTime,
              final minLocTime=safetyControl.minLocTime,
              final maxRunPerHou=safetyControl.maxRunPerHou,
              final use_opeEnv=safetyControl.use_opeEnv,
              final use_opeEnvFroRec=false,
              final dataTable=AixLib.DataBase.HeatPump.EN14511.Vitocal200AWO201(
                  tableUppBou=[-20,50; -10,60; 30,60; 35,55]),
              final tableUpp=safetyControl.tableUpp,
              final use_minRunTime=safetyControl.use_minRunTime,
              final use_minLocTime=safetyControl.use_minLocTime,
              final use_runPerHou=safetyControl.use_runPerHou,
              final dTHystOperEnv=safetyControl.dT_opeEnv,
              final use_deFro=false,
              final minIceFac=0,
              final use_chiller=false,
              final calcPel_deFro=0,
              final pre_n_start=safetyControl.pre_n_start_hp,
              use_antFre=false) annotation (Placement(transformation(
                  extent={{-16,-17},{16,17}},
                  rotation=0,
                  origin={210,81})));
            Modelica.Blocks.Sources.BooleanConstant hp_mode(final k=true) annotation (
                Placement(transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={155,69})));
            Modelica.Blocks.Sources.Constant hp_iceFac(final k=1) annotation (Placement(
                  transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={-181,-85})));

            Modelica.Blocks.Routing.RealPassThrough realPassThrough_T_Amb1
              "Only used to make warning disappear, has no effect on model veloccity"
              annotation (Placement(transformation(extent={{-242,-102},{-220,-80}})));

            Modelica.Blocks.Logical.Switch switchHR annotation (Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={43,25})));
            Modelica.Blocks.Sources.Constant constZero(final k=0) annotation (Placement(
                  transformation(
                  extent={{2,-2},{-2,2}},
                  rotation=180,
                  origin={24,10})));
            Modelica.Blocks.Math.Max max annotation (Placement(transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=180,
                  origin={24,38})));

            Modelica.Blocks.Math.Add add_dT_LoadingBuf
              annotation (Placement(transformation(extent={{38,54},{48,64}})));
            Modelica.Blocks.Sources.Constant const_dT_loading2(k=distributionParameters.dTTraDHW_nominal
                   + bivalentControlData.dTHysDHW/2) annotation (Placement(transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=180,
                  origin={14,74})));
            Modelica.Blocks.Math.Add add_dT_LoadingDHW
              annotation (Placement(transformation(extent={{36,78},{46,88}})));

            Modelica.Blocks.Math.BooleanToReal booleanToReal annotation (Placement(
                  transformation(
                  extent={{-6,-6},{6,6}},
                  rotation=270,
                  origin={-38,-36})));
            Modelica.Blocks.Logical.Not bufOn "buffer is charged" annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=270,
                  origin={-37,-17})));
            Utilities.SupervisoryControl.SupervisoryControl supervisoryControlDHW(ctrlType=
                  supCtrlTypeDHWSet)
              annotation (Placement(transformation(extent={{-182,72},{-170,84}})));
            parameter Utilities.SupervisoryControl.Types.SupervisoryControlType
              supCtrlTypeDHWSet = Utilities.SupervisoryControl.Types.SupervisoryControlType.Local "Type of supervisory control for DHW Setpoint";
            Modelica.Blocks.Logical.Switch switchHR_Heating annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={117,37})));
            Modelica.Blocks.Logical.Switch switchHR_DHW annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={121,15})));
            Modelica.Blocks.Sources.Constant constZero1(final k=0)
                                                                  annotation (Placement(
                  transformation(
                  extent={{2,-2},{-2,2}},
                  rotation=180,
                  origin={102,32})));
            Modelica.Blocks.Sources.Constant constZero2(final k=0)
                                                                  annotation (Placement(
                  transformation(
                  extent={{2,-2},{-2,2}},
                  rotation=180,
                  origin={106,8})));
            Modelica.Blocks.MathBoolean.Or HRactive_DHW(nu=2) annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={87,13})));
          equation
            connect(BufferOnOffController.T_Top, sigBusDistr.TStoBufTopMea) annotation (
                Line(points={{-128.8,45.9},{-316,45.9},{-316,-166},{4,-166},{4,-100},{1,-100}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(DHWOnOffContoller.T_Top, sigBusDistr.TStoDHWTopMea) annotation (Line(
                  points={{-128.8,91.6},{-316,91.6},{-316,-166},{1,-166},{1,-100}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(heatingCurve.TSet, BufferOnOffController.T_Set) annotation (Line(
                  points={{-188.9,29},{-120,29},{-120,33.3}}, color={0,0,127}));

            connect(DHWOnOffContoller.T_bot, sigBusDistr.TStoDHWTopMea) annotation (Line(
                  points={{-128.8,82},{-318,82},{-318,-166},{1,-166},{1,-100}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(HP_active.y, HP_nSet_Controller.HP_On) annotation (Line(points={{32.5,
                    91},{70,91},{70,78},{79,78}}, color={255,0,255}));
            connect(sigBusDistr, TSet_DHW.sigBusDistr) annotation (Line(
                points={{1,-100},{-2,-100},{-2,-152},{-292,-152},{-292,77.88},{-216,77.88}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));

            connect(DHWOnOffContoller.Auxilliar_Heater_On, HRactive.u[1]) annotation (
                Line(points={{-110.88,82},{-22,82},{-22,23.8333},{10,23.8333}}, color={
                    255,0,255}));
            connect(BufferOnOffController.Auxilliar_Heater_On, HRactive.u[2]) annotation (
               Line(points={{-110.88,37.5},{-94,37.5},{-94,25},{10,25}},           color=
                    {255,0,255}));
            connect(TSet_DHW.y, HRactive.u[3]) annotation (Line(points={{-190.8,
                    71.04},{-96,71.04},{-96,26.1667},{10,26.1667}},                 color=
                   {255,0,255}));
            connect(securityControl.sigBusHP, sigBusGen.hp_bus) annotation (Line(
                points={{192,69.27},{180,69.27},{180,70},{184,70},{184,-54},{-152,-54},{-152,
                    -99}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(securityControl.modeOut, sigBusGen.hp_bus.modeSet)
              annotation (Line(points={{227.333,77.6},{268,77.6},{268,-136},{
                    -152,-136},{-152,-99}},            color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(securityControl.modeSet, hp_mode.y) annotation (Line(points={{191.867,
                    77.6},{168,77.6},{168,69},{162.7,69}}, color={255,0,255}));
            connect(securityControl.nOut, sigBusGen.hp_bus.nSet) annotation (Line(
                  points={{227.333,84.4},{264,84.4},{264,-132},{-42,-132},{-42,
                    -99},{-152,-99}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(hp_iceFac.y, sigBusGen.hp_bus.iceFacMea) annotation (Line(
                  points={{-173.3,-85},{-156.65,-85},{-156.65,-99},{-152,-99}},
                                color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(HP_nSet_Controller.n_Set, securityControl.nSet) annotation (Line(
                  points={{113.5,78},{144,78},{144,84.4},{191.867,84.4}}, color={0,0,127}));
            connect(BufferOnOffController.HP_On, HP_active.u2) annotation (Line(points={{-110.88,
                    45.9},{-78,45.9},{-78,54},{-38,54},{-38,87},{21,87}},
                                                           color={255,0,255}));
            connect(DHWOnOffContoller.HP_On, HP_active.u1) annotation (Line(points={{-110.88,
                    91.6},{-32,91.6},{-32,91},{21,91}},    color={255,0,255}));
            connect(DHWHysOrLegionella.y, sigBusDistr.dhw_on) annotation (Line(
                  points={{-71.25,69},{-26,69},{-26,-100},{1,-100}},
                  color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(DHWHysOrLegionella.y, switch1.u2) annotation (Line(points={{-71.25,69},
                    {-20,69},{-20,73},{57,73}},             color={255,0,255}));

            connect(realPassThrough_T_Amb1.y, sigBusGen.hp_bus.TOdaMea) annotation (Line(
                  points={{-218.9,-91},{-200,-91},{-200,-99},{-152,-99}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(realPassThrough_T_Amb1.u, weaBus.TDryBul) annotation (
                Line(points={{-244.2,-91},{-256,-91},{-256,2},{-237,2}},            color=
                   {0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(TSet_DHW.y, DHWHysOrLegionella.u[1]) annotation (Line(points={{-190.8,
                    71.04},{-96,71.04},{-96,67.6875},{-82,67.6875}},    color={255,0,255}));
            connect(DHWOnOffContoller.Auxilliar_Heater_On, DHWHysOrLegionella.u[2])
              annotation (Line(points={{-110.88,82},{-92,82},{-92,68.5625},{-82,68.5625}},
                                                                                  color={
                    255,0,255}));
            connect(DHWOnOffContoller.HP_On, DHWHysOrLegionella.u[3]) annotation (Line(
                  points={{-110.88,91.6},{-90,91.6},{-90,69.4375},{-82,69.4375}},
                  color={255,0,255}));
            connect(TSet_DHW.y, DHWHysOrLegionella.u[4]) annotation (Line(points={{-190.8,
                    71.04},{-136.4,71.04},{-136.4,70.3125},{-82,70.3125}},
                                                                         color={255,0,255}));
            connect(realPassThrough_T_Amb1.y, DHWOnOffContoller.T_oda) annotation (Line(
                  points={{-218.9,-91},{-218.9,-62},{-250,-62},{-250,92},{-120,92},{-120,
                    94.96}}, color={0,0,127}));
            connect(realPassThrough_T_Amb1.y, BufferOnOffController.T_oda) annotation (
                Line(points={{-218.9,-91},{-218.9,-64},{-252,-64},{-252,48.84},{-120,
                    48.84}}, color={0,0,127}));
            connect(BufferOnOffController.T_bot, sigBusDistr.TStoBufTopMea) annotation (
                Line(points={{-128.8,37.5},{-130,37.5},{-130,-86},{134,-86},{134,-100},{1,
                    -100}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(HRactive.y, switchHR.u2)
              annotation (Line(points={{20.75,25},{37,25}}, color={255,0,255}));
            connect(constZero.y, switchHR.u3) annotation (Line(points={{26.2,10},{28,10},{
                    28,21},{37,21}}, color={0,0,127}));
            connect(max.y, switchHR.u1)
              annotation (Line(points={{28.4,38},{37,38},{37,29}}, color={0,0,127}));
            connect(BufferOnOffController.Auxilliar_Heater_set, max.u1) annotation (Line(
                  points={{-110.88,34.98},{-84,34.98},{-84,35.6},{19.2,35.6}}, color={0,0,
                    127}));
            connect(DHWOnOffContoller.Auxilliar_Heater_set, max.u2) annotation (Line(
                  points={{-110.88,79.12},{-104,79.12},{-104,64},{-10,64},{-10,40.4},{19.2,
                    40.4}}, color={0,0,127}));
            connect(switchHR.y, sigBusGen.hr_on) annotation (Line(points={{48.5,25},{62,25},
                    {62,-48},{-152,-48},{-152,-99}},  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(realPassThrough_T_Amb1.y, heatingCurve.TOda) annotation (Line(
                  points={{-218.9,-91},{-208,-91},{-208,-28},{-226,-28},{-226,29},{
                    -214.2,29}}, color={0,0,127}));
            connect(HP_nSet_Controller.IsOn, sigBusGen.hp_bus.onOffMea) annotation (Line(
                  points={{88,61.2},{88,-58},{-152,-58},{-152,-99}}, color={255,0,255}),
                Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(const_dT_loading2.y,add_dT_LoadingDHW. u2) annotation (Line(points={{18.4,74},
                    {24,74},{24,80},{35,80}},                  color={0,0,127}));
            connect(switch1.y, HP_nSet_Controller.T_Set) annotation (Line(points={{68.5,
                    73},{70,73},{70,86.4},{79,86.4}}, color={0,0,127}));
            connect(heatingCurve.TSet, add_dT_LoadingBuf.u1) annotation (Line(points={{
                    -188.9,29},{4,29},{4,62},{37,62}}, color={0,0,127}));
            connect(add_dT_LoadingBuf.y, switch1.u3) annotation (Line(points={{48.5,59},{
                    54,59},{54,69},{57,69}}, color={0,0,127}));
            connect(add_dT_LoadingDHW.y, switch1.u1) annotation (Line(points={{46.5,83},{
                    51.25,83},{51.25,77},{57,77}}, color={0,0,127}));
            connect(const_dT_loading1.y, add_dT_LoadingBuf.u2) annotation (Line(points={{
                    18.4,58},{26,58},{26,56},{37,56}}, color={0,0,127}));
            connect(booleanToReal.y, sigBusGen.uThrWayVal) annotation (Line(points={{-38,
                    -42.6},{-38,-62},{-152,-62},{-152,-99}},color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(booleanToReal.u, bufOn.y) annotation (Line(points={{-38,-28.8},{-38,
                    -26},{-37,-26},{-37,-22.5}}, color={255,0,255}));
            connect(bufOn.u, DHWHysOrLegionella.y) annotation (Line(points={{-37,-11},{
                    -37,70},{-71.25,70},{-71.25,69}}, color={255,0,255}));
            connect(TSet_DHW.TSet_DHW, supervisoryControlDHW.uLoc) annotation (Line(
                  points={{-190.8,78},{-188,78},{-188,73.2},{-183.2,73.2}}, color={0,0,
                    127}));
            connect(supervisoryControlDHW.y, DHWOnOffContoller.T_Set) annotation (Line(
                  points={{-168.8,78},{-150,78},{-150,74},{-122,74},{-122,77.2},{-120,
                    77.2}}, color={0,0,127}));
            connect(supervisoryControlDHW.y, add_dT_LoadingDHW.u1) annotation (Line(
                  points={{-168.8,78},{-150,78},{-150,76},{-10,76},{-10,86},{35,86}},
                  color={0,0,127}));
            connect(supervisoryControlDHW.activateInt, sigBusHyd.overwriteTSetDHW)
              annotation (Line(points={{-183.2,78},{-186,78},{-186,94},{-28,94},{-28,101}},
                  color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(supervisoryControlDHW.uSup, sigBusHyd.TSetDHW) annotation (Line(
                  points={{-183.2,82.8},{-183.2,92},{-28,92},{-28,101}}, color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            connect(constZero2.y, switchHR_DHW.u3)
              annotation (Line(points={{108.2,8},{112,8},{112,11},{115,11}},
                                                                   color={0,0,127}));
            connect(constZero1.y, switchHR_Heating.u3)
              annotation (Line(points={{104.2,32},{104.2,33},{111,33}},
                                                                      color={0,0,127}));
            connect(DHWOnOffContoller.Auxilliar_Heater_set, switchHR_DHW.u1) annotation (
                Line(points={{-110.88,79.12},{-110.88,62},{-94,62},{-94,42},{6,42},{6,44},
                    {96,44},{96,19},{115,19}},
                         color={0,0,127}));
            connect(BufferOnOffController.Auxilliar_Heater_set, switchHR_Heating.u1)
              annotation (Line(points={{-110.88,34.98},{12,34.98},{12,48},{106,48},{106,41},
                    {111,41}}, color={0,0,127}));
            connect(BufferOnOffController.Auxilliar_Heater_On, switchHR_Heating.u2)
              annotation (Line(points={{-110.88,37.5},{-110.88,36},{-94,36},{-94,24},{4,24},
                    {4,42},{14,42},{14,46},{104,46},{104,37},{111,37}}, color={255,0,255}));
            connect(HRactive_DHW.y, switchHR_DHW.u2) annotation (Line(points={{
                    92.75,13},{92.75,12},{100,12},{100,15},{115,15}}, color={
                    255,0,255}));
            connect(DHWOnOffContoller.Auxilliar_Heater_On, HRactive_DHW.u[1])
              annotation (Line(points={{-110.88,82},{-22,82},{-22,22},{4,22},{4,
                    4},{74,4},{74,12.125},{82,12.125}}, color={255,0,255}));
            connect(TSet_DHW.y, HRactive_DHW.u[2]) annotation (Line(points={{
                    -190.8,71.04},{-190.8,70},{-96,70},{-96,26},{-22,26},{-22,
                    22},{4,22},{4,4},{74,4},{74,13.875},{82,13.875}}, color={
                    255,0,255}));
            connect(switchHR_Heating.y, sigBusGen.hr_on_forHeating) annotation (
               Line(points={{122.5,37},{122.5,36},{130,36},{130,2},{-152,2},{
                    -152,-99}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(switchHR_DHW.y, sigBusGen.hr_on_forDHW) annotation (Line(
                  points={{126.5,15},{126.5,14},{132,14},{132,-2},{-152,-2},{
                    -152,-99}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(DHWOnOffContoller.HP_On, sigBusGen.hp_on_forDHW)
              annotation (Line(points={{-110.88,91.6},{-110.88,90},{-90,90},{
                    -90,-4},{-152,-4},{-152,-99}}, color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(BufferOnOffController.HP_On, sigBusGen.hp_on_forHeating)
              annotation (Line(points={{-110.88,45.9},{-110.88,50},{-130,50},{
                    -130,26},{-152,26},{-152,-99}}, color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            annotation (Diagram(graphics={
                  Rectangle(
                    extent={{-240,100},{-50,60}},
                    lineColor={238,46,47},
                    lineThickness=1),
                  Text(
                    extent={{-234,94},{-140,128}},
                    lineColor={238,46,47},
                    lineThickness=1,
                    textString="DHW Control"),
                  Rectangle(
                    extent={{-240,58},{-50,14}},
                    lineColor={0,140,72},
                    lineThickness=1),
                  Text(
                    extent={{-216,-16},{-122,18}},
                    lineColor={0,140,72},
                    lineThickness=1,
                    textString="Buffer Control"),
                  Rectangle(
                    extent={{-2,100},{132,50}},
                    lineColor={28,108,200},
                    lineThickness=1),
                  Text(
                    extent={{14,134},{118,114}},
                    lineColor={28,108,200},
                    lineThickness=1,
                    textString="Heat Pump Control"),
                  Rectangle(
                    extent={{0,46},{132,4}},
                    lineColor={162,29,33},
                    lineThickness=1),
                  Text(
                    extent={{2,4},{106,-16}},
                    lineColor={162,29,33},
                    lineThickness=1,
                    textString="Heating Rod Control"),
                  Rectangle(
                    extent={{138,100},{240,52}},
                    lineColor={28,108,200},
                    lineThickness=1),
                  Text(
                    extent={{138,122},{242,102}},
                    lineColor={28,108,200},
                    lineThickness=1,
                    textString="Heat Pump Safety")}));
          end PartialTwoPoint_HPS_Controller_GenWithTwoPorts;

          partial model SystemWithThermostaticValveControl_nightLowering
            extends PartialControl;
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.ThermostaticValveController.BaseClasses.PartialThermostaticValveController
              thermostaticValveController constrainedby
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.ThermostaticValveController.BaseClasses.PartialThermostaticValveController(
                final nZones=transferParameters.nParallelDem, final
                leakageOpening=thermostaticValveParameters.leakageOpening)
              annotation (choicesAllMatching=true, Placement(transformation(
                    extent={{112,-94},{138,-64}})));
            replaceable parameter
              BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
              thermostaticValveParameters annotation (choicesAllMatching=true,
                Placement(transformation(extent={{178,-80},{198,-60}})));
            Modelica.Blocks.Sources.Pulse pulse(
              amplitude=2,
              width=7/24*100,
              period=24*60*60,
              offset=291.15) annotation (Placement(transformation(extent={{78,
                      -92},{98,-72}})));
          equation
            connect(thermostaticValveController.opening, sigBusTra.opening) annotation (
                Line(points={{140.6,-79},{174,-79},{174,-100}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(thermostaticValveController.TZoneMea, buiMeaBus.TZoneMea) annotation (
               Line(points={{109.4,-70},{104,-70},{104,-42},{238,-42},{238,103},{65,103}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(pulse.y, thermostaticValveController.TZoneSet[1])
              annotation (Line(points={{99,-82},{104,-82},{104,-88},{109.4,-88}},
                  color={0,0,127}));
            annotation (Diagram(graphics={
                  Rectangle(
                    extent={{74,-58},{206,-100}},
                    lineColor={162,29,33},
                    lineThickness=1),
                  Text(
                    extent={{76,-100},{180,-120}},
                    lineColor={162,29,33},
                    lineThickness=1,
                    textString="Thermostatic Valve")}));
          end SystemWithThermostaticValveControl_nightLowering;

          partial model PartialTwoPoint_HPS_Controller_nightLowering
            "Partial model with replaceable blocks for rule based control of HPS using on off heating rods"
            extends
              BESMod.HugosProject.Systems.Hydraulical.Control.BaseClasses.SystemWithThermostaticValveControl_nightLowering;
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.BaseClasses.PartialOnOffController
              DHWOnOffContoller annotation (choicesAllMatching=true, Placement(
                  transformation(extent={{-128,78},{-112,94}})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.BaseClasses.PartialOnOffController
              BufferOnOffController annotation (choicesAllMatching=true,
                Placement(transformation(extent={{-128,34},{-112,48}})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.HeatPumpSafetyControl
              safetyControl annotation (choicesAllMatching=true, Placement(
                  transformation(extent={{200,30},{220,50}})));
            replaceable parameter RecordsCollection.BivalentHeatPumpControlDataDefinition
              bivalentControlData constrainedby
              RecordsCollection.BivalentHeatPumpControlDataDefinition(
                final TOda_nominal=generationParameters.TOda_nominal,
                TSup_nominal=generationParameters.TSup_nominal[1],
                TSetRoomConst=sum(transferParameters.TDem_nominal)/transferParameters.nParallelDem)
              annotation (choicesAllMatching=true, Placement(transformation(extent={{-92,-32},{-70,-10}})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.DHWSetControl.BaseClasses.PartialTSet_DHW_Control
              TSet_DHW constrainedby
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.DHWSetControl.BaseClasses.PartialTSet_DHW_Control(
                final T_DHW=distributionParameters.TDHW_nominal) annotation (
                choicesAllMatching=true, Placement(transformation(extent={{-216,
                      66},{-192,90}})));
            BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatingCurve
              heatingCurve(
              TRoomSet=bivalentControlData.TSetRoomConst,
              GraHeaCurve=bivalentControlData.gradientHeatCurve,
              THeaThres=bivalentControlData.TSetRoomConst,
              dTOffSet_HC=bivalentControlData.dTOffSetHeatCurve) annotation (
                Placement(transformation(extent={{-212,18},{-190,40}})));
            Modelica.Blocks.MathBoolean.Or
                                       HRactive(nu=3)
                                                annotation (Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={15,25})));
            Modelica.Blocks.Logical.Or HP_active
                                                annotation (Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={27,91})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.BaseClasses.PartialHPNSetController
              HP_nSet_Controller annotation (choicesAllMatching=true, Placement(
                  transformation(extent={{82,64},{112,92}})));
            Modelica.Blocks.Logical.Switch switch1
              annotation (Placement(transformation(extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={63,73})));
            Modelica.Blocks.Sources.Constant const_dT_loading1(k=distributionParameters.dTTra_nominal[1])
                                                                    annotation (Placement(
                  transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=180,
                  origin={14,58})));

            Modelica.Blocks.MathBoolean.Or
                                       DHWHysOrLegionella(nu=4)
              "Use the HR if the HP reached its limit" annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={-77,69})));
            AixLib.Controls.HeatPump.SafetyControls.SafetyControl securityControl(
              final minRunTime=safetyControl.minRunTime,
              final minLocTime=safetyControl.minLocTime,
              final maxRunPerHou=safetyControl.maxRunPerHou,
              final use_opeEnv=safetyControl.use_opeEnv,
              final use_opeEnvFroRec=false,
              final dataTable=AixLib.DataBase.HeatPump.EN14511.Vitocal200AWO201(
                  tableUppBou=[-20,50; -10,60; 30,60; 35,55]),
              final tableUpp=safetyControl.tableUpp,
              final use_minRunTime=safetyControl.use_minRunTime,
              final use_minLocTime=safetyControl.use_minLocTime,
              final use_runPerHou=safetyControl.use_runPerHou,
              final dTHystOperEnv=safetyControl.dT_opeEnv,
              final use_deFro=false,
              final minIceFac=0,
              final use_chiller=false,
              final calcPel_deFro=0,
              final pre_n_start=safetyControl.pre_n_start_hp,
              use_antFre=false) annotation (Placement(transformation(
                  extent={{-16,-17},{16,17}},
                  rotation=0,
                  origin={210,81})));
            Modelica.Blocks.Sources.BooleanConstant hp_mode(final k=true) annotation (
                Placement(transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={155,69})));
            Modelica.Blocks.Sources.Constant hp_iceFac(final k=1) annotation (Placement(
                  transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={-181,-85})));

            Modelica.Blocks.Routing.RealPassThrough realPassThrough_T_Amb1
              "Only used to make warning disappear, has no effect on model veloccity"
              annotation (Placement(transformation(extent={{-242,-102},{-220,-80}})));

            Modelica.Blocks.Logical.Switch switchHR annotation (Placement(transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=0,
                  origin={43,25})));
            Modelica.Blocks.Sources.Constant constZero(final k=0) annotation (Placement(
                  transformation(
                  extent={{2,-2},{-2,2}},
                  rotation=180,
                  origin={24,10})));
            Modelica.Blocks.Math.Max max annotation (Placement(transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=180,
                  origin={24,38})));

            Modelica.Blocks.Math.Add add_dT_LoadingBuf
              annotation (Placement(transformation(extent={{38,54},{48,64}})));
            Modelica.Blocks.Sources.Constant const_dT_loading2(k=distributionParameters.dTTraDHW_nominal
                   + bivalentControlData.dTHysDHW/2) annotation (Placement(transformation(
                  extent={{4,-4},{-4,4}},
                  rotation=180,
                  origin={14,74})));
            Modelica.Blocks.Math.Add add_dT_LoadingDHW
              annotation (Placement(transformation(extent={{36,78},{46,88}})));

            Modelica.Blocks.Math.BooleanToReal booleanToReal annotation (Placement(
                  transformation(
                  extent={{-6,-6},{6,6}},
                  rotation=270,
                  origin={-38,-36})));
            Modelica.Blocks.Logical.Not bufOn "buffer is charged" annotation (Placement(
                  transformation(
                  extent={{-5,-5},{5,5}},
                  rotation=270,
                  origin={-37,-17})));
            Utilities.SupervisoryControl.SupervisoryControl supervisoryControlDHW(ctrlType=
                  supCtrlTypeDHWSet)
              annotation (Placement(transformation(extent={{-182,72},{-170,84}})));
            parameter Utilities.SupervisoryControl.Types.SupervisoryControlType
              supCtrlTypeDHWSet = Utilities.SupervisoryControl.Types.SupervisoryControlType.Local "Type of supervisory control for DHW Setpoint";
          equation
            connect(BufferOnOffController.T_Top, sigBusDistr.TStoBufTopMea) annotation (
                Line(points={{-128.8,45.9},{-316,45.9},{-316,-166},{4,-166},{4,-100},{1,-100}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(DHWOnOffContoller.T_Top, sigBusDistr.TStoDHWTopMea) annotation (Line(
                  points={{-128.8,91.6},{-316,91.6},{-316,-166},{1,-166},{1,-100}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(heatingCurve.TSet, BufferOnOffController.T_Set) annotation (Line(
                  points={{-188.9,29},{-120,29},{-120,33.3}}, color={0,0,127}));

            connect(DHWOnOffContoller.T_bot, sigBusDistr.TStoDHWTopMea) annotation (Line(
                  points={{-128.8,82},{-318,82},{-318,-166},{1,-166},{1,-100}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(HP_active.y, HP_nSet_Controller.HP_On) annotation (Line(points={{32.5,
                    91},{70,91},{70,78},{79,78}}, color={255,0,255}));
            connect(sigBusDistr, TSet_DHW.sigBusDistr) annotation (Line(
                points={{1,-100},{-2,-100},{-2,-152},{-292,-152},{-292,77.88},{-216,77.88}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));

            connect(DHWOnOffContoller.Auxilliar_Heater_On, HRactive.u[1]) annotation (
                Line(points={{-110.88,82},{-22,82},{-22,23.8333},{10,23.8333}}, color={
                    255,0,255}));
            connect(BufferOnOffController.Auxilliar_Heater_On, HRactive.u[2]) annotation (
               Line(points={{-110.88,37.5},{-94,37.5},{-94,25},{10,25}},           color=
                    {255,0,255}));
            connect(TSet_DHW.y, HRactive.u[3]) annotation (Line(points={{-190.8,
                    71.04},{-96,71.04},{-96,26.1667},{10,26.1667}},                 color=
                   {255,0,255}));
            connect(securityControl.sigBusHP, sigBusGen.hp_bus) annotation (Line(
                points={{192,69.27},{180,69.27},{180,70},{184,70},{184,-54},{-152,-54},{-152,
                    -99}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(securityControl.modeOut, sigBusGen.hp_bus.modeSet)
              annotation (Line(points={{227.333,77.6},{268,77.6},{268,-136},{
                    -152,-136},{-152,-99}},            color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(securityControl.modeSet, hp_mode.y) annotation (Line(points={{191.867,
                    77.6},{168,77.6},{168,69},{162.7,69}}, color={255,0,255}));
            connect(securityControl.nOut, sigBusGen.hp_bus.nSet) annotation (Line(
                  points={{227.333,84.4},{264,84.4},{264,-132},{-42,-132},{-42,
                    -99},{-152,-99}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(hp_iceFac.y, sigBusGen.hp_bus.iceFacMea) annotation (Line(
                  points={{-173.3,-85},{-156.65,-85},{-156.65,-99},{-152,-99}},
                                color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(HP_nSet_Controller.n_Set, securityControl.nSet) annotation (Line(
                  points={{113.5,78},{144,78},{144,84.4},{191.867,84.4}}, color={0,0,127}));
            connect(BufferOnOffController.HP_On, HP_active.u2) annotation (Line(points={{-110.88,
                    45.9},{-78,45.9},{-78,54},{-38,54},{-38,87},{21,87}},
                                                           color={255,0,255}));
            connect(DHWOnOffContoller.HP_On, HP_active.u1) annotation (Line(points={{-110.88,
                    91.6},{-32,91.6},{-32,91},{21,91}},    color={255,0,255}));
            connect(DHWHysOrLegionella.y, sigBusDistr.dhw_on) annotation (Line(
                  points={{-71.25,69},{-26,69},{-26,-100},{1,-100}},
                  color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(DHWHysOrLegionella.y, switch1.u2) annotation (Line(points={{-71.25,69},
                    {-20,69},{-20,73},{57,73}},             color={255,0,255}));

            connect(realPassThrough_T_Amb1.y, sigBusGen.hp_bus.TOdaMea) annotation (Line(
                  points={{-218.9,-91},{-200,-91},{-200,-99},{-152,-99}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(realPassThrough_T_Amb1.u, weaBus.TDryBul) annotation (
                Line(points={{-244.2,-91},{-256,-91},{-256,2},{-237,2}},            color=
                   {0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(TSet_DHW.y, DHWHysOrLegionella.u[1]) annotation (Line(points={{-190.8,
                    71.04},{-96,71.04},{-96,67.6875},{-82,67.6875}},    color={255,0,255}));
            connect(DHWOnOffContoller.Auxilliar_Heater_On, DHWHysOrLegionella.u[2])
              annotation (Line(points={{-110.88,82},{-92,82},{-92,68.5625},{-82,68.5625}},
                                                                                  color={
                    255,0,255}));
            connect(DHWOnOffContoller.HP_On, DHWHysOrLegionella.u[3]) annotation (Line(
                  points={{-110.88,91.6},{-90,91.6},{-90,69.4375},{-82,69.4375}},
                  color={255,0,255}));
            connect(TSet_DHW.y, DHWHysOrLegionella.u[4]) annotation (Line(points={{-190.8,
                    71.04},{-136.4,71.04},{-136.4,70.3125},{-82,70.3125}},
                                                                         color={255,0,255}));
            connect(realPassThrough_T_Amb1.y, DHWOnOffContoller.T_oda) annotation (Line(
                  points={{-218.9,-91},{-218.9,-62},{-250,-62},{-250,92},{-120,92},{-120,
                    94.96}}, color={0,0,127}));
            connect(realPassThrough_T_Amb1.y, BufferOnOffController.T_oda) annotation (
                Line(points={{-218.9,-91},{-218.9,-64},{-252,-64},{-252,48.84},{-120,
                    48.84}}, color={0,0,127}));
            connect(BufferOnOffController.T_bot, sigBusDistr.TStoBufTopMea) annotation (
                Line(points={{-128.8,37.5},{-130,37.5},{-130,-86},{134,-86},{134,-100},{1,
                    -100}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(HRactive.y, switchHR.u2)
              annotation (Line(points={{20.75,25},{37,25}}, color={255,0,255}));
            connect(constZero.y, switchHR.u3) annotation (Line(points={{26.2,10},{28,10},{
                    28,21},{37,21}}, color={0,0,127}));
            connect(max.y, switchHR.u1)
              annotation (Line(points={{28.4,38},{37,38},{37,29}}, color={0,0,127}));
            connect(BufferOnOffController.Auxilliar_Heater_set, max.u1) annotation (Line(
                  points={{-110.88,34.98},{-84,34.98},{-84,35.6},{19.2,35.6}}, color={0,0,
                    127}));
            connect(DHWOnOffContoller.Auxilliar_Heater_set, max.u2) annotation (Line(
                  points={{-110.88,79.12},{-104,79.12},{-104,64},{-10,64},{-10,40.4},{19.2,
                    40.4}}, color={0,0,127}));
            connect(switchHR.y, sigBusGen.hr_on) annotation (Line(points={{48.5,25},{62,25},
                    {62,-48},{-152,-48},{-152,-99}},  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(realPassThrough_T_Amb1.y, heatingCurve.TOda) annotation (Line(
                  points={{-218.9,-91},{-208,-91},{-208,-28},{-226,-28},{-226,29},{
                    -214.2,29}}, color={0,0,127}));
            connect(HP_nSet_Controller.IsOn, sigBusGen.hp_bus.onOffMea) annotation (Line(
                  points={{88,61.2},{88,-58},{-152,-58},{-152,-99}}, color={255,0,255}),
                Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(const_dT_loading2.y,add_dT_LoadingDHW. u2) annotation (Line(points={{18.4,74},
                    {24,74},{24,80},{35,80}},                  color={0,0,127}));
            connect(switch1.y, HP_nSet_Controller.T_Set) annotation (Line(points={{68.5,
                    73},{70,73},{70,86.4},{79,86.4}}, color={0,0,127}));
            connect(heatingCurve.TSet, add_dT_LoadingBuf.u1) annotation (Line(points={{
                    -188.9,29},{4,29},{4,62},{37,62}}, color={0,0,127}));
            connect(add_dT_LoadingBuf.y, switch1.u3) annotation (Line(points={{48.5,59},{
                    54,59},{54,69},{57,69}}, color={0,0,127}));
            connect(add_dT_LoadingDHW.y, switch1.u1) annotation (Line(points={{46.5,83},{
                    51.25,83},{51.25,77},{57,77}}, color={0,0,127}));
            connect(const_dT_loading1.y, add_dT_LoadingBuf.u2) annotation (Line(points={{
                    18.4,58},{26,58},{26,56},{37,56}}, color={0,0,127}));
            connect(booleanToReal.y, sigBusDistr.uThrWayVal) annotation (Line(points={{
                    -38,-42.6},{-38,-62},{1,-62},{1,-100}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(booleanToReal.u, bufOn.y) annotation (Line(points={{-38,-28.8},{-38,
                    -26},{-37,-26},{-37,-22.5}}, color={255,0,255}));
            connect(bufOn.u, DHWHysOrLegionella.y) annotation (Line(points={{-37,-11},{
                    -37,70},{-71.25,70},{-71.25,69}}, color={255,0,255}));
            connect(TSet_DHW.TSet_DHW, supervisoryControlDHW.uLoc) annotation (Line(
                  points={{-190.8,78},{-188,78},{-188,73.2},{-183.2,73.2}}, color={0,0,
                    127}));
            connect(supervisoryControlDHW.y, DHWOnOffContoller.T_Set) annotation (Line(
                  points={{-168.8,78},{-150,78},{-150,74},{-122,74},{-122,77.2},{-120,
                    77.2}}, color={0,0,127}));
            connect(supervisoryControlDHW.y, add_dT_LoadingDHW.u1) annotation (Line(
                  points={{-168.8,78},{-150,78},{-150,76},{-10,76},{-10,86},{35,86}},
                  color={0,0,127}));
            connect(supervisoryControlDHW.activateInt, sigBusHyd.overwriteTSetDHW)
              annotation (Line(points={{-183.2,78},{-186,78},{-186,94},{-28,94},{-28,101}},
                  color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(supervisoryControlDHW.uSup, sigBusHyd.TSetDHW) annotation (Line(
                  points={{-183.2,82.8},{-183.2,92},{-28,92},{-28,101}}, color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            annotation (Diagram(graphics={
                  Rectangle(
                    extent={{-240,100},{-50,60}},
                    lineColor={238,46,47},
                    lineThickness=1),
                  Text(
                    extent={{-234,94},{-140,128}},
                    lineColor={238,46,47},
                    lineThickness=1,
                    textString="DHW Control"),
                  Rectangle(
                    extent={{-240,58},{-50,14}},
                    lineColor={0,140,72},
                    lineThickness=1),
                  Text(
                    extent={{-216,-16},{-122,18}},
                    lineColor={0,140,72},
                    lineThickness=1,
                    textString="Buffer Control"),
                  Rectangle(
                    extent={{0,100},{132,52}},
                    lineColor={28,108,200},
                    lineThickness=1),
                  Text(
                    extent={{4,122},{108,102}},
                    lineColor={28,108,200},
                    lineThickness=1,
                    textString="Heat Pump Control"),
                  Rectangle(
                    extent={{0,46},{132,4}},
                    lineColor={162,29,33},
                    lineThickness=1),
                  Text(
                    extent={{2,4},{106,-16}},
                    lineColor={162,29,33},
                    lineThickness=1,
                    textString="Heating Rod Control"),
                  Rectangle(
                    extent={{138,100},{240,52}},
                    lineColor={28,108,200},
                    lineThickness=1),
                  Text(
                    extent={{138,122},{242,102}},
                    lineColor={28,108,200},
                    lineThickness=1,
                    textString="Heat Pump Safety")}));
          end PartialTwoPoint_HPS_Controller_nightLowering;
        annotation (Icon(graphics={
                Rectangle(
                  lineColor={200,200,200},
                  fillColor={248,248,248},
                  fillPattern=FillPattern.HorizontalCylinder,
                  extent={{-100.0,-100.0},{100.0,100.0}},
                  radius=25.0),
                Rectangle(
                  lineColor={128,128,128},
                  extent={{-100.0,-100.0},{100.0,100.0}},
                  radius=25.0),
                Ellipse(
                  extent={{-30.0,-30.0},{30.0,30.0}},
                  lineColor={128,128,128},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end BaseClasses;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

          partial record HeatPumpSafetyControl
            extends Modelica.Icons.Record;
            parameter Boolean use_minRunTime=true
              "False if minimal runtime of HP is not considered"
            annotation (Dialog(group="HP-Security: OnOffControl"), choices(checkBox=true));
            parameter Modelica.Units.SI.Time minRunTime=600
              "Mimimum runtime of heat pump" annotation (Dialog(group=
                    "HP-Security: OnOffControl", enable=use_minRunTime));
            parameter Boolean use_minLocTime=true
              "False if minimal locktime of HP is not considered"
              annotation (Dialog(group="HP-Security: OnOffControl"), choices(checkBox=true));
            parameter Modelica.Units.SI.Time minLocTime=1200
              "Minimum lock time of heat pump" annotation (Dialog(group=
                    "HP-Security: OnOffControl", enable=use_minLocTime));
            parameter Boolean use_runPerHou=true
              "False if maximal runs per hour HP are not considered"
              annotation (Dialog(group="HP-Security: OnOffControl"), choices(checkBox=true));
            parameter Integer maxRunPerHou=3 "Maximal number of on/off cycles in one hour. Source: German law"
              annotation (Dialog(group="HP-Security: OnOffControl", enable=use_runPerHou));
            parameter Boolean pre_n_start_hp=true
              "Start value of pre(n) at initial time of heat pump security control"
              annotation (Dialog(group="HP-Security: OnOffControl", descriptionLabel=true),                                                                                             choices(checkBox=true));
            parameter Real tableUpp[:,2]=[-40,70; 40,70] "Upper boundary of envelope" annotation (Dialog(group="HP-Security: Operational Envelope"));
            parameter Boolean use_opeEnv=true
              "False to allow HP to run out of operational envelope" annotation (Dialog(group="HP-Security: Operational Envelope"));

            parameter Real dT_opeEnv=5
              "Delta value for operational envelope used for upper hysteresis. Used to avoid state-events and to model the real world high pressure pressostat." annotation (Dialog(group="HP-Security: Operational Envelope"));

            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end HeatPumpSafetyControl;

          record DefaultSafetyControl
            extends
              Systems.Hydraulical.Control.RecordsCollection.HeatPumpSafetyControl;
          end DefaultSafetyControl;

          partial record BivalentHeatPumpControlDataDefinition
            extends Modelica.Icons.Record;

            parameter Modelica.Units.SI.TemperatureDifference dTHysBui
              "Hysteresis for building demand control"
              annotation (Dialog(group="General"));
            parameter Modelica.Units.SI.TemperatureDifference dTHysDHW
              "Hysteresis for DHW demand control" annotation (Dialog(group="General"));
                parameter Real k     "Proportional gain of Primary PID Controller"
                                                                            annotation(Dialog(group="Primary PID Control",
                enable=use_hydraulic or use_ventilation));
            parameter Modelica.Units.SI.Time T_I
              "Time constant of Integrator block of PI control" annotation (Dialog(group=
                    "Primary PID Control", enable=use_hydraulic or use_ventilation));

            parameter Modelica.Units.SI.Time Ni "Anti wind up constant of PID control"
              annotation (Dialog(group="Primary PID Control", enable=use_hydraulic or
                    use_ventilation));

            parameter Modelica.Units.SI.TemperatureDifference dTOffSetHeatCurve
              "Additional Offset of heating curve"
              annotation (Evaluate=true, Dialog(group="Heating Curve"));
            parameter Modelica.Units.SI.Temperature TOda_nominal
              "Nominal outdoor air temperature";
            parameter Modelica.Units.SI.Temperature TSup_nominal
              "Nominal supply temperature of primary energy system";
            parameter Modelica.Units.SI.Temperature TSetRoomConst=293.15
              "Room set temerature";
            parameter Modelica.Units.SI.Temperature TBiv=TOda_nominal
              "Nominal bivalence temperature. = TOda_nominal for monovalent systems.";

            parameter Real gradientHeatCurve=((TSup_nominal) - (TSetRoomConst + dTOffSetHeatCurve))/(TSetRoomConst-TOda_nominal)  "Heat curve gradient"    annotation(Evaluate=true, Dialog(group=
                    "Heating Curve"));
            parameter Modelica.Units.SI.Time dtHeaRodBui
              "Seconds for regulation when hr should be activated: If lower set temperature is hurt for more than this time period"
              annotation (group="Heat Pumps", Dialog(group="Secondary RBC"));

            parameter Real addSet_dtHeaRodBui
              "Each time dt_hr passes, the output of the heating rod is increased by this amount in percentage. Maximum and default is 100 (on-off hr)%" annotation(Dialog(group=
                    "Secondary RBC"));
            parameter Modelica.Units.SI.Time dtHeaRodDHW
              "Seconds for regulation when hr should be activated: If lower set temperature is hurt for more than this time period"
              annotation (group="Heat Pumps", Dialog(group="Secondary RBC"));

            parameter Real addSet_dtHeaRodDHW
              "Each time dt_hr passes, the output of the heating rod is increased by this amount in percentage. Maximum and default is 100 (on-off hr)%" annotation(Dialog(group=
                    "Secondary RBC"));
            parameter Real nMin
              "Minimum relative input signal of primary device PID control"
              annotation (Dialog(group="Primary PID Control"));

          end BivalentHeatPumpControlDataDefinition;

          record DefaultBivHPControl
            extends BivalentHeatPumpControlDataDefinition(
              addSet_dtHeaRodDHW=1,
              dtHeaRodDHW=30*60,
              addSet_dtHeaRodBui=1,
              dtHeaRodBui=30*60,
              dTHysDHW=10,
              dTHysBui=10,
              nMin=0.3,
              dTOffSetHeatCurve=2,
              Ni=0.9,
              T_I=1200,
              k=0.3);
          end DefaultBivHPControl;

          record ThermostaticValveDataDefinition
            extends Modelica.Icons.Record;
              //Demand - Building
            parameter Real Kvs=1.2   "Kv value at full opening (=1)";
            parameter Real Kv_setT=1.4
              "Kv value when set temperature = measured temperature";
            parameter Real P = 2 "Deviation of P-controller when valve is closed";

            parameter Real leakageOpening = 0.0001
              "may be useful for simulation stability. Always check the influence it has on your results";
            parameter Real k=0.2
                               "Gain of controller";
            parameter Modelica.Units.SI.Time Ti=1800 "Time constant of Integrator block";

            parameter Modelica.Units.SI.PressureDifference dpFixed_nominal=1000
              "Pressure drop of pipe and other resistances that are in series";
            parameter Modelica.Units.SI.PressureDifference dpValve_nominal=1000
              "Nominal pressure drop of fully open valve, used if CvData=IBPSA.Fluid.Types.CvTypes.OpPoint";
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end ThermostaticValveDataDefinition;

          record DefaultBivHPControl_Modifications
            extends BivalentHeatPumpControlDataDefinition(
              addSet_dtHeaRodDHW=1,
              dtHeaRodDHW=30*60,
              addSet_dtHeaRodBui=1,
              dtHeaRodBui=30*60,
              dTHysDHW=10,
              dTHysBui=10,
              nMin=0.3,
              dTOffSetHeatCurve=2,
              Ni=0.9,
              T_I=1200,
              k=0.3);
          end DefaultBivHPControl_Modifications;
        end RecordsCollection;

        model Control_GenWithTwoPorts
          "Control system for generation with two ports"
          extends BaseClasses.PartialTwoPoint_HPS_Controller_GenWithTwoPorts(
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.HeatPumpNSetController.PI_InverterHeatPumpController
              HP_nSet_Controller(
              P=bivalentControlData.k,
              nMin=bivalentControlData.nMin,
              T_I=bivalentControlData.T_I),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ParallelBivalentControl
              BufferOnOffController(
              Hysteresis=bivalentControlData.dTHysBui,
              TCutOff=TCutOff,
              TBiv=bivalentControlData.TBiv,
              TOda_nominal=bivalentControlData.TOda_nominal,
              TRoom=bivalentControlData.TSetRoomConst,
              QDem_flow_nominal=sum(transferParameters.Q_flow_nominal),
              QHP_flow_cutOff=QHP_flow_cutOff),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Components.OnOffController.ParallelBivalentControl
              DHWOnOffContoller(
              Hysteresis=bivalentControlData.dTHysDHW,
              TCutOff=TCutOff,
              TBiv=bivalentControlData.TBiv,
              TOda_nominal=bivalentControlData.TOda_nominal,
              TRoom=bivalentControlData.TSetRoomConst,
              QDem_flow_nominal=sum(transferParameters.Q_flow_nominal),
              QHP_flow_cutOff=QHP_flow_cutOff));

          parameter Modelica.Units.SI.Temperature TCutOff "Cut-off temperature";
          parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff;

        equation
            connect(HP_nSet_Controller.T_Meas, sigBusGen.hp_bus.TConOutMea) annotation (
               Line(points={{97,61.2},{97,-56},{-152,-56},{-152,-99}},  color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));

          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end Control_GenWithTwoPorts;

      end Control;

      package Distribution "Models for the distribution of heat in a HPS"
        extends BESMod.Utilities.Icons.SystemIcon;

        model BuildingOnly "Only loads building"
          extends BaseClasses.PartialDistribution(
            final dpDem_nominal=fill(0, nParallelDem),
            final dpSup_nominal=fill(0, nParallelSup),
            final nParallelSup=nParallelDem,
            final dTTraDHW_nominal=0,
            final QLoss_flow_nominal=f_design .* Q_flow_nominal .- Q_flow_nominal,
            final f_design=fill(1, nParallelDem),
            final dTLoss_nominal=fill(0, nParallelDem),
            final m_flow_nominal=mSup_flow_nominal,
            final TSup_nominal=TDem_nominal .+ dTLoss_nominal .+ dTTra_nominal,
            redeclare package MediumGen = Medium,
            redeclare package MediumDHW = Medium,
            final dTTra_nominal=fill(0, nParallelDem));
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{30,-108},{50,-88}})));
        equation
          connect(portDHW_out, portDHW_in) annotation (Line(points={{100,-22},{88,-22},{
                  88,-16},{76,-16},{76,-82},{100,-82}}, color={0,127,255}));
          connect(portGen_in, portBui_out)
            annotation (Line(points={{-100,80},{0,80},{0,80},{100,80}},
                                                          color={0,127,255}));
          connect(portGen_out, portBui_in)
            annotation (Line(points={{-100,40},{0,40},{0,40},{100,40}},
                                                          color={0,127,255}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{50,-98},{70,-98}},
              color={0,0,0},
              thickness=1));
        end BuildingOnly;

        model CombiStorage
          "Combi Storage for heating, dhw and solar assitance"
          extends BaseClasses.PartialDistribution(
            dpSup_nominal={0,sum(bufferStorage.heatingCoil2.pipe.res.dp_nominal)},
            final dpDem_nominal={0},
            dTTraDHW_nominal=parameters.dTLoadingHC1,
            final m_flow_nominal=mDem_flow_nominal,
            dTTra_nominal={0},
            final TSup_nominal=fill(TDem_nominal[1] .+ dTLoss_nominal[1] .+ dTTra_nominal[1], nParallelSup),
            final nParallelSup=2,
            final nParallelDem=1);

          Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperatureBuf(final T=
                parameters.TAmb)                     annotation (Placement(transformation(
                extent={{-12,12},{12,-12}},
                rotation=180,
                origin={62,-50})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition
            parameters constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition(
            final QHC1_flow_nominal=Q_flow_nominal[1]*f_design[1],
            final rho=rho,
            final TAmb=TAmb,
            final c_p=cp,
            final mHC2_flow_nominal=mSup_flow_nominal[2],
            final mHC1_flow_nominal=mDHW_flow_nominal,
            final Q_flow_nominal=Q_flow_nominal[1]*f_design[1],
            final T_m=TSup_nominal[1]) annotation (choicesAllMatching=true,
              Placement(transformation(extent={{82,56},{96,70}})));

          AixLib.Fluid.Storage.BufferStorage bufferStorage(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final mSenFac=1,
            redeclare final package MediumHC1 = MediumDHW,
            redeclare final package MediumHC2 = Medium,
            final m1_flow_nominal=mSup_flow_nominal[1],
            final m2_flow_nominal=mDem_flow_nominal[1],
            final mHC1_flow_nominal=parameters.mHC1_flow_nominal,
            final mHC2_flow_nominal=parameters.mHC2_flow_nominal,
            final useHeatingCoil1=true,
            final useHeatingCoil2=true,
            final useHeatingRod=parameters.use_hr,
            final TStart=T_start,
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.bufferData
              data(
              final hTank=parameters.h,
              hHC1Low=0,
              final dTank=parameters.d,
              final sWall=parameters.sIns/2,
              final sIns=parameters.sIns/2,
              final lambdaWall=parameters.lambda_ins,
              final lambdaIns=parameters.lambda_ins,
              final rhoIns=373000,
              final cIns=1000,
              pipeHC1=parameters.pipeHC1,
              pipeHC2=parameters.pipeHC2,
              lengthHC1=parameters.lengthHC1,
              lengthHC2=parameters.lengthHC2),
            final n=parameters.nLayer,
            final hConIn=parameters.hConIn,
            final hConOut=parameters.hConOut,
            final hConHC1=parameters.hConHC1,
            final hConHC2=parameters.hConHC2,
            final upToDownHC1=false,
            final upToDownHC2=true,
            final TStartWall=T_start,
            final TStartIns=T_start,
            redeclare model HeatTransfer =
                AixLib.Fluid.Storage.BaseClasses.HeatTransferBuoyancyWetter,
            final allowFlowReversal_layers=allowFlowReversal,
            final allowFlowReversal_HC1=allowFlowReversal,
            final allowFlowReversal_HC2=allowFlowReversal)
            annotation (Placement(transformation(extent={{-34,-30},{26,46}})));
          Modelica.Blocks.Sources.Constant const_dhwHROn(k=parameters.QHR_flow_nominal)
         if parameters.use_hr
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-132,-84})));
          Modelica.Blocks.Sources.Constant const_dhwHROff(final k=0) if parameters.use_hr
                                                                     annotation (
              Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-132,-62})));
          Modelica.Blocks.Logical.Switch switch2 if parameters.use_hr
                                                 annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=0,
                origin={-102,-72})));
          Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow
                                                                 prescribedHeatFlow
         if parameters.use_hr              annotation (Placement(transformation(
                extent={{-12,-12},{12,12}},
                rotation=0,
                origin={-62,-72})));
            Modelica.Blocks.Sources.RealExpression realExpression[parameters.nLayer](y(each final unit="K", each final displayUnit="degC")=
                  bufferStorage.layer.T)
              annotation (Placement(transformation(extent={{-42,-122},{-22,-102}})));

          Utilities.KPIs.InternalKPICalculator internalKPICalculatorBufLoss(
            unit="W",
            integralUnit="J",
            thresholdOn=Modelica.Constants.eps,
            calc_singleOnTime=false,
            calc_integral=true,
            calc_totalOnTime=false,
            calc_numSwi=false,
            calc_movAve=false,
            calc_intBelThres=false,
            y=fixedTemperatureBuf.port.Q_flow)
            annotation (Placement(transformation(extent={{-76,-124},{-56,-86}})));
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{30,-108},{50,-88}})));
        equation
          connect(fixedTemperatureBuf.port, bufferStorage.heatportOutside) annotation (
              Line(points={{50,-50},{34,-50},{34,10.28},{25.25,10.28}},
                color={191,0,0}));
          connect(bufferStorage.TTop, sigBusDistr.TStoBufTopMea) annotation (Line(points={{-34,
                  41.44},{-46,41.44},{-46,101},{0,101}},                   color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(portGen_in[2], bufferStorage.portHC2In) annotation (Line(
              points={{-100,82.5},{-74,82.5},{-74,-1.5},{-34.375,-1.5}},
              color={255,255,0},
              thickness=0.5));
          connect(portGen_out[2], bufferStorage.portHC2Out) annotation (Line(
              points={{-100,42.5},{-100,20},{-62,20},{-62,-13.66},{-34.375,-13.66}},
              color={255,255,0},
              thickness=0.5));

          connect(prescribedHeatFlow.port, bufferStorage.heatingRod)
            annotation (Line(points={{-50,-72},{-44,-72},{-44,8},{-34,8}},
                                                                   color={191,0,0}));
          connect(switch2.y, prescribedHeatFlow.Q_flow) annotation (Line(points={{-91,-72},
                  {-74,-72}},               color={0,0,127}));
          connect(const_dhwHROn.y, switch2.u1) annotation (Line(points={{-125.4,-84},{-120,
                  -84},{-120,-80},{-114,-80}},
                                          color={0,0,127}));
          connect(switch2.u3, const_dhwHROff.y) annotation (Line(points={{-114,-64},{-122,
                  -64},{-122,-62},{-125.4,-62}},
                                          color={0,0,127}));
          connect(sigBusDistr.dhwHR_on, switch2.u2) annotation (Line(
              points={{0,101},{-122,101},{-122,-72},{-114,-72}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(bufferStorage.TTop, sigBusDistr.TStoDHWTopMea) annotation (Line(points={{-34,
                  41.44},{-46,41.44},{-46,101},{0,101}},                   color={0,0,
                  127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(bufferStorage.TBottom, sigBusDistr.TStoBufBotMea) annotation (Line(
                points={{-34,-22.4},{-46,-22.4},{-46,100},{0,100},{0,101}},
                                                                       color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(bufferStorage.TBottom, sigBusDistr.TStoDHWBotMea) annotation (Line(
                points={{-34,-22.4},{-46,-22.4},{-46,101},{0,101}},
                color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(portGen_in[1], bufferStorage.fluidportTop1) annotation (Line(points={{-100,
                  77.5},{-100,76},{-16,76},{-16,58},{-14.5,58},{-14.5,46.38}},
                                                      color={0,127,255}));
          connect(bufferStorage.fluidportBottom1, portGen_out[1]) annotation (Line(
                points={{-14.125,-30.76},{-14.125,-44},{-86,-44},{-86,37.5},{-100,37.5}},
                color={0,127,255}));
          connect(bufferStorage.fluidportTop2, portBui_out[1]) annotation (Line(points={{5.375,
                  46.38},{5.375,80},{100,80}},        color={0,127,255}));
          connect(portBui_in[1], bufferStorage.fluidportBottom2) annotation (Line(points={{100,40},
                  {100,14},{26,14},{26,-40},{4.625,-40},{4.625,-30.38}},
                color={0,127,255}));
          connect(bufferStorage.portHC1In, portDHW_in) annotation (Line(points={{-34.75,
                  29.66},{-50,29.66},{-50,-82},{100,-82}},        color={0,127,255}));
          connect(portDHW_out, bufferStorage.portHC1Out) annotation (Line(points={{100,-22},
                  {18,-22},{18,-62},{-38,-62},{-38,17.88},{-34.375,17.88}},
                color={0,127,255}));
            connect(realExpression.y, outBusDist.TSto) annotation (Line(points={{-21,
                    -112},{0,-112},{0,-100}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));

          connect(internalKPICalculatorBufLoss.KPIBus, outBusDist.QStoLoss) annotation (
             Line(
              points={{-55.8,-105},{-48,-105},{-48,-90},{-14,-90},{-14,-86},{0,-86},{0,
                  -100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{50,-98},{70,-98}},
              color={0,0,0},
              thickness=1));
        end CombiStorage;

        model DistributionTwoStorageParallel
          "Buffer storage and DHW storage"
          extends BaseClasses.PartialDistribution(
            final dpDem_nominal={0},
            final dpSup_nominal={0},
            final dTTraDHW_nominal=dhwParameters.dTLoadingHC1,
            final dTTra_nominal={bufParameters.dTLoadingHC1},
            final QLoss_flow_nominal=f_design .* Q_flow_nominal .- Q_flow_nominal,
            final TSup_nominal=TDem_nominal .+ dTLoss_nominal .+ dTTra_nominal,
            dTLoss_nominal=fill(0, nParallelDem),
            final m_flow_nominal=mDem_flow_nominal,
            final nParallelSup=1,
            final nParallelDem=1);

          AixLib.Fluid.Storage.Storage storageDHW(
            redeclare final package Medium = MediumDHW,
            final n=dhwParameters.nLayer,
            final d=dhwParameters.d,
            final h=dhwParameters.h,
            final lambda_ins=dhwParameters.lambda_ins,
            final s_ins=dhwParameters.sIns,
            final hConIn=dhwParameters.hConIn,
            final hConOut=dhwParameters.hConOut,
            final k_HE=dhwParameters.k_HE,
            final A_HE=dhwParameters.A_HE,
            final V_HE=dhwParameters.V_HE,
            final beta=dhwParameters.beta,
            final kappa=dhwParameters.kappa,
            final m_flow_nominal_layer=mDHW_flow_nominal,
            final m_flow_nominal_HE=mSup_flow_nominal[1],
            final energyDynamics=energyDynamics,
            final T_start=TDHW_nominal,
            final p_start=p_start,
            final m_flow_small_layer=1E-4*abs(storageDHW.m_flow_nominal_layer),
            final m_flow_small_layer_HE=1E-4*abs(storageDHW.m_flow_nominal_HE))
            "The DHW storage (TWWS) for domestic hot water demand"
            annotation (Placement(transformation(extent={{66,-70},{32,-32}})));
          Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperatureBuf(final T=bufParameters.TAmb)           annotation (Placement(transformation(
                extent={{-12,-12},{12,12}},
                rotation=0,
                origin={44,6})));
          AixLib.Fluid.Storage.Storage storageBuf(
            redeclare package Medium = Medium,
            final n=bufParameters.nLayer,
            final d=bufParameters.d,
            final h=bufParameters.h,
            final lambda_ins=bufParameters.lambda_ins,
            final s_ins=bufParameters.sIns,
            final hConIn=bufParameters.hConIn,
            final hConOut=bufParameters.hConOut,
            final k_HE=bufParameters.k_HE,
            final A_HE=bufParameters.A_HE,
            final V_HE=bufParameters.V_HE,
            final beta=bufParameters.beta,
            final kappa=bufParameters.kappa,
            final m_flow_nominal_layer=m_flow_nominal[1],
            final m_flow_nominal_HE=mSup_flow_nominal[1],
            final energyDynamics=energyDynamics,
            final T_start=T_start,
            final p_start=p_start,
            final m_flow_small_layer=1E-4*abs(storageBuf.m_flow_nominal_layer),
            final m_flow_small_layer_HE=1E-4*abs(storageBuf.m_flow_nominal_HE))
            "The buffer storage (PS) for the building"
            annotation (Placement(transformation(extent={{66,40},{32,76}})));
          Components.Valves.ArtificialThreeWayValve artificialThreeWayValve(redeclare
              final package Medium = MediumGen, final p_hydr=p_start)
            annotation (Placement(transformation(extent={{-68,36},{-18,80}})));
          Modelica.Blocks.Sources.RealExpression T_stoDHWTop(final y(unit="K", displayUnit="degC")=storageDHW.layer[
                dhwParameters.nLayer].T) annotation (Placement(transformation(
                extent={{-5,-3},{5,3}},
                rotation=180,
                origin={37,87})));
          Modelica.Blocks.Sources.RealExpression T_stoBufTop(final y(unit="K", displayUnit="degC")=storageBuf.layer[
                bufParameters.nLayer].T) annotation (Placement(transformation(
                extent={{-5,-2},{5,2}},
                rotation=180,
                origin={23,92})));
          Modelica.Blocks.Sources.RealExpression T_stoBufBot(final y(unit="K", displayUnit="degC")=storageBuf.layer[1].T)
            annotation (Placement(transformation(
                extent={{-5,-3},{5,3}},
                rotation=180,
                origin={23,87})));
          Modelica.Blocks.Sources.RealExpression T_stoDHWBot(final y(unit="K", displayUnit="degC")=storageDHW.layer[1].T)
            annotation (Placement(transformation(
                extent={{-5,-3},{5,3}},
                rotation=180,
                origin={37,99})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.SimpleStorageBaseDataDefinition
            bufParameters constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.SimpleStorageBaseDataDefinition(
            final Q_flow_nominal=Q_flow_nominal[1]*f_design[1],
            final rho=rho,
            final c_p=cp,
            final TAmb=TAmb,
            final T_m=TDem_nominal[1],
            final QHC1_flow_nominal=Q_flow_nominal[1],
            final mHC1_flow_nominal=mSup_flow_nominal[1],
            redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1)
            annotation (choicesAllMatching=true, Placement(transformation(
                  extent={{84,56},{98,70}})));
          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.SimpleStorageBaseDataDefinition
            dhwParameters constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.SimpleStorageBaseDataDefinition(
            final rho=rho,
            final c_p=cp,
            final TAmb=TAmb,
            final QHC1_flow_nominal=QDHW_flow_nominal,
            final V=VDHWDay,
            final Q_flow_nominal=QDHW_flow_nominal,
            final VPerQ_flow=0,
            final T_m=TDHW_nominal,
            final mHC1_flow_nominal=mSup_flow_nominal[1],
            redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1)
            annotation (choicesAllMatching=true, Placement(transformation(
                  extent={{82,-58},{98,-42}})));
          Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperatureDHW(final T=
                dhwParameters.TAmb)           annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={30,-90})));

          Utilities.KPIs.InternalKPICalculator internalKPICalculatorBufLoss(
            unit="W",
            integralUnit="J",
            thresholdOn=Modelica.Constants.eps,
            calc_singleOnTime=false,
            calc_integral=true,
            calc_totalOnTime=false,
            calc_numSwi=false,
            calc_movAve=false,
            calc_intBelThres=false,
            y=fixedTemperatureBuf.port.Q_flow)
            annotation (Placement(transformation(extent={{-80,-90},{-60,-52}})));
          Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWLoss(
            unit="W",
            integralUnit="J",
            thresholdOn=Modelica.Constants.eps,
            calc_singleOnTime=false,
            calc_integral=true,
            calc_totalOnTime=false,
            calc_numSwi=false,
            calc_movAve=false,
            calc_intBelThres=false,
            y=fixedTemperatureDHW.port.Q_flow)
            annotation (Placement(transformation(extent={{-80,-110},{-60,-72}})));
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{34,-110},{54,-90}})));
        equation
          connect(fixedTemperatureBuf.port, storageBuf.heatPort) annotation (Line(
                points={{56,6},{80,6},{80,58},{62.6,58}}, color={191,0,0}));
          connect(storageBuf.port_b_consumer, portBui_out[1]) annotation (Line(points={{49,76},
                  {50,76},{50,80},{100,80}},     color={0,127,255}));
          connect(storageBuf.port_a_consumer, portBui_in[1]) annotation (Line(points={{49,40},
                  {100,40}},                 color={0,127,255}));
          connect(storageDHW.port_b_consumer, portDHW_out) annotation (Line(points={{49,-32},
                  {48,-32},{48,-22},{100,-22}},      color={0,127,255}));
          connect(portDHW_in, storageDHW.port_a_consumer) annotation (Line(points={{100,-82},
                  {48,-82},{48,-70},{49,-70}},      color={0,127,255}));
          connect(artificialThreeWayValve.port_buf_b, storageBuf.port_a_heatGenerator)
            annotation (Line(points={{-18,74.72},{0,74.72},{0,73.84},{34.72,73.84}},
                color={0,127,255}));
          connect(artificialThreeWayValve.port_buf_a, storageBuf.port_b_heatGenerator)
            annotation (Line(points={{-18,65.92},{8,65.92},{8,43.6},{34.72,43.6}},
                color={0,127,255}));
          connect(artificialThreeWayValve.port_dhw_b, storageDHW.port_a_heatGenerator)
            annotation (Line(points={{-18,49.2},{-10,49.2},{-10,46},{8,46},{8,-34.28},{
                  34.72,-34.28}}, color={0,127,255}));
          connect(artificialThreeWayValve.port_dhw_a, storageDHW.port_b_heatGenerator)
            annotation (Line(points={{-18,40.4},{-16,40.4},{-16,36},{8,36},{8,-66.2},{
                  34.72,-66.2}},  color={0,127,255}));
          connect(fixedTemperatureDHW.port, storageDHW.heatPort) annotation (Line(
                points={{40,-90},{70,-90},{70,-51},{62.6,-51}}, color={191,0,0}));
          connect(sigBusDistr.dhw_on, artificialThreeWayValve.dhw_on) annotation (Line(
              points={{0,101},{-43,101},{-43,84.4}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(portGen_in[1], artificialThreeWayValve.port_a) annotation (Line(
                points={{-100,80},{-83,80},{-83,66.8},{-68,66.8}}, color={0,127,255}));
          connect(portGen_out[1], artificialThreeWayValve.port_b) annotation (Line(
                points={{-100,40},{-78,40},{-78,49.2},{-68,49.2}}, color={0,127,255}));
          connect(internalKPICalculatorDHWLoss.KPIBus, outBusDist.QDHWLoss) annotation (
             Line(
              points={{-59.8,-91},{-14,-91},{-14,-86},{0,-86},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(internalKPICalculatorBufLoss.KPIBus, outBusDist.QBufLoss) annotation (
             Line(
              points={{-59.8,-71},{0,-71},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(T_stoDHWBot.y, sigBusDistr.TStoDHWBotMea) annotation (Line(points={{31.5,
                  99},{0,99},{0,101}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(T_stoDHWTop.y, sigBusDistr.TStoDHWTopMea) annotation (Line(points={{31.5,
                  87},{28,87},{28,101},{0,101}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(T_stoBufBot.y, sigBusDistr.TStoBufBotMea) annotation (Line(points={{17.5,
                  87},{0,87},{0,101}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(T_stoBufTop.y, sigBusDistr.TStoBufTopMea) annotation (Line(points={{17.5,
                  92},{0,92},{0,101}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{54,-100},{54,-98},{70,-98}},
              color={0,0,0},
              thickness=1));
        end DistributionTwoStorageParallel;

        model DHWOnly "only loads DHW"
          extends BaseClasses.PartialDistribution(
            nParallelDem=1,
            final dpDem_nominal=fill(0, nParallelDem),
            final dpSup_nominal=fill(0, nParallelSup),
            final dTTraDHW_nominal=0,
            final QLoss_flow_nominal=f_design .* Q_flow_nominal .- Q_flow_nominal,
            final f_design=fill(1, nParallelDem),
            final dTLoss_nominal=fill(0, nParallelDem),
            final m_flow_nominal=mSup_flow_nominal,
            final TSup_nominal=TDem_nominal .+ dTLoss_nominal .+ dTTra_nominal,
            redeclare package MediumGen = Medium,
            redeclare package MediumDHW = Medium,
            final dTTra_nominal=fill(0, nParallelDem),
            final nParallelSup=1);
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{24,-108},{44,-88}})));
        equation
          connect(portDHW_out, portGen_in[1]) annotation (Line(points={{100,-22},{2,-22},
                  {2,80},{-100,80}}, color={0,127,255}));
          connect(portGen_out[1], portDHW_in) annotation (Line(points={{-100,40},{-6,40},
                  {-6,-82},{100,-82}}, color={0,127,255}));
          connect(portBui_out, portBui_in) annotation (Line(points={{100,80},{84,80},{
                  84,40},{100,40}}, color={0,127,255}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{44,-98},{56,-98},{56,-96},{70,-96},{70,-98}},
              color={0,0,0},
              thickness=1));
        end DHWOnly;

        model TwoStoDetailedDirectLoading "Two detailed storages, direct loading of space heating"
          extends BaseClasses.PartialDistributionTwoStorageParallelDetailed(
            storageBuf(final useHeatingCoil1=false), final dpBufHCSto_nominal=0);

        equation
          connect(threeWayValveWithFlowReturn.portBui_b, storageBuf.fluidportTop1)
            annotation (Line(points={{-64,72},{-58,72},{-58,66},{-24,66},{-24,58.22},{
                  -24.3,58.22}},
                           color={0,127,255}));
          connect(threeWayValveWithFlowReturn.portBui_a, storageBuf.fluidportBottom1)
            annotation (Line(points={{-64,68},{-60,68},{-60,64},{-42,64},{-42,4},{-24,4},
                  {-24,13.56},{-24.075,13.56}},
                           color={0,127,255}));
        end TwoStoDetailedDirectLoading;

        model TwoStoDetailedIndirectLoading "Two detailed storages, indirect loading"
          extends BaseClasses.PartialDistributionTwoStorageParallelDetailed(final
              dpBufHCSto_nominal=sum(storageBuf.heatingCoil1.pipe.res.dp_nominal),
              threeWayValveParameters(dpFixed_nominal=max(dp_nominal) .- (
                  dp_nominal)));
          IBPSA.Fluid.Sources.Boundary_pT bouPumpBuf(
            redeclare package Medium = Medium,
            final p=p_start,
            final T=T_start,
            final nPorts=1)
            "Pressure reference for transfer circuit as generation circuit reference is not connected (indirect loading)"
            annotation (Placement(transformation(
                extent={{-7,-7},{7,7}},
                rotation=90,
                origin={-13,-9})));
        equation
          connect(threeWayValveWithFlowReturn.portBui_b, storageBuf.portHC1In)
            annotation (Line(points={{-64,72},{-58,72},{-58,48.54},{-36.45,48.54}},
                color={0,127,255}));
          connect(threeWayValveWithFlowReturn.portBui_a, storageBuf.portHC1Out)
            annotation (Line(points={{-64,68},{-58,68},{-58,66},{-50,66},{-50,41.72},{-36.225,
                  41.72}}, color={0,127,255}));
          connect(bouPumpBuf.ports[1], storageBuf.fluidportBottom2) annotation (Line(
                points={{-13,-2},{-13,13.78},{-12.825,13.78}}, color={0,127,255}));
        end TwoStoDetailedIndirectLoading;

        package Components "Package with additional models or components used for subsystems not present in any existing model library"
          package Valves

            model ThreeWayValveWithFlowReturn

              extends IBPSA.Fluid.Interfaces.LumpedVolumeDeclarations;

              replaceable parameter
                BESMod.HugosProject.Systems.RecordsCollection.Valves.ThreeWayValve
                parameters constrainedby
                BESMod.HugosProject.Systems.RecordsCollection.Valves.ThreeWayValve
                annotation (choicesAllMatching=true, Placement(transformation(
                      extent={{-98,-96},{-78,-76}})));
              Modelica.Fluid.Interfaces.FluidPort_a portGen_a(
                redeclare package Medium = Medium)
                "Fluid connector a (positive design flow direction is from port_a to port_b)"
                annotation (Placement(transformation(extent={{-110,34},{-90,54}})));
              Modelica.Fluid.Interfaces.FluidPort_b portGen_b(
                redeclare package Medium = Medium)
                "Fluid connector b (positive design flow direction is from port_a to port_b)"
                annotation (Placement(transformation(extent={{-90,-46},{-110,-26}})));
              Modelica.Fluid.Interfaces.FluidPort_a portDHW_a(
                redeclare package Medium = Medium)
                "Port connecting from dhw demand"
                annotation (Placement(transformation(extent={{90,-86},{110,-66}})));
              Modelica.Fluid.Interfaces.FluidPort_b portDHW_b(
                redeclare package Medium = Medium)
                "Port connecting into dhw demand"
                annotation (Placement(transformation(extent={{110,-46},{90,-26}})));
              Modelica.Fluid.Interfaces.FluidPort_a portBui_a(
                redeclare package Medium = Medium)
                "Port connecting from heating demand"
                annotation (Placement(transformation(extent={{90,30},{110,50}})));
              Modelica.Fluid.Interfaces.FluidPort_b portBui_b(
                redeclare package Medium = Medium)
                "Port connecting to heating demand"
                annotation (Placement(transformation(extent={{110,70},{90,90}})));
              IBPSA.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear threWayValRet(
                  redeclare final package Medium = Medium,
                final energyDynamics=energyDynamics,
                final p_start=p_start,
                final T_start=T_start,
                final tau=parameters.tau,
                final from_dp=true,
                final portFlowDirection_1=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,
                final portFlowDirection_2=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,
                final portFlowDirection_3=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,
                final verifyFlowReversal=false,
                final use_inputFilter=parameters.use_inputFilter,
                final riseTime=parameters.riseTime,
                final init=parameters.init,
                final y_start=parameters.y_start,
                  final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
                final deltaM=parameters.deltaM,
                final m_flow_nominal=parameters.m_flow_nominal,
                final dpValve_nominal=parameters.dpValve_nominal,
                final dpFixed_nominal=parameters.dpFixed_nominal,
                final fraK=parameters.fraK,
                final l=parameters.l,
                final linearized={false,false},
                final R=parameters.R,
                final delta0=parameters.delta0)
                annotation (Placement(transformation(
                    extent={{-23,18},{23,-18}},
                    rotation=180,
                    origin={-1,-36})));
              IBPSA.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear threWayValFlow(
                redeclare package Medium = Medium,
                final energyDynamics=energyDynamics,
                final p_start=p_start,
                final T_start=T_start,
                final tau=parameters.tau,
                final from_dp=true,
                final portFlowDirection_1=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,
                final portFlowDirection_2=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,
                final portFlowDirection_3=Modelica.Fluid.Types.PortFlowDirection.Bidirectional,
                final verifyFlowReversal=false,
                final use_inputFilter=parameters.use_inputFilter,
                final riseTime=parameters.riseTime,
                final init=parameters.init,
                final y_start=parameters.y_start,
                final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
                final deltaM=parameters.deltaM,
                final m_flow_nominal=parameters.m_flow_nominal,
                final dpValve_nominal=parameters.dpValve_nominal,
                final dpFixed_nominal=parameters.dpFixed_nominal,
                final fraK=parameters.fraK,
                final l=parameters.l,
                final linearized={false,false},
                final R=parameters.R,
                final delta0=parameters.delta0)
                annotation (Placement(transformation(extent={{22,24},{-22,64}})));

              Modelica.Blocks.Interfaces.RealInput uBuf
                "Actuator position (0: DHW Loading, 1: Buffer / Space heating loading)"
                annotation (Placement(transformation(
                    extent={{-20,-20},{20,20}},
                    rotation=270,
                    origin={0,120})));

            equation
              connect(threWayValFlow.y, uBuf)
                annotation (Line(points={{0,68},{0,120}}, color={0,0,127}));
              connect(threWayValRet.port_2, portGen_b)
                annotation (Line(points={{-24,-36},{-100,-36}}, color={0,127,255}));
              connect(threWayValRet.port_3, portDHW_a)
                annotation (Line(points={{-1,-54},{-1,-76},{100,-76}}, color={0,127,255}));
              connect(uBuf, threWayValRet.y) annotation (Line(points={{0,120},{0,82},{-46,
                      82},{-46,6},{-1,6},{-1,-14.4}}, color={0,0,127}));
              connect(portBui_a, threWayValRet.port_1) annotation (Line(points={{100,40},{62,
                      40},{62,-36},{22,-36}}, color={0,127,255}));
              connect(threWayValFlow.port_1, portBui_b) annotation (Line(points={{22,44},{
                      34,44},{34,42},{56,42},{56,80},{100,80}}, color={0,127,255}));
              connect(threWayValFlow.port_3, portDHW_b) annotation (Line(points={{0,24},{0,
                      14},{84,14},{84,-36},{100,-36}}, color={0,127,255}));
              connect(threWayValFlow.port_2, portGen_a) annotation (Line(points={{-22,44},{
                      -62,44},{-62,44},{-100,44}}, color={0,127,255}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                      Rectangle(
                      extent={{-100,100},{100,-100}},
                      lineColor={0,0,0},
                      lineThickness=1,
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid),
                    Polygon(
                      points={{72,82},{72,28},{18,56},{72,82}},
                      lineColor={0,0,0},
                      lineThickness=0.5,
                      fillColor={28,108,200},
                      fillPattern=FillPattern.Solid),
                    Line(
                      points={{-28,0},{-4,0},{-4,56},{20,56}},
                      color={0,0,0},
                      thickness=0.5),
                    Line(
                      points={{-4,-2},{-4,-50},{20,-50}},
                      color={0,0,0},
                      thickness=0.5),
                    Polygon(
                      points={{27,27},{27,-27},{-27,1},{27,27}},
                      lineColor={0,0,0},
                      lineThickness=0.5,
                      fillColor={28,108,200},
                      fillPattern=FillPattern.Solid,
                      origin={-57,1},
                      rotation=180),
                    Polygon(
                      points={{74,-24},{74,-78},{20,-50},{74,-24}},
                      lineColor={0,0,0},
                      lineThickness=0.5,
                      fillColor={28,108,200},
                      fillPattern=FillPattern.Solid)}),                      Diagram(graphics,
                    coordinateSystem(preserveAspectRatio=false)));
            end ThreeWayValveWithFlowReturn;

            model ArtificialThreeWayValve
              "Ideal valve either for either side, no in between"

              /******************************* Parameters *******************************/
              replaceable package Medium =
                  Modelica.Media.Interfaces.PartialMedium "Medium in the component"
                  annotation (choicesAllMatching = true);

              parameter Boolean allowFlowReversal = true
                "= false to simplify equations, assuming, but not enforcing, no flow reversal"
                annotation(Dialog(tab="Assumptions"), Evaluate=true);
              parameter Modelica.Units.SI.Pressure p_hydr=2e5 "Hydraulic pressure in pipes"
                annotation (Dialog(group="Demand"));

              /******************************* Components *******************************/

              Modelica.Fluid.Interfaces.FluidPort_a port_a(
                redeclare package Medium = Medium,
                 m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0),
                 h_outflow(start = Medium.h_default, nominal = Medium.h_default))
                "Fluid connector a (positive design flow direction is from port_a to port_b)"
                annotation (Placement(transformation(extent={{-110,30},{-90,50}})));
              Modelica.Fluid.Interfaces.FluidPort_b port_b(
                redeclare package Medium = Medium,
                m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0),
                 h_outflow(start = Medium.h_default, nominal = Medium.h_default))
                "Fluid connector b (positive design flow direction is from port_a to port_b)"
                annotation (Placement(transformation(extent={{-90,-50},{-110,-30}})));

              Modelica.Fluid.Interfaces.FluidPort_a port_dhw_a(
                redeclare package Medium = Medium,
                m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0),
                h_outflow(start=Medium.h_default, nominal=Medium.h_default))
                "Port connecting from dhw demand"
                annotation (Placement(transformation(extent={{90,-90},{110,-70}})));
              Modelica.Fluid.Interfaces.FluidPort_b port_dhw_b(
                redeclare package Medium = Medium,
                m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0),
                h_outflow(start=Medium.h_default, nominal=Medium.h_default))
                "Port connecting into dhw demand"
                annotation (Placement(transformation(extent={{110,-50},{90,-30}})));
              Modelica.Fluid.Interfaces.FluidPort_a port_buf_a(
                redeclare package Medium = Medium,
                m_flow(min=if allowFlowReversal then -Modelica.Constants.inf else 0),
                h_outflow(start=Medium.h_default, nominal=Medium.h_default))
                "Port connecting from heating demand"
                annotation (Placement(transformation(extent={{90,26},{110,46}})));
              Modelica.Fluid.Interfaces.FluidPort_b port_buf_b(
                redeclare package Medium = Medium,
                m_flow(max=if allowFlowReversal then +Modelica.Constants.inf else 0),
                h_outflow(start=Medium.h_default, nominal=Medium.h_default))
                "Port connecting to heating demand"
                annotation (Placement(transformation(extent={{110,66},{90,86}})));
              Modelica.Blocks.Sources.Constant       dummyZero(k=0)
                                                               annotation (Placement(transformation(extent={{-30,28},
                        {-18,40}})));
              Modelica.Blocks.Sources.RealExpression dummyMassFlow(y=port_a.m_flow)
                                                                                annotation (Placement(transformation(extent={{-44,0},
                        {-16,20}})));
              Modelica.Blocks.Logical.Switch switch1
                annotation (Placement(transformation(extent={{-38,-26},{-50,-14}})));
              Modelica.Blocks.Logical.Switch switch2
                annotation (Placement(transformation(extent={{-40,-60},{-52,-48}})));
              Modelica.Blocks.Logical.Switch switch3
                annotation (Placement(transformation(extent={{24,-66},{36,-54}})));
              Modelica.Blocks.Logical.Switch switch4
                annotation (Placement(transformation(extent={{32,78},{44,90}})));
              Modelica.Blocks.Sources.RealExpression dummyEnthalpyDhw(y=inStream(port_buf_a.h_outflow))
                annotation (Placement(transformation(extent={{-8,-80},{-28,-60}})));
              Modelica.Blocks.Sources.RealExpression dummyEnthalpyBuf(y=inStream(port_dhw_a.h_outflow))
                annotation (Placement(transformation(extent={{-8,-56},{-28,-36}})));
              BESMod.Components.Pumps.ArtificalPump_h_in artificalPump_h_in_gen(
                  redeclare package Medium = Medium) annotation (Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=270,
                    origin={-78,0})));
              BESMod.Components.Pumps.ArtificalPump_h_in artificalPump_h_in_buf(
                  redeclare package Medium = Medium, p=p_hydr) annotation (Placement(
                    transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=90,
                    origin={68,-60})));
              BESMod.Components.Pumps.ArtificalPump_h_in artificalPump_h_in_dhw(
                  redeclare final package Medium = Medium, final p=p_hydr) annotation (
                  Placement(transformation(
                    extent={{-10,-10},{10,10}},
                    rotation=90,
                    origin={66,60})));
              Modelica.Blocks.Sources.RealExpression dummyEnthalpy_hgen(y=inStream(port_a.h_outflow))
                annotation (Placement(transformation(
                    extent={{10,-10},{-10,10}},
                    rotation=180,
                    origin={38,6})));
              Modelica.Blocks.Interfaces.BooleanInput dhw_on
                annotation (Placement(transformation(
                    extent={{-20,-20},{20,20}},
                    rotation=270,
                    origin={0,120})));
              Modelica.Blocks.Logical.Not or2
                                             annotation (Placement(transformation(extent={{-6,-6},{6,6}},
                    rotation=0,
                    origin={14,84})));
              Modelica.Blocks.Sources.RealExpression dummyEnthalpyBuf1(y=port_dhw_a.m_flow)
                annotation (Placement(transformation(extent={{-8,-20},{-28,0}})));
              Modelica.Blocks.Sources.RealExpression dummyEnthalpyBuf2(y=port_buf_a.m_flow)
                annotation (Placement(transformation(extent={{-6,-38},{-26,-18}})));
            equation
              connect(dummyZero.y, switch3.u3) annotation (Line(points={{-17.4,34},{14,34},
                      {14,-64.8},{22.8,-64.8}},
                                          color={0,0,127}));
              connect(dummyMassFlow.y, switch3.u1) annotation (Line(points={{-14.6,10},{16,
                      10},{16,-55.2},{22.8,-55.2}},
                                              color={0,0,127}));
              connect(dummyMassFlow.y, switch4.u1) annotation (Line(points={{-14.6,10},{16,
                      10},{16,88.8},{30.8,88.8}},
                                                color={0,0,127}));
              connect(dummyZero.y, switch4.u3) annotation (Line(points={{-17.4,34},{20,34},
                      {20,79.2},{30.8,79.2}},
                                            color={0,0,127}));
              connect(switch2.u3, dummyEnthalpyDhw.y) annotation (Line(points={{-38.8,-58.8},
                      {-36,-58.8},{-36,-58},{-34,-58},{-34,-70},{-29,-70}},
                                                       color={0,0,127}));
              connect(switch2.u1, dummyEnthalpyBuf.y) annotation (Line(points={{-38.8,-49.2},
                      {-34,-49.2},{-34,-50},{-32,-50},{-32,-46},{-29,-46}},
                                                          color={0,0,127}));
              connect(port_a, artificalPump_h_in_gen.port_a)
                annotation (Line(points={{-100,40},{-78,40},{-78,10}}, color={0,127,255}));
              connect(artificalPump_h_in_gen.port_b, port_b) annotation (Line(points={{-78,-10},
                      {-78,-40},{-100,-40}}, color={0,127,255}));
              connect(port_dhw_a, artificalPump_h_in_buf.port_a) annotation (Line(points={{100,-80},
                      {68,-80},{68,-70}},           color={0,127,255}));
              connect(artificalPump_h_in_buf.port_b, port_dhw_b) annotation (Line(points={{68,-50},
                      {70,-50},{70,-40},{100,-40}},  color={0,127,255}));
              connect(artificalPump_h_in_dhw.port_b, port_buf_b) annotation (Line(points={{66,70},
                      {68,70},{68,76},{100,76}},         color={0,127,255}));
              connect(port_buf_a, artificalPump_h_in_dhw.port_a)
                annotation (Line(points={{100,36},{66,36},{66,50}},    color={0,127,255}));
              connect(switch1.y, artificalPump_h_in_gen.m_flow_in) annotation (Line(points={{-50.6,
                      -20},{-56,-20},{-56,0},{-66.4,0}},        color={0,0,127}));
              connect(switch4.y, artificalPump_h_in_dhw.m_flow_in) annotation (Line(points={{44.6,84},
                      {44,84},{44,60},{54.4,60}},               color={0,0,127}));
              connect(switch3.y, artificalPump_h_in_buf.m_flow_in)
                annotation (Line(points={{36.6,-60},{56.4,-60}},         color={0,0,127}));
              connect(switch2.y, artificalPump_h_in_gen.h_flow_in) annotation (Line(points={{-52.6,
                      -54},{-60,-54},{-60,8.4},{-66.6,8.4}},
                    color={0,0,127}));
              connect(dummyEnthalpy_hgen.y, artificalPump_h_in_buf.h_flow_in) annotation (
                  Line(points={{49,6},{60,6},{60,-16},{48,-16},{48,-68},{56.6,-68},{56.6,
                      -68.4}}, color={0,0,127}));
              connect(dummyEnthalpy_hgen.y, artificalPump_h_in_dhw.h_flow_in) annotation (
                  Line(points={{49,6},{60,6},{60,24},{44,24},{44,52},{48,52},{48,51.6},{
                      54.6,51.6}}, color={0,0,127}));
              connect(dhw_on, switch3.u2) annotation (Line(points={{0,120},{0,-60},{22.8,
                      -60}},                color={255,0,255}));
              connect(dhw_on, switch2.u2) annotation (Line(points={{0,120},{0,-54},{-38.8,
                      -54}}, color={255,0,255}));
              connect(dhw_on, or2.u)
                annotation (Line(points={{0,120},{0,84},{6.8,84}}, color={255,0,255}));
              connect(switch4.u2, or2.y)
                annotation (Line(points={{30.8,84},{20.6,84}}, color={255,0,255}));
              connect(switch1.u1, dummyEnthalpyBuf1.y) annotation (Line(points={{-36.8,
                      -15.2},{-32,-15.2},{-32,-10},{-29,-10}}, color={0,0,127}));
              connect(switch1.u3, dummyEnthalpyBuf2.y) annotation (Line(points={{-36.8,
                      -24.8},{-32,-24.8},{-32,-28},{-27,-28}}, color={0,0,127}));
              connect(dhw_on, switch1.u2)
                annotation (Line(points={{0,120},{0,-20},{-36.8,-20}}, color={255,0,255}));
              annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                      Rectangle(
                      extent={{-100,100},{100,-100}},
                      lineColor={0,0,0},
                      lineThickness=1,
                      fillColor={255,255,255},
                      fillPattern=FillPattern.Solid), Text(
                      extent={{-124,-106},{156,-154}},
                      lineColor={0,0,0},
                      lineThickness=1,
                      textString="%name"),
                    Polygon(
                      points={{72,82},{72,28},{18,56},{72,82}},
                      lineColor={0,0,0},
                      lineThickness=0.5,
                      fillColor={28,108,200},
                      fillPattern=FillPattern.Solid),
                    Polygon(
                      points={{74,-24},{74,-78},{20,-50},{74,-24}},
                      lineColor={0,0,0},
                      lineThickness=0.5,
                      fillColor={28,108,200},
                      fillPattern=FillPattern.Solid),
                    Polygon(
                      points={{27,27},{27,-27},{-27,1},{27,27}},
                      lineColor={0,0,0},
                      lineThickness=0.5,
                      fillColor={28,108,200},
                      fillPattern=FillPattern.Solid,
                      origin={-57,1},
                      rotation=180),
                    Line(
                      points={{-28,0},{-4,0},{-4,56},{20,56}},
                      color={0,0,0},
                      thickness=0.5),
                    Line(
                      points={{-4,-2},{-4,-50},{20,-50}},
                      color={0,0,0},
                      thickness=0.5)}),                                      Diagram(graphics,
                                                                                     coordinateSystem(preserveAspectRatio=false)));
            end ArtificialThreeWayValve;

            package Tests
              extends Modelica.Icons.ExamplesPackage;

              model Test_ArtificalThreeWayValve
                extends Modelica.Icons.Example;

                /******************************* Parameters *******************************/
                replaceable package Medium = IBPSA.Media.Water;

                /******************************* Components *******************************/

                Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=100)
                  annotation (Placement(transformation(extent={{-44,40},{-24,60}})));
                Modelica.Fluid.Sources.MassFlowSource_T boundary(          redeclare
                    package Medium =                                                                Medium,
                  m_flow=0.2,
                  T=313.15,
                  nPorts=1)
                  annotation (Placement(transformation(extent={{-84,0},{-64,20}})));
                ArtificialThreeWayValve artificialThreeWayValve(redeclare
                    package Medium =
                      Medium)
                  annotation (Placement(transformation(extent={{-22,-22},{18,18}})));
                Modelica.Fluid.Sources.Boundary_ph boundary2(redeclare package
                    Medium =
                      Medium, nPorts=1)
                  annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                      rotation=180,
                      origin={-74,-12})));
                IBPSA.Fluid.MixingVolumes.MixingVolume demandDHW(
                  each V=0.005,
                  redeclare package Medium = Medium,
                  each nPorts=2,
                  each m_flow_nominal=0.01) annotation (Placement(transformation(
                      extent={{-10,-10},{10,10}},
                      rotation=270,
                      origin={52,-14})));
                IBPSA.Fluid.MixingVolumes.MixingVolume demandBui(
                  each V=0.005,
                  redeclare package Medium = Medium,
                  each nPorts=2,
                  each m_flow_nominal=0.01) annotation (Placement(transformation(
                      extent={{-10,-10},{10,10}},
                      rotation=270,
                      origin={54,10})));
              equation
                connect(boundary2.ports[1], artificialThreeWayValve.port_b) annotation (Line(
                      points={{-64,-12},{-46,-12},{-46,-10},{-22,-10}}, color={0,127,255}));
                connect(boundary.ports[1], artificialThreeWayValve.port_a) annotation (Line(
                      points={{-64,10},{-46,10},{-46,6},{-22,6}}, color={0,127,255}));
                connect(demandDHW.ports[1], artificialThreeWayValve.port_dhw_b) annotation (
                    Line(points={{42,-13},{30,-13},{30,-10},{18,-10}}, color={0,127,255}));
                connect(demandDHW.ports[2], artificialThreeWayValve.port_dhw_a) annotation (
                    Line(points={{42,-15},{32,-15},{32,-18},{18,-18}}, color={0,127,255}));
                connect(demandBui.ports[1], artificialThreeWayValve.port_buf_b) annotation (
                    Line(points={{44,11},{32,11},{32,13.2},{18,13.2}}, color={0,127,255}));
                connect(demandBui.ports[2], artificialThreeWayValve.port_buf_a) annotation (
                    Line(points={{44,9},{32,9},{32,5.2},{18,5.2}}, color={0,127,255}));
                connect(booleanPulse.y, artificialThreeWayValve.dhw_on)
                  annotation (Line(points={{-23,50},{-2,50},{-2,22}}, color={255,0,255}));
                annotation (Icon(graphics,
                                 coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                      coordinateSystem(preserveAspectRatio=false)),
                  experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
              end Test_ArtificalThreeWayValve;

              model TestThreeWayValve
                extends Modelica.Icons.Example;

                /******************************* Parameters *******************************/
                replaceable package Medium = IBPSA.Media.Water;

                /******************************* Components *******************************/

                Modelica.Blocks.Sources.Pulse        pulse(       period=100)
                  annotation (Placement(transformation(extent={{-44,40},{-24,60}})));
                Modelica.Fluid.Sources.Boundary_ph boundary2(redeclare package
                    Medium =
                      Medium,
                  p=200000,
                  nPorts=1)
                  annotation (Placement(transformation(extent={{10,-10},{-10,10}},
                      rotation=180,
                      origin={-112,-28})));
                IBPSA.Fluid.MixingVolumes.MixingVolume demandBui(
                  each V=0.005,
                  redeclare package Medium = Medium,
                  each m_flow_nominal=0.01,
                  nPorts=2)                 annotation (Placement(transformation(
                      extent={{-10,-10},{10,10}},
                      rotation=270,
                      origin={84,6})));
                ThreeWayValveWithFlowReturn threeWayValveWithFlowReturn(redeclare
                    package Medium =
                             Medium, redeclare
                    BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                    parameters(
                    m_flow_nominal=m_flow_nominal,
                    dp_nominal={dpValve_nominal, dpValve_nominal},
                    dpFixed_nominal={0,0},
                    fraK=1,
                    riseTime=50))
                  annotation (Placement(transformation(extent={{-46,-40},{24,20}})));
                IBPSA.Fluid.Movers.FlowControlled_m_flow
                                                      pumpHP(
                  redeclare final package Medium = Medium,
                  m_flow_nominal=m_flow_nominal,
                  redeclare Systems.RecordsCollection.Movers.AutomaticConfigurationData per(
                    final m_flow_nominal=m_flow_nominal,
                    final dp_nominal=2*(threeWayValveWithFlowReturn.parameters.dpValve_nominal
                         + threeWayValveWithFlowReturn.parameters.dpFixed_nominal[1]) + dpRes,
                    final rho(displayUnit="kg/m3") = 1000,
                    V_flowCurve={0,0.99,1,1.01},
                    dpCurve={2,1,0.5,0}),
                  final inputType=IBPSA.Fluid.Types.InputType.Continuous,
                  final addPowerToMedium=false,
                  final use_inputFilter=false)
                                   annotation (Placement(transformation(
                      extent={{10,10},{-10,-10}},
                      rotation=270,
                      origin={-80,-12})));

                Modelica.Blocks.Sources.SawTooth     sawTooth(amplitude=m_flow_nominal,
                    period=pulse.period*pulse.width/100)
                  annotation (Placement(transformation(extent={{-132,6},{-112,26}})));
                IBPSA.Fluid.FixedResistances.PressureDrop res(
                  redeclare package Medium = Medium,
                  m_flow_nominal=m_flow_nominal,
                  dp_nominal(displayUnit="bar") = dpRes)
                  annotation (Placement(transformation(extent={{42,18},{62,38}})));
                IBPSA.Fluid.FixedResistances.PressureDrop res1(
                  redeclare package Medium = Medium,
                  m_flow_nominal=m_flow_nominal,
                  dp_nominal(displayUnit="bar") = 2*dpRes)
                  annotation (Placement(transformation(extent={{50,-26},{70,-6}})));
                parameter Modelica.Units.SI.PressureDifference dpValve_nominal=10000
                  "Nominal pressure drop of fully open valve, used if CvData=IBPSA.Fluid.Types.CvTypes.OpPoint";
                parameter Modelica.Units.SI.PressureDifference dpRes=3000
                  "Pressure drop at nominal mass flow rate";
                parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=1
                  "Nominal mass flow rate";
              equation
                connect(pulse.y, threeWayValveWithFlowReturn.uBuf)
                  annotation (Line(points={{-23,50},{-11,50},{-11,26}}, color={0,0,127}));
                connect(threeWayValveWithFlowReturn.portBui_a, demandBui.ports[1])
                  annotation (Line(points={{24,2},{38,2},{38,7},{74,7}}, color={0,127,255}));
                connect(threeWayValveWithFlowReturn.portGen_b, pumpHP.port_a) annotation (
                    Line(points={{-46,-20.8},{-64,-20.8},{-64,-24},{-80,-24},{-80,-22}},
                      color={0,127,255}));
                connect(pumpHP.port_b, threeWayValveWithFlowReturn.portGen_a) annotation (
                    Line(points={{-80,-2},{-66,-2},{-66,3.2},{-46,3.2}}, color={0,127,255}));
                connect(boundary2.ports[1], pumpHP.port_a) annotation (Line(points={{-102,-28},
                        {-80,-28},{-80,-22}}, color={0,127,255}));
                connect(threeWayValveWithFlowReturn.portBui_b, res.port_a) annotation (Line(
                      points={{24,14},{34,14},{34,28},{42,28}}, color={0,127,255}));
                connect(demandBui.ports[2], res.port_b) annotation (Line(points={{74,5},{68,5},
                        {68,28},{62,28}}, color={0,127,255}));
                connect(threeWayValveWithFlowReturn.portDHW_b, res1.port_a) annotation (Line(
                      points={{24,-20.8},{38,-20.8},{38,-16},{50,-16}}, color={0,127,255}));
                connect(res1.port_b, threeWayValveWithFlowReturn.portDHW_a) annotation (Line(
                      points={{70,-16},{82,-16},{82,-32.8},{24,-32.8}}, color={0,127,255}));
                connect(sawTooth.y, pumpHP.m_flow_in) annotation (Line(points={{-111,16},{-98,
                        16},{-98,-12},{-92,-12}}, color={0,0,127}));
                annotation (Icon(graphics,
                                 coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                      coordinateSystem(preserveAspectRatio=false)),
                  experiment(StopTime=1000, __Dymola_Algorithm="Dassl"));
              end TestThreeWayValve;
            end Tests;
          end Valves;
        end Components;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

          record DistributionControlBaseDataDefinition
            extends
              BESMod.HugosProject.Systems.RecordsCollection.SubsystemControlBaseDataDefinition;
            extends
              BESMod.HugosProject.Systems.Demand.DHW.RecordsCollection.DHWDesignParameters;
            parameter Modelica.Units.SI.TemperatureDifference dTTraDHW_nominal
              "Nominal temperature difference to transfer heat to DHW"
              annotation (Dialog(group="DHW Demand"));

          end DistributionControlBaseDataDefinition;

          partial record PartialStorageBaseDataDefinition
            extends Modelica.Icons.Record;
            // Global parameters
            parameter Modelica.Units.SI.Density rho(displayUnit="kg/m3") = 1000
              "Density of liquid water";
            parameter Modelica.Units.SI.SpecificHeatCapacityAtConstantPressure c_p=4184
              "Heat capacity of water";
            parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal
              "Nominal heat flow rate";

            // Design
            parameter Real VPerQ_flow=23.5 "Litre per kW of nominal heat flow rate"  annotation (Dialog(group="Geometry"));
            parameter Real storage_H_dia_ratio = 2 "Storage tank height-diameter ration. SOURCE: Working Assumption of all paper before"  annotation (Dialog(group="Geometry"));
            parameter Integer nLayer = 4 "Number of layers in storage";
            parameter Modelica.Units.SI.Volume V=VPerQ_flow*Q_flow_nominal*1e-6
              "Volume of storage" annotation (Dialog(tab="Calculated", group="Geometry"));
            parameter Modelica.Units.SI.Diameter d=(V*4/(storage_H_dia_ratio*Modelica.Constants.pi))
                ^(1/3) "Diameter of storage"
              annotation (Dialog(tab="Calculated", group="Geometry"));
            parameter Modelica.Units.SI.Height h=d*storage_H_dia_ratio
              annotation (Dialog(tab="Calculated", group="Geometry"));

            // Heat transfer
            parameter Modelica.Units.SI.TemperatureDifference dTLoaMin=0.01
              "Minimal temperature difference for loading"
              annotation (Dialog(group="Loading"));
            parameter Boolean use_HC1 "=false to disable heating coil 1"  annotation (Dialog(group="Loading"));
            parameter Modelica.Units.SI.TemperatureDifference dTLoadingHC1
              "Temperature difference for loading of first heating coil"
              annotation (Dialog(group="Loading", enable=use_HC1));
            parameter Real fHeiHC1=1 "Percentage of the storage height used for the heating coil" annotation (Dialog(group="Loading", enable=use_HC1));
            parameter Real fDiaHC1=1 "Percentage of the storage diameter used for the heating coil" annotation (Dialog(group="Loading", enable=use_HC1));
            parameter Modelica.Units.SI.HeatFlowRate QHC1_flow_nominal=Q_flow_nominal
              "Nominal heat flow rate in first heating coil"
              annotation (Dialog(group="Loading", enable=use_HC1));
            parameter Modelica.Units.SI.Length lengthHC1=floor((h*fHeiHC1/pipeHC1.d_o))*
                pipeHC1.d_o/sin(atan(pipeHC1.d_o/(d*fDiaHC1))) "Lenght of first HC"
              annotation (Dialog(
                tab="Calculated",
                group="Loading",
                enable=use_HC1));
            parameter Modelica.Units.SI.MassFlowRate mHC1_flow_nominal
              "Nominal mass flow rate of HC fluid"
              annotation (Dialog(group="Loading", enable=use_HC1));
            replaceable parameter AixLib.DataBase.Pipes.PipeBaseDataDefinition pipeHC1 constrainedby
              AixLib.DataBase.Pipes.PipeBaseDataDefinition                                                                                         "Type of Pipe for HC1" annotation (choicesAllMatching=true, Dialog(group="Loading", enable=use_HC1));
            parameter Modelica.Units.SI.CoefficientOfHeatTransfer hConHC1=(2/pipeHC1.d_o)
                /(((max(dTLoadingHC1, dTLoaMin)*2*Modelica.Constants.pi*lengthHC1)/
                QHC1_flow_nominal) - (1/pipeHC1.lambda*log(pipeHC1.d_o/pipeHC1.d_i)))
              "Model assumptions Coefficient of Heat Transfer HC1 <-> Heating Water"
              annotation (Dialog(
                tab="Calculated",
                group="Loading",
                enable=use_HC1));
            parameter Modelica.Units.SI.Velocity vHC1_nominal=mHC1_flow_nominal/(rho*(
                pipeHC1.d_i*Modelica.Constants.pi/2)^2)
              "Fluid velocity in pipe of HC 1 at nominal conditions" annotation (Dialog(
                tab="Calculated",
                group="Loading",
                enable=use_HC1));

            // Heat losses
            parameter Modelica.Units.SI.Temperature T_m
              "Average storage temperature. Used to calculate default heat loss"
              annotation (Dialog(group="Insulation"));
            parameter Modelica.Units.SI.Temperature TAmb
              "Ambient temperature. Used to calculate default heat loss"
              annotation (Dialog(group="Insulation"));
            parameter Boolean use_QLos=false   "=true to use QLosPerDay instead of TLosPerDay" annotation (Dialog(group="Insulation"));
            parameter Real QLosPerDay=1 "Heat loss per day. MUST BE IN kWh/d" annotation (Dialog(enable=use_QLos, group="Insulation"));
            parameter Real TLosPerDay=1 "Temperature decline per day in K/d" annotation (Dialog(enable=not use_QLos, group="Insulation"));
            parameter Modelica.Units.SI.CoefficientOfHeatTransfer hConIn=100
              "Model assumptions heat transfer coefficient water <-> wall"
              annotation (Dialog(group="Insulation"));
            parameter Modelica.Units.SI.CoefficientOfHeatTransfer hConOut=10
              "Model assumptions heat transfer coefficient insulation <-> air"
              annotation (Dialog(group="Insulation"));
            parameter Modelica.Units.SI.ThermalConductivity lambda_ins=0.045
              "thermal conductivity of insulation"
              annotation (tab="Calculated", Dialog(group="Insulation"));
            parameter Modelica.Units.SI.HeatFlowRate QLoss_flow=if use_QLos then
                QLosPerDay/24*1000 else rho*c_p*V*TLosPerDay/(86400)
              "Actual heat flow rate loss"
              annotation (Dialog(tab="Calculated", group="Insulation"));
            parameter Modelica.Units.SI.Thickness sIns=
                Modelica.Math.Nonlinear.solveOneNonlinearEquation(
                function
                  BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.GetStorageInsulation(
                  QLoss_flow=QLoss_flow,
                  dT_loss=T_m - TAmb,
                  hConOut=hConOut,
                  hConIn=hConIn,
                  lambda_ins=lambda_ins,
                  d=d,
                  h=h),
                1e-5,
                10) "thickness of insulation" annotation (Dialog(group="Insulation"));

           annotation (Icon(graphics,
                            coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)),
              Documentation(info="<html>
<p><img src=\"modelica://BESMod/Resources/Images/equations/heatTraNLayerWall.png\"/></p>
</html>"));
          end PartialStorageBaseDataDefinition;

          package SimpleStorage

            partial record SimpleStorageBaseDataDefinition
              extends
                Systems.Hydraulical.Distribution.RecordsCollection.PartialStorageBaseDataDefinition(
                  final use_HC1=true);

              parameter Modelica.Units.SI.Volume V_HE=lengthHC1*(pipeHC1.d_i/2)^2*Modelica.Constants.pi
                "heat exchanger volume based on pipe length and diameter"
                annotation (Dialog(group="Loading"));
              parameter Modelica.Units.SI.CoefficientOfHeatTransfer k_HE=QHC1_flow_nominal/
                  (A_HE*max(dTLoadingHC1, dTLoaMin))
                "heat exchanger heat transfer coefficient"
                annotation (Dialog(group="Loading"));
              parameter Modelica.Units.SI.Area A_HE=lengthHC1*((pipeHC1.d_i + pipeHC1.d_o)/
                  2)*Modelica.Constants.pi
                "heat exchanger area based on length and average diameter"
                annotation (Dialog(group="Loading"));
              parameter Modelica.Units.SI.RelativePressureCoefficient beta;
              parameter Real kappa;

            end SimpleStorageBaseDataDefinition;

            record DefaultStorage "Default storage data"
              extends SimpleStorageBaseDataDefinition(kappa=0.4, beta=350e-6);
            end DefaultStorage;
          end SimpleStorage;

          package BufferStorage

            record BufferStorageBaseDataDefinition
              extends
                Systems.Hydraulical.Distribution.RecordsCollection.PartialStorageBaseDataDefinition;

              // Heating rod:
              parameter Boolean use_hr=false annotation (Dialog(group="Heating Rod"));
              parameter Modelica.Units.SI.Power QHR_flow_nominal=0
                annotation (Dialog(group="Heating Rod"));
              parameter Integer nLayerHR = integer(floor(nLayer/2)) "Layer of heating rod" annotation (Dialog(group="Heating Rod"));
              parameter Integer discretizationStepsHR=0 "Number of steps to dicretize the heating rod. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1" annotation (Dialog(group="Heating Rod"));
              // Heating coil 2:
              parameter Boolean use_HC2 "=false to disable heating coil 2"  annotation (Dialog(group="Loading"));
              parameter Modelica.Units.SI.TemperatureDifference dTLoadingHC2
                "Temperature difference for loading of first heating coil"
                annotation (Dialog(group="Loading", enable=use_HC2));
              parameter Real fHeiHC2=1 "Percentage of the storage height used for the heating coil" annotation (Dialog(group="Loading", enable=use_HC2));
              parameter Real fDiaHC2=1 "Percentage of the storage diameter used for the heating coil" annotation (Dialog(group="Loading", enable=use_HC2));
              parameter Modelica.Units.SI.HeatFlowRate QHC2_flow_nominal=Q_flow_nominal
                "Nominal heat flow rate in first heating coil"
                annotation (Dialog(group="Loading", enable=use_HC2));
              parameter Modelica.Units.SI.Length lengthHC2=floor((h*fHeiHC2/pipeHC2.d_o))*
                  pipeHC2.d_o/sin(atan(pipeHC2.d_o/(d*fDiaHC2))) "Lenght of first HC"
                annotation (Dialog(
                  tab="Calculated",
                  group="Loading",
                  enable=use_HC2));
              parameter Modelica.Units.SI.MassFlowRate mHC2_flow_nominal
                "Nominal mass flow rate of HC fluid"
                annotation (Dialog(group="Loading", enable=use_HC2));
              replaceable parameter AixLib.DataBase.Pipes.PipeBaseDataDefinition pipeHC2   constrainedby
                AixLib.DataBase.Pipes.PipeBaseDataDefinition                                                                                           "Type of Pipe for HC2" annotation (choicesAllMatching=true, Dialog(group="Loading", enable=use_HC2));
              parameter Modelica.Units.SI.CoefficientOfHeatTransfer hConHC2=(2/pipeHC2.d_i
                   + 2/pipeHC2.d_o)/(((max(dTLoadingHC2, dTLoaMin)*2*Modelica.Constants.pi*
                  lengthHC2)/QHC2_flow_nominal) - (1/pipeHC2.lambda*log(pipeHC2.d_o/pipeHC2.d_i)))
                "Model assumptions Coefficient of Heat Transfer HC2 <-> Heating Water"
                annotation (Dialog(
                  tab="Calculated",
                  group="Loading",
                  enable=use_HC2));
              parameter Modelica.Units.SI.Velocity vHC2_nominal=mHC2_flow_nominal/(rho*(
                  pipeHC2.d_i*Modelica.Constants.pi/2)^2)
                "Fluid velocity in pipe of HC 1 at nominal conditions" annotation (Dialog(
                  tab="Calculated",
                  group="Loading",
                  enable=use_HC2));

            end BufferStorageBaseDataDefinition;

            record bufferData "Simpler design for this repo"
              extends AixLib.DataBase.Storage.BufferStorageBaseDataDefinition(
                pipeHC1=AixLib.DataBase.Pipes.Copper.Copper_22x1(),
                roughness=2.5e-5,
                lengthHC1=floor((hHC1Up - hHC1Low)/(dTank*0.8*tan(0.17453292519943)))*cos(0.17453292519943)*dTank*0.8,
                cWall=cIns,
                rhoWall=rhoIns,
                lengthHC2=floor((hHC1Up - hHC1Low)/(dTank*0.8*tan(0.17453292519943)))*cos(
                    0.17453292519943)*dTank*0.8,
                pipeHC2=pipeHC1,
                hTS2=hTank,
                hTS1=0,
                hHR=hTank/2,
                hHC2Low=0,
                hHC2Up=hTank/2,
                hHC1Low=hTank/2,
                hHC1Up=hTank,
                hUpperPortSupply=hTank,
                hLowerPortSupply=0,
                hUpperPortDemand=hTank,
                hLowerPortDemand=0);

            end bufferData;

            record DefaultDetailedStorage
              extends BufferStorageBaseDataDefinition(
                dTLoadingHC1=5,
                redeclare AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC2,
                redeclare AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1);
            end DefaultDetailedStorage;

            record DefaultDetailedStorageDirect
              extends BufferStorageBaseDataDefinition(
                dTLoadingHC1=3,
                redeclare AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC2,
                redeclare AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1);
            end DefaultDetailedStorageDirect;

            record DefaultNoStorage "no storage"
              extends BufferStorageBaseDataDefinition(
                dTLoadingHC1=0,
                use_HC1=false,
                use_HC2=false,
                redeclare AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC2,
                redeclare AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1);
            end DefaultNoStorage;

            record DefaultDetailedStorage_28x0_9 "bigger pipes for hc"
              extends BufferStorageBaseDataDefinition(
                dTLoadingHC1=5,
                redeclare AixLib.DataBase.Pipes.Copper.Copper_28x0_9 pipeHC2,
                redeclare AixLib.DataBase.Pipes.Copper.Copper_28x0_9 pipeHC1);
            end DefaultDetailedStorage_28x0_9;
          end BufferStorage;

          function GetStorageInsulation
            input Modelica.Units.SI.Thickness u "Thickness";
            input Modelica.Units.SI.HeatFlowRate QLoss_flow "Loss per day in W";
            input Modelica.Units.SI.TemperatureDifference dT_loss
              "Temperature spread of loss according to DIN EN 15332";
            input Modelica.Units.SI.CoefficientOfHeatTransfer hConOut
              "Convective heat tranfer on the outside";
            input Modelica.Units.SI.CoefficientOfHeatTransfer hConIn
              "Convective heat tranfer on the inside";
            input Modelica.Units.SI.ThermalConductivity lambda_ins
              "Insulation conductivity";
            input Modelica.Units.SI.Diameter d "Storage diameter";
            input Modelica.Units.SI.Height h "Storage heigth";
            output Real y "Percentage deviation";

          algorithm
            y := 1 - dT_loss * (2*Modelica.Constants.pi*h/(1/(hConIn*d/2) + 1/lambda_ins*log((d/2 + u)/(d/2))
                   + 1/(hConOut*(d/2 + u))) + 2 * (Modelica.Constants.pi * d ^ 2 / 4 * lambda_ins / u)) / (QLoss_flow);
          end GetStorageInsulation;
        end RecordsCollection;

        package Tests
        extends Modelica.Icons.ExamplesPackage;

          model TestCombiStorage
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.CombiStorage
                distribution(redeclare
                  BESMod.Examples.SolarThermalSystem.CombiStorage parameters(
                  use_HC1=true,
                  dTLoadingHC1=5,
                  use_HC2=true,
                  dTLoadingHC2=5)));
            Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=100) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-68,88})));
          equation
            connect(booleanPulse.y, sigBusDistr.dhw_on) annotation (Line(points={{-57,88},
                    {-42,88},{-42,81},{-14,81}}, color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          end TestCombiStorage;

          model TestDirectLoading
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.TwoStoDetailedDirectLoading
                distribution(
                QHRAftBuf_flow_nominal=0,
                use_heatingRodAfterBuffer=false,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                  temperatureSensorData,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                  threeWayValveParameters,
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                  bufParameters,
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                  dhwParameters(dTLoadingHC1=5),
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                  heatingRodAftBufParameters));
            Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=100) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-68,88})));
          equation
            connect(booleanPulse.y, sigBusDistr.dhw_on) annotation (Line(points={{-57,88},
                    {-42,88},{-42,81},{-14,81}}, color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          end TestDirectLoading;

          model TestIndirectLoading
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
                distribution(
                QHRAftBuf_flow_nominal=0,
                use_heatingRodAfterBuffer=false,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                  temperatureSensorData,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                  threeWayValveParameters,
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                  bufParameters,
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                  dhwParameters,
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                  heatingRodAftBufParameters));
            Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=100) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-68,88})));
          equation
            connect(booleanPulse.y, sigBusDistr.dhw_on) annotation (Line(points={{-57,88},
                    {-42,88},{-42,81},{-14,81}}, color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          end TestIndirectLoading;

          model TestOnlyBuilding
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.BuildingOnly
                distribution(nParallelDem=1));
          end TestOnlyBuilding;

          model TestOnlyDHW
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.DHWOnly distribution(
                  nParallelDem=1));
            Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=100) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-68,88})));
          equation
            connect(booleanPulse.y, sigBusDistr.dhw_on) annotation (Line(points={{-57,88},
                    {-42,88},{-42,81},{-14,81}}, color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          end TestOnlyDHW;

          model TestSimpleStorages
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.DistributionTwoStorageParallel
                distribution(redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.DefaultStorage
                  bufParameters(dTLoadingHC1=5), redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.DefaultStorage
                  dhwParameters(dTLoadingHC1=5)));
            Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=100) annotation (
                Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-68,88})));
          equation
            connect(booleanPulse.y, sigBusDistr.dhw_on) annotation (Line(points={{-57,88},
                    {-42,88},{-42,81},{-14,81}}, color={255,0,255}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          end TestSimpleStorages;

          partial model PartialTest
            extends BESMod.HugosProject.Systems.BaseClasses.PartialBESExample;

            replaceable BaseClasses.PartialDistribution distribution constrainedby
              BaseClasses.PartialDistribution(
              redeclare package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              Q_flow_nominal=fill(sum(systemParameters.QBui_flow_nominal), distribution.nParallelDem),
              TOda_nominal=systemParameters.TOda_nominal,
              TDem_nominal=fill(systemParameters.THydSup_nominal[1], distribution.nParallelDem),
              TAmb=systemParameters.TAmbHyd,
              mDHW_flow_nominal=0.1,
              QDHW_flow_nominal=2000,
              TDHW_nominal=systemParameters.TSetDHW,
              VDHWDay=0.125,
              TDHWCold_nominal=systemParameters.TDHWWaterCold,
              redeclare package MediumDHW = Medium,
              redeclare package MediumGen = Medium,
              mSup_flow_nominal=fill(0.317, distribution.nParallelSup),
              T_start=systemParameters.THydSup_nominal[1],
              mDem_flow_nominal=fill(0.317, distribution.nParallelDem))
                                             annotation (choicesAllMatching=true,
                Placement(transformation(extent={{-50,-44},{24,28}})));

            Interfaces.DistributionControlBus
              sigBusDistr
              annotation (Placement(transformation(extent={{-38,60},{10,102}})));
            replaceable package Medium = IBPSA.Media.Water constrainedby
              Modelica.Media.Interfaces.PartialMedium annotation (choicesAllMatching=true);
            IBPSA.Fluid.Movers.FlowControlled_m_flow fanTra[distribution.nParallelDem](
              redeclare final package Medium = Medium,
              each final energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              each final p_start=distribution.p_start,
              each final T_start=distribution.T_start,
              each final X_start=distribution.X_start,
              each final C_start=distribution.C_start,
              each final C_nominal=distribution.C_nominal,
              each final allowFlowReversal=distribution.allowFlowReversal,
              final m_flow_nominal=distribution.m_flow_nominal,
              each final show_T=distribution.show_T,
              redeclare final IBPSA.Fluid.Movers.Data.Pumps.Wilo.Stratos32slash1to12 per,
              each final inputType=IBPSA.Fluid.Types.InputType.Continuous,
              each final addPowerToMedium=false,
              each final nominalValuesDefineDefaultPressureCurve=true,
              each final tau=1,
              each final use_inputFilter=false,
              each final init=Modelica.Blocks.Types.Init.InitialOutput) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={62,8})));

            Modelica.Blocks.Sources.Sine m_flow[distribution.nParallelDem](
              each amplitude=0.1,
              each f=1/1800,
              each offset=0.2) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={144,-10})));
            IBPSA.Fluid.Sources.Boundary_pT bouDHW(
              redeclare package Medium = IBPSA.Media.Water,
              final p=distribution.p_start,
              final T=distribution.T_start,
              each final nPorts=1) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={84,-22})));
            IBPSA.Fluid.Movers.FlowControlled_m_flow fanDHW(
              redeclare final package Medium = Medium,
              final energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              final p_start=distribution.p_start,
              final T_start=distribution.T_start,
              final X_start=distribution.X_start,
              final C_start=distribution.C_start,
              final C_nominal=distribution.C_nominal,
              final allowFlowReversal=distribution.allowFlowReversal,
              final m_flow_nominal=distribution.mDHW_flow_nominal,
              final show_T=distribution.show_T,
              redeclare final IBPSA.Fluid.Movers.Data.Pumps.Wilo.Stratos32slash1to12 per,
              final inputType=IBPSA.Fluid.Types.InputType.Continuous,
              final addPowerToMedium=false,
              final nominalValuesDefineDefaultPressureCurve=true,
              final tau=1,
              final use_inputFilter=false,
              final init=Modelica.Blocks.Types.Init.InitialOutput) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={60,-42})));

            IBPSA.Fluid.Sources.Boundary_pT bouTra[distribution.nParallelDem](
              redeclare package Medium = IBPSA.Media.Water,
              each final p=distribution.p_start,
              each final T=distribution.T_start,
              each final nPorts=1) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={64,42})));
            IBPSA.Fluid.Movers.FlowControlled_m_flow fanGen[distribution.nParallelSup](
              redeclare final package Medium = Medium,
              each final energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              each final p_start=distribution.p_start,
              each final T_start=distribution.T_start,
              each final X_start=distribution.X_start,
              each final C_start=distribution.C_start,
              each final C_nominal=distribution.C_nominal,
              each final allowFlowReversal=distribution.allowFlowReversal,
              m_flow_nominal=fill(0.317, distribution.nParallelSup),
              each final show_T=distribution.show_T,
              redeclare final IBPSA.Fluid.Movers.Data.Pumps.Wilo.Stratos32slash1to12 per,
              each final inputType=IBPSA.Fluid.Types.InputType.Continuous,
              each final addPowerToMedium=false,
              each final nominalValuesDefineDefaultPressureCurve=true,
              each final tau=1,
              each final use_inputFilter=false,
              each final init=Modelica.Blocks.Types.Init.InitialOutput) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-82,14})));

            Modelica.Blocks.Sources.Constant constOn[distribution.nParallelSup](each final k=0.317)
              annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-126,14})));
            IBPSA.Fluid.Sources.Boundary_pT bouTra1[distribution.nParallelSup](
              redeclare package Medium = IBPSA.Media.Water,
              each final p=distribution.p_start,
              each final T=distribution.T_start,
              each final nPorts=1) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-80,-28})));
            IBPSA.Fluid.FixedResistances.PressureDrop res1[distribution.nParallelDem](
              redeclare package Medium = Medium,
              each final dp_nominal=1,
              final m_flow_nominal=distribution.m_flow_nominal)
              "Hydraulic resistance of supply" annotation (Placement(transformation(
                  extent={{-6.5,-8},{6.5,8}},
                  rotation=0,
                  origin={45.5,24})));
          equation
            connect(sigBusDistr, distribution.sigBusDistr) annotation (Line(
                points={{-14,81},{-14,38},{-13,38},{-13,28.36}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            connect(bouDHW.ports[1], fanDHW.port_a) annotation (Line(points={{74,-22},{74,
                    -28},{66,-28},{66,-26},{60,-26},{60,-32}}, color={0,127,255}));
            connect(distribution.portDHW_out, fanDHW.port_a) annotation (Line(points={{24,
                    -15.2},{24,-14},{60,-14},{60,-32}}, color={0,127,255}));
            connect(fanDHW.port_b, distribution.portDHW_in) annotation (Line(points={{60,-52},
                    {60,-54},{32,-54},{32,-29.6},{24,-29.6}}, color={0,127,255}));
            connect(fanGen.port_b, distribution.portGen_in) annotation (Line(points={{-82,
                    24},{-66,24},{-66,14},{-50,14},{-50,20.8}}, color={0,127,255}));
            connect(constOn.y, fanGen.m_flow_in)
              annotation (Line(points={{-115,14},{-94,14}}, color={0,0,127}));
            connect(fanTra.port_b, distribution.portBui_in) annotation (Line(points={{62,-2},
                    {62,-4},{30,-4},{30,6.4},{24,6.4}}, color={0,127,255}));
            connect(fanGen.port_a, bouTra1.ports[1])
              annotation (Line(points={{-82,4},{-80,4},{-80,-18}}, color={0,127,255}));
            connect(distribution.portGen_out, fanGen.port_a) annotation (Line(points={{-50,
                    6.4},{-68,6.4},{-68,-2},{-82,-2},{-82,4}}, color={0,127,255}));
            connect(m_flow[1].y, fanDHW.m_flow_in) annotation (Line(points={{133,-10},{114,
                    -10},{114,-42},{72,-42}}, color={0,0,127}));
            connect(m_flow.y, fanTra.m_flow_in) annotation (Line(points={{133,-10},{116,-10},
                    {116,-12},{78,-12},{78,8},{74,8}}, color={0,0,127}));
            connect(bouTra.ports[1], fanTra.port_a) annotation (Line(points={{64,32},{62,32},{62,18}}, color={0,127,255}));
            connect(distribution.portBui_out, res1.port_a) annotation (Line(points={{24,20.8},
                    {32,20.8},{32,26},{39,26},{39,24}}, color={0,127,255}));
            connect(res1.port_b, fanTra.port_a) annotation (Line(points={{52,24},{56,24},{
                    56,18},{62,18}}, color={0,127,255}));
            annotation (experiment(
                StopTime=864000,
                Interval=600,
                __Dymola_Algorithm="Dassl"));
          end PartialTest;
        end Tests;

        package BaseClasses "Base class with partial distribution models"
          partial model PartialDistribution
            "Partial distribution model for HPS"
            extends BESMod.Utilities.Icons.StorageIcon;
            extends
              BESMod.HugosProject.Systems.BaseClasses.PartialFluidSubsystemWithParameters(
                final dp_nominal=dpDem_nominal, TSup_nominal=TDem_nominal .+
                  dTLoss_nominal .+ dTTra_nominal);
            extends PartialDHWParameters;
            replaceable package MediumDHW =
                Modelica.Media.Interfaces.PartialMedium
              annotation (choicesAllMatching=true);

            replaceable package MediumGen =
                Modelica.Media.Interfaces.PartialMedium
              annotation (choicesAllMatching=true);
            parameter Modelica.Units.SI.MassFlowRate mSup_flow_nominal[nParallelSup]
              "Nominal mass flow rate of system supplying the distribution" annotation (
                Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.MassFlowRate mDem_flow_nominal[nParallelDem]
              "Nominal mass flow rate of demand system of the distribution" annotation (
                Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.TemperatureDifference dTTraDHW_nominal
              "Nominal temperature difference to transfer heat to the DHW storage"
              annotation (Dialog(group="DHW Demand"));
            parameter Modelica.Units.SI.PressureDifference dpSup_nominal[nParallelSup]
              "Nominal pressure loss of resistances connected to the supply system of the distribution"
              annotation (Dialog(group=
                    "Design - Bottom Up: Parameters are defined by the subsystem"));
            parameter Modelica.Units.SI.PressureDifference dpDem_nominal[nParallelDem]
              "Nominal pressure loss of resistances connected to the demand system of the distribution"
              annotation (Dialog(group=
                    "Design - Bottom Up: Parameters are defined by the subsystem"));

            Modelica.Fluid.Interfaces.FluidPort_a portGen_in[nParallelSup](redeclare
                final package Medium = MediumGen) "Inlet from the generation" annotation (
               Placement(transformation(extent={{-110,70},{-90,90}}), iconTransformation(
                    extent={{-110,70},{-90,90}})));
            Modelica.Fluid.Interfaces.FluidPort_b portGen_out[nParallelSup](redeclare
                final package Medium = MediumGen) "Outlet to the generation" annotation (
                Placement(transformation(extent={{-110,30},{-90,50}}), iconTransformation(
                    extent={{-110,30},{-90,50}})));
            Modelica.Fluid.Interfaces.FluidPort_b portBui_out[nParallelDem](redeclare
                final package Medium =
                         Medium) "Outlet for the distribution to the building"
              annotation (Placement(transformation(extent={{90,70},{110,90}}),
                  iconTransformation(extent={{90,70},{110,90}})));
            Modelica.Fluid.Interfaces.FluidPort_a portBui_in[nParallelDem](redeclare
                final package Medium =
                         Medium) "Inlet for the distribution from the building"
              annotation (Placement(transformation(extent={{90,30},{110,50}}),
                  iconTransformation(extent={{90,30},{110,50}})));

            Modelica.Fluid.Interfaces.FluidPort_b portDHW_out(redeclare final
                package Medium =
                         MediumDHW) "Outlet for the distribution to the DHW" annotation (
                Placement(transformation(extent={{90,-32},{110,-12}}), iconTransformation(
                    extent={{90,-30},{110,-10}})));
            Modelica.Fluid.Interfaces.FluidPort_a portDHW_in(redeclare final
                package Medium =
                         MediumDHW) "Inet for the distribution from the DHW" annotation (
                Placement(transformation(extent={{90,-92},{110,-72}}), iconTransformation(
                    extent={{90,-70},{110,-50}})));

            BESMod.HugosProject.Systems.Hydraulical.Interfaces.DistributionControlBus
              sigBusDistr annotation (Placement(transformation(extent={{-24,80},
                      {24,122}})));
            BESMod.HugosProject.Systems.Hydraulical.Interfaces.DistributionOutputs
              outBusDist annotation (Placement(transformation(extent={{-10,-110},
                      {10,-90}})));
            Electrical.Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{60,-108},{80,-88}})));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialDistribution;

          partial model PartialDistributionTwoStorageParallelDetailed
            "Partial model to later extent"
            extends BaseClasses.PartialDistribution(
              final dpDem_nominal={0},
              final dpSup_nominal={2*(threeWayValveParameters.dpValve_nominal + max(
                  threeWayValveParameters.dp_nominal))},
              final dTTraDHW_nominal=dhwParameters.dTLoadingHC1,
              final dTTra_nominal={bufParameters.dTLoadingHC1},
              final m_flow_nominal=mDem_flow_nominal,
              final TSup_nominal=TDem_nominal .+ dTLoss_nominal .+ dTTra_nominal,
              final nParallelSup=1,
              final nParallelDem=1);

            parameter Modelica.Units.SI.PressureDifference dpBufHCSto_nominal
              "Nominal pressure difference in buffer storage heating coil";
            final parameter Modelica.Units.SI.PressureDifference dpDHWHCSto_nominal=sum(
                storageDHW.heatingCoil1.pipe.res.dp_nominal)
              "Nominal pressure difference in DHW storage heating coil";
            parameter Modelica.Units.SI.HeatFlowRate QHRAftBuf_flow_nominal
              "Nominal heat flow rate of heating rod after DHW storage"
              annotation (Dialog(enable=use_heatingRodAfterBuffer));
            parameter Boolean use_heatingRodAfterBuffer "=false to disable the heating rod after the buffer storage";
            parameter Integer discretizationStepsDWHStoHR=0
              "Number of steps to dicretize. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1";
            parameter Integer discretizationStepsBufStoHR=0
              "Number of steps to dicretize. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1";
            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.TemperatureSensorBaseDefinition
              temperatureSensorData annotation (choicesAllMatching=true,
                Placement(transformation(extent={{62,28},{68,34}})));
            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.Valves.ThreeWayValve
              threeWayValveParameters constrainedby
              BESMod.HugosProject.Systems.RecordsCollection.Valves.ThreeWayValve(
              final dp_nominal={dpBufHCSto_nominal,dpDHWHCSto_nominal},
              final m_flow_nominal=mSup_flow_nominal[1],
              final fraK=1,
              use_inputFilter=false) annotation (choicesAllMatching=true,
                Placement(transformation(extent={{-84,84},{-64,104}})));

           replaceable
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition bufParameters
              constrainedby
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition(
                  final Q_flow_nominal=Q_flow_nominal[1]*f_design[1],
                  final rho=rho,
                  final c_p=cp,
                  final TAmb=TAmb,
                  T_m=TSup_nominal[1],
                  final QHC1_flow_nominal=Q_flow_nominal[1]*f_design[1],
                  final mHC1_flow_nominal=mSup_flow_nominal[1],
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1,
                  final use_HC2=storageBuf.useHeatingCoil2,
                  final use_HC1=storageBuf.useHeatingCoil1,
                  final dTLoadingHC2=9999999,
                  final fHeiHC2=1,
                  final fDiaHC2=1,
                  final QHC2_flow_nominal=9999999,
                  final mHC2_flow_nominal=9999999,
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_10x0_6 pipeHC2)
                    annotation (
                choicesAllMatching=true, Placement(transformation(extent={{18,26},{32,40}})));

            replaceable
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition dhwParameters
              constrainedby
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition(
                  final rho=rho,
                  final c_p=cp,
                  final TAmb=TAmb,
                  final use_HC1=storageDHW.useHeatingCoil1,
                  final QHC1_flow_nominal=Q_flow_nominal[1]*f_design[1],
                  final V=VDHWDay,
                  final Q_flow_nominal=QDHW_flow_nominal,
                  final VPerQ_flow=0,
                  T_m=TDHW_nominal,
                  final mHC1_flow_nominal=mSup_flow_nominal[1],
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1,
                  final use_HC2=storageDHW.useHeatingCoil2,
                  final dTLoadingHC2=9999999,
                  final fHeiHC2=1,
                  final fDiaHC2=1,
                  final QHC2_flow_nominal=9999999,
                  final mHC2_flow_nominal=9999999,
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_10x0_6 pipeHC2) annotation (
                choicesAllMatching=true, Placement(transformation(extent={{20,-62},{34,-48}})));

            Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperatureBuf(final T=bufParameters.TAmb)           annotation (Placement(transformation(
                  extent={{-12,-12},{12,12}},
                  rotation=0,
                  origin={-82,2})));
            Modelica.Blocks.Sources.RealExpression T_stoDHWTop(final y(unit="K", displayUnit="degC")=storageDHW.layer[
                  dhwParameters.nLayer].T) annotation (Placement(transformation(
                  extent={{-17,-6},{17,6}},
                  rotation=0,
                  origin={-33,70})));
            Modelica.Blocks.Sources.RealExpression T_stoBufTop(final y(unit="K", displayUnit="degC")=storageBuf.layer[
                  bufParameters.nLayer].T) annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,87})));
            Modelica.Blocks.Sources.RealExpression T_stoBufBot(final y(unit="K", displayUnit="degC")=storageBuf.layer[1].T)
              annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,79})));
            Modelica.Blocks.Sources.RealExpression T_stoDHWBot(final y(unit="K", displayUnit="degC")=storageDHW.layer[1].T)
              annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,95})));

            Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperatureDHW(final T=dhwParameters.TAmb)           annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-72,-88})));

            AixLib.Fluid.Storage.BufferStorage storageBuf(
              redeclare final package Medium = Medium,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final mSenFac=1,
              redeclare package MediumHC1 = MediumGen,
              redeclare package MediumHC2 = MediumGen,
              final m1_flow_nominal=mSup_flow_nominal[1],
              final m2_flow_nominal=m_flow_nominal[1],
              final mHC1_flow_nominal=bufParameters.mHC1_flow_nominal,
              final mHC2_flow_nominal=bufParameters.mHC2_flow_nominal,
              final useHeatingCoil2=false,
              final useHeatingRod=bufParameters.use_hr,
              final TStart=T_start,
              redeclare final RecordsCollection.BufferStorage.bufferData data(
                final hTank=bufParameters.h,
                hHC1Low=0,
                hHR=bufParameters.nLayerHR/bufParameters.nLayer*bufParameters.h,
                final dTank=bufParameters.d,
                final sWall=bufParameters.sIns/2,
                final sIns=bufParameters.sIns/2,
                final lambdaWall=bufParameters.lambda_ins,
                final lambdaIns=bufParameters.lambda_ins,
                final rhoIns=373000,
                final cIns=1000,
                pipeHC1=bufParameters.pipeHC1,
                pipeHC2=bufParameters.pipeHC2,
                lengthHC1=bufParameters.lengthHC1,
                lengthHC2=bufParameters.lengthHC2),
              final n=bufParameters.nLayer,
              final hConIn=bufParameters.hConIn,
              final hConOut=bufParameters.hConOut,
              final hConHC1=bufParameters.hConHC1,
              final hConHC2=bufParameters.hConHC2,
              upToDownHC1=true,
              upToDownHC2=true,
              final TStartWall=T_start,
              final TStartIns=T_start,
              redeclare model HeatTransfer =
                  AixLib.Fluid.Storage.BaseClasses.HeatTransferBuoyancyWetter,
              final allowFlowReversal_layers=allowFlowReversal,
              final allowFlowReversal_HC1=allowFlowReversal,
              final allowFlowReversal_HC2=allowFlowReversal)
              annotation (Placement(transformation(extent={{-36,14},{0,58}})));

            AixLib.Fluid.Storage.BufferStorage storageDHW(
              redeclare final package Medium = MediumDHW,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final mSenFac=1,
              redeclare final package MediumHC1 = MediumGen,
              redeclare final package MediumHC2 = MediumGen,
              final m1_flow_nominal=mSup_flow_nominal[1],
              final m2_flow_nominal=mDHW_flow_nominal,
              final mHC1_flow_nominal=dhwParameters.mHC1_flow_nominal,
              final mHC2_flow_nominal=dhwParameters.mHC2_flow_nominal,
              final useHeatingCoil1=true,
              final useHeatingCoil2=false,
              final useHeatingRod=dhwParameters.use_hr,
              final TStart=T_start,
              redeclare final RecordsCollection.BufferStorage.bufferData data(
                final hTank=dhwParameters.h,
                hHC1Low=0,
                hHR=dhwParameters.nLayerHR/dhwParameters.nLayer*dhwParameters.h,
                final dTank=dhwParameters.d,
                final sWall=dhwParameters.sIns/2,
                final sIns=dhwParameters.sIns/2,
                final lambdaWall=dhwParameters.lambda_ins,
                final lambdaIns=dhwParameters.lambda_ins,
                final rhoIns=373000,
                final cIns=1000,
                pipeHC1=dhwParameters.pipeHC1,
                pipeHC2=dhwParameters.pipeHC2,
                lengthHC1=dhwParameters.lengthHC1,
                lengthHC2=dhwParameters.lengthHC2),
              final n=dhwParameters.nLayer,
              final hConIn=dhwParameters.hConIn,
              final hConOut=dhwParameters.hConOut,
              final hConHC1=dhwParameters.hConHC1,
              final hConHC2=dhwParameters.hConHC2,
              final upToDownHC1=true,
              final upToDownHC2=true,
              final TStartWall=T_start,
              final TStartIns=T_start,
              redeclare model HeatTransfer =
                  AixLib.Fluid.Storage.BaseClasses.HeatTransferBuoyancyWetter,
              final allowFlowReversal_layers=allowFlowReversal,
              final allowFlowReversal_HC1=allowFlowReversal,
              final allowFlowReversal_HC2=allowFlowReversal)
              annotation (Placement(transformation(extent={{-36,-74},{0,-28}})));

            BESMod.Components.HeatingRodWithSecurityControl
                                                   hea(
              redeclare package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              final m_flow_nominal=m_flow_nominal[1],
              final m_flow_small=1E-4*abs(m_flow_nominal[1]),
              final show_T=show_T,
              final dp_nominal=heatingRodAftBufParameters.dp_nominal,
              final tau=30,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final T_start=T_start,
              final Q_flow_nominal=QHRAftBuf_flow_nominal,
              final V=heatingRodAftBufParameters.V_hr,
              final eta=heatingRodAftBufParameters.eta_hr) if use_heatingRodAfterBuffer
              annotation (Placement(transformation(
                  extent={{-12,-11},{12,11}},
                  rotation=0,
                  origin={62,87})));
            replaceable Generation.RecordsCollection.HeatingRodBaseDataDefinition heatingRodAftBufParameters
           if use_heatingRodAfterBuffer "Parameters for heating rod after buffer storage"
              annotation (choicesAllMatching=true, Placement(transformation(
                  extent={{-6,-6},{6,6}},
                  rotation=0,
                  origin={68,50})));
            AixLib.Fluid.Interfaces.PassThroughMedium passThroughMediumHRBuf(redeclare
                package Medium = Medium, allowFlowReversal=allowFlowReversal)
              if not use_heatingRodAfterBuffer
              annotation (Placement(transformation(extent={{62,62},{74,74}})));

            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow QHRStoDHWPre_flow(final
                T_ref=293.15, final alpha=0) if dhwParameters.use_hr annotation (
                Placement(transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={-69,-51})));
            Modelica.Blocks.Math.Gain gain(k=dhwParameters.QHR_flow_nominal)
           if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-102,-60},{-86,-42}})));
            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow QHRStoBufPre_flow1(final
                T_ref=293.15, final alpha=0) if bufParameters.use_hr annotation (
                Placement(transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={-47,35})));
            Modelica.Blocks.Math.Gain gainHRBuf(k=bufParameters.QHR_flow_nominal)
           if bufParameters.use_hr
              annotation (Placement(transformation(extent={{-80,18},{-64,36}})));
            BESMod.Components.DiscretizeContSignal  discretizeHRAftBufSto(final
                discretizationSteps=heatingRodAftBufParameters.discretizationSteps)
           if use_heatingRodAfterBuffer
              annotation (Placement(transformation(extent={{36,88},{44,96}})));
            BESMod.Components.DiscretizeContSignal  discretizeHRInDHWSto(final
                discretizationSteps=dhwParameters.discretizationStepsHR)
              if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-120,-54},{-112,-46}})));
            BESMod.Components.DiscretizeContSignal  discretizeHRInBufSto(final
                discretizationSteps=bufParameters.discretizationStepsHR)
              if bufParameters.use_hr
              annotation (Placement(transformation(extent={{-100,24},{-92,32}})));

            Components.Valves.ThreeWayValveWithFlowReturn threeWayValveWithFlowReturn(
              redeclare package Medium = MediumGen,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final T_start=T_start,
              final X_start=X_start,
              final C_start=C_start,
              final C_nominal=C_nominal,
              final mSenFac=mSenFac,
              redeclare BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                                                                                     parameters=threeWayValveParameters)
              annotation (Placement(transformation(extent={{-84,54},{-64,74}})));

            Utilities.KPIs.InternalKPICalculator internalKPICalculatorBufLoss(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=false,
              calc_movAve=false,
              calc_intBelThres=false,
              y=fixedTemperatureBuf.port.Q_flow)
              annotation (Placement(transformation(extent={{-52,-134},{-32,-96}})));
            Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWLoss(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=false,
              calc_movAve=false,
              calc_intBelThres=false,
              y=fixedTemperatureDHW.port.Q_flow)
              annotation (Placement(transformation(extent={{-52,-154},{-32,-116}})));
            IBPSA.Fluid.Sensors.TemperatureTwoPort senTBuiSup(
              redeclare final package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=m_flow_nominal[1],
              tau=temperatureSensorData.tau,
              initType=temperatureSensorData.initType,
              T_start=T_start,
              final transferHeat=temperatureSensorData.transferHeat,
              TAmb=temperatureSensorData.TAmb,
              tauHeaTra=temperatureSensorData.tauHeaTra)
              "Temperature at supply for building" annotation (Placement(transformation(
                  extent={{5,6},{-5,-6}},
                  rotation=180,
                  origin={87,80})));

            Utilities.Electrical.ZeroLoad zeroLoad
              annotation (Placement(transformation(extent={{30,-108},{50,-88}})));
            Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWHR(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=true,
              calc_movAve=false,
              calc_intBelThres=false,
              y=QHRStoDHWPre_flow.Q_flow) if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-84,-134},{-64,-96}})));
            Utilities.KPIs.InputKPICalculator inputKPICalculator(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=true,
              calc_movAve=false,
              calc_intBelThres=false) if use_heatingRodAfterBuffer
              annotation (Placement(transformation(extent={{-84,-156},{-64,-118}})));
            Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWHR1(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=true,
              calc_movAve=false,
              calc_intBelThres=false,
              y=QHRStoBufPre_flow1.Q_flow) if bufParameters.use_hr
              annotation (Placement(transformation(extent={{-108,-134},{-88,-96}})));
          equation
            connect(T_stoDHWBot.y, sigBusDistr.TStoDHWBotMea) annotation (Line(points={{-16.4,
                    95},{2.5,95},{2.5,101},{0,101}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoDHWTop.y, sigBusDistr.TStoDHWTopMea) annotation (Line(points={{-14.3,
                    70},{-2,70},{-2,101},{0,101}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoBufBot.y, sigBusDistr.TStoBufBotMea) annotation (Line(points={{-16.4,
                    79},{0,79},{0,101}},                      color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoBufTop.y, sigBusDistr.TStoBufTopMea) annotation (Line(points={{-16.4,
                    87},{0,87},{0,101}},                                  color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(fixedTemperatureDHW.port, storageDHW.heatportOutside) annotation (
                Line(points={{-62,-88},{14,-88},{14,-49.62},{-0.45,-49.62}},color={191,0,0}));
            connect(storageBuf.heatportOutside, fixedTemperatureBuf.port) annotation (
                Line(points={{-0.45,37.32},{12,37.32},{12,2},{-70,2}},color={191,0,0}));
            connect(portDHW_in, storageDHW.fluidportBottom2) annotation (Line(points={{100,
                    -82},{-12,-82},{-12,-74.23},{-12.825,-74.23}}, color={0,127,255}));
            connect(hea.port_a, storageBuf.fluidportTop2) annotation (Line(points={{50,87},
                    {48,87},{48,68},{-12.375,68},{-12.375,58.22}}, color={0,127,255},
                pattern=LinePattern.Dash));
            connect(passThroughMediumHRBuf.port_a, storageBuf.fluidportTop2) annotation (
                Line(points={{62,68},{-12.375,68},{-12.375,58.22}}, color={0,127,255},
                pattern=LinePattern.Dash));
            connect(portBui_in[1], storageBuf.fluidportBottom2) annotation (Line(points={{100,
                    40},{102,40},{102,22},{26,22},{26,4},{-12.825,4},{-12.825,13.78}},
                  color={0,127,255}));
            connect(storageDHW.heatingRod, QHRStoDHWPre_flow.port) annotation (Line(
                points={{-36,-51},{-62,-51}},
                color={191,0,0},
                pattern=LinePattern.Dash));
            connect(QHRStoDHWPre_flow.Q_flow, gain.y) annotation (Line(
                points={{-76,-51},{-85.2,-51}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(QHRStoBufPre_flow1.Q_flow, gainHRBuf.y) annotation (Line(
                points={{-54,35},{-58,35},{-58,27},{-63.2,27}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(QHRStoBufPre_flow1.port, storageBuf.heatingRod) annotation (Line(
                points={{-40,35},{-40,36},{-36,36}},
                color={191,0,0},
                pattern=LinePattern.Dash));
            connect(discretizeHRAftBufSto.u, sigBusDistr.uHRAftBuf) annotation (Line(
                  points={{35.2,92},{0,92},{0,101}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(discretizeHRAftBufSto.y, hea.u) annotation (Line(points={{44.4,92},{
                    47.6,92},{47.6,93.6}},
                                      color={0,0,127}));
            connect(discretizeHRInBufSto.u, sigBusDistr.uHRStoBuf) annotation (Line(
                  points={{-100.8,28},{-116,28},{-116,101},{0,101}}, color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(discretizeHRInBufSto.y, gainHRBuf.u) annotation (Line(points={{-91.6,
                    28},{-88,28},{-88,27},{-81.6,27}},
                                                   color={0,0,127}));
            connect(discretizeHRInDHWSto.u, sigBusDistr.uHRStoDHW) annotation (Line(
                  points={{-120.8,-50},{-126,-50},{-126,101},{0,101}}, color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(gain.u, discretizeHRInDHWSto.y) annotation (Line(points={{-103.6,-51},
                    {-108,-51},{-108,-50},{-111.6,-50}}, color={0,0,127}));
            connect(portGen_in[1], threeWayValveWithFlowReturn.portGen_a) annotation (
                Line(points={{-100,80},{-92,80},{-92,68.4},{-84,68.4}}, color={0,127,255}));
            connect(portGen_out[1], threeWayValveWithFlowReturn.portGen_b) annotation (
                Line(points={{-100,40},{-96,40},{-96,38},{-92,38},{-92,60},{-84,60},{-84,60.4}},
                  color={0,127,255}));
            connect(threeWayValveWithFlowReturn.portDHW_b, storageDHW.portHC1In)
              annotation (Line(points={{-64,60.4},{-60,60.4},{-60,60},{-46,60},{-46,-37.89},
                    {-36.45,-37.89}}, color={0,127,255}));
            connect(storageDHW.portHC1Out, threeWayValveWithFlowReturn.portDHW_a)
              annotation (Line(points={{-36.225,-45.02},{-52,-45.02},{-52,56.4},{-64,56.4}},
                  color={0,127,255}));
            connect(threeWayValveWithFlowReturn.uBuf, sigBusDistr.uThrWayVal) annotation (
               Line(points={{-74,76},{-74,101},{0,101}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            connect(internalKPICalculatorBufLoss.KPIBus, outBusDist.QBufLoss) annotation (
               Line(
                points={{-31.8,-115},{0,-115},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(internalKPICalculatorDHWLoss.KPIBus, outBusDist.QDHWLoss) annotation (
               Line(
                points={{-31.8,-135},{-16,-135},{-16,-136},{0,-136},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(senTBuiSup.port_a, hea.port_b)
              annotation (Line(points={{82,80},{74,80},{74,87}}, color={0,127,255}));
            connect(senTBuiSup.port_b, portBui_out[1]) annotation (Line(points={{92,80},{
                    100,80}},               color={0,127,255}));
            connect(senTBuiSup.T, sigBusDistr.TBuiSupMea) annotation (Line(points={{87,
                    86.6},{86,86.6},{86,102},{28,102},{28,76},{0,76},{0,101}}, color={0,0,
                    127}), Text(
                string="%second",
                index=1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            connect(passThroughMediumHRBuf.port_b, senTBuiSup.port_a)
              annotation (Line(points={{74,68},{82,68},{82,80}}, color={0,127,255}));
            connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
                Line(
                points={{50,-98},{70,-98}},
                color={0,0,0},
                thickness=1));
            connect(storageDHW.fluidportTop2, portDHW_out) annotation (Line(points={{-12.375,
                    -27.77},{-12.375,-20},{100,-20},{100,-22}}, color={0,127,255}));
            connect(internalKPICalculatorDHWHR.KPIBus, outBusDist.WelHRDHW) annotation (
                Line(
                points={{-63.8,-115},{0,-115},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(inputKPICalculator.KPIBus, outBusDist.WelHRAftBuf) annotation (Line(
                points={{-63.8,-137},{0,-137},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(hea.Pel, inputKPICalculator.u) annotation (Line(points={{75.2,93.6},{
                    132,93.6},{132,-150},{-92,-150},{-92,-137},{-86.2,-137}}, color={0,0,
                    127}));
            connect(internalKPICalculatorDHWHR1.KPIBus, outBusDist.WelHRBufSto)
              annotation (Line(
                points={{-87.8,-115},{-43.9,-115},{-43.9,-100},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          end PartialDistributionTwoStorageParallelDetailed;

          model PartialDHWParameters
            parameter Modelica.Units.SI.MassFlowRate mDHW_flow_nominal
              "Nominal mass flow rate" annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.HeatFlowRate QDHW_flow_nominal
              "Nominal heat flow rate to DHW" annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.Temperature TDHW_nominal
              "Nominal DHW temperature" annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.TemperatureDifference dTTraDHW_nominal
              "Nominal temperature difference to transfer heat to DHW" annotation (Dialog(
                  group="Design - Bottom Up: Parameters are defined by the subsystem"));
            parameter Modelica.Units.SI.Volume VDHWDay "Daily volume of DHW tapping"
              annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.Temperature TDHWCold_nominal
              "DHW cold city water" annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));

           annotation (Icon(graphics,
                            coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialDHWParameters;

          partial model PartialDistributionBWP1and2
            "Partial model to later extent"
            extends BaseClasses.PartialDistribution(
              final dpDem_nominal={0},
              final dpSup_nominal={2*(threeWayValveParameters.dpValve_nominal + max(
                  threeWayValveParameters.dp_nominal))},
              final dTTraDHW_nominal=dhwParameters.dTLoadingHC1,
              final dTTra_nominal={bufVLParameters.dTLoadingHC1},
              final m_flow_nominal=mDem_flow_nominal,
              final TSup_nominal=TDem_nominal .+ dTLoss_nominal .+ dTTra_nominal,
              final nParallelSup=1,
              final nParallelDem=1);

            parameter Modelica.Units.SI.PressureDifference dpBufHCSto_nominal
              "Nominal pressure difference in buffer storage heating coil";
            final parameter Modelica.Units.SI.PressureDifference dpDHWHCSto_nominal=sum(
                storageDHW.heatingCoil1.pipe.res.dp_nominal)
              "Nominal pressure difference in DHW storage heating coil";
            parameter Modelica.Units.SI.HeatFlowRate QHRAftDHW_flow_nominal
              "Nominal heat flow rate of heating rod after Buffer storage"
              annotation (Dialog(enable=use_heatingRodAfterDHW));
            parameter Modelica.Units.SI.HeatFlowRate QHRAftBuf_flow_nominal
              "Nominal heat flow rate of heating rod after DHW storage"
              annotation (Dialog(enable=use_heatingRodAfterBuffer));
            parameter Boolean use_heatingRodAfterDHW "=false to disable the heating rod after the DHW storage";
            parameter Boolean use_heatingRodAfterBuffer "=false to disable the heating rod after the buffer storage";
            parameter Integer discretizationStepsDWHStoHR=0
              "Number of steps to dicretize. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1";
            parameter Integer discretizationStepsBufStoHR=0
              "Number of steps to dicretize. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1";
            parameter Boolean use_BufStoVL "false to go directly from the three way valve to the building";
            parameter Boolean use_BufStoRL "false to go directly from the building to the three way valve";
            parameter Boolean use_HC1VL;
            parameter Boolean use_HC2VL;
            parameter Boolean use_HC1RL;
            parameter Boolean use_HC2RL;
            replaceable parameter
              BESMod.Systems.RecordsCollection.TemperatureSensors.TemperatureSensorBaseDefinition
              temperatureSensorData
              annotation (choicesAllMatching=true, Placement(transformation(extent={{34,72},
                      {40,78}})));
            replaceable parameter
              BESMod.Systems.RecordsCollection.Valves.ThreeWayValve
              threeWayValveParameters constrainedby
              BESMod.Systems.RecordsCollection.Valves.ThreeWayValve(
              final dp_nominal={dpBufHCSto_nominal, dpDHWHCSto_nominal},
              final m_flow_nominal=mSup_flow_nominal[1],
              final fraK=1,
              use_inputFilter=false) annotation (choicesAllMatching=
                 true, Placement(transformation(extent={{-84,84},{-64,104}})));

            replaceable RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition bufVLParameters(
                dTLoadingHC1=0)
              constrainedby
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition(
              final Q_flow_nominal=Q_flow_nominal[1]*f_design[1],
              final rho=rho,
              final c_p=cp,
              final TAmb=TAmb,
              T_m=TSup_nominal[1],
              final QHC1_flow_nominal=Q_flow_nominal[1]*f_design[1],
              final mHC1_flow_nominal=mSup_flow_nominal[1],
              redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1,
              final use_HC2=use_HC2VL,
              final use_HC1=use_HC1VL,
              final dTLoadingHC2=9999999,
              final fHeiHC2=1,
              final fDiaHC2=1,
              final QHC2_flow_nominal=9999999,
              final mHC2_flow_nominal=9999999,
              redeclare final AixLib.DataBase.Pipes.Copper.Copper_10x0_6 pipeHC2)
              annotation (choicesAllMatching=true, Placement(transformation(extent={{0,48},
                      {14,62}})));

            replaceable
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition dhwParameters
              constrainedby
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition(
                  final rho=rho,
                  final c_p=cp,
                  final TAmb=TAmb,
                  final use_HC1=storageDHW.useHeatingCoil1,
                  final QHC1_flow_nominal=Q_flow_nominal[1]*f_design[1],
                  final V=VDHWDay,
                  final Q_flow_nominal=QDHW_flow_nominal,
                  final VPerQ_flow=0,
                  T_m=TDHW_nominal,
                  final mHC1_flow_nominal=mSup_flow_nominal[1],
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1,
                  final use_HC2=storageDHW.useHeatingCoil2,
                  final dTLoadingHC2=9999999,
                  final fHeiHC2=1,
                  final fDiaHC2=1,
                  final QHC2_flow_nominal=9999999,
                  final mHC2_flow_nominal=9999999,
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_10x0_6 pipeHC2) annotation (
                choicesAllMatching=true, Placement(transformation(extent={{20,-62},{34,-48}})));

            Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperatureBuf(
                final T=bufVLParameters.TAmb) annotation (Placement(transformation(
                  extent={{-12,-12},{12,12}},
                  rotation=0,
                  origin={-82,2})));
            Modelica.Blocks.Sources.RealExpression T_stoDHWTop(final y(unit="K", displayUnit="degC")=storageDHW.layer[
                  dhwParameters.nLayer].T) annotation (Placement(transformation(
                  extent={{-17,-6},{17,6}},
                  rotation=0,
                  origin={-33,70})));
            Modelica.Blocks.Sources.RealExpression T_stoBufTop(final y(
                unit="K",
                displayUnit="degC") = senTemVL.T)
              annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,87})));
            Modelica.Blocks.Sources.RealExpression T_stoBufBot(final y(
                unit="K",
                displayUnit="degC") = senTemRL.T)              annotation (Placement(
                  transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,79})));
            Modelica.Blocks.Sources.RealExpression T_stoDHWBot(final y(unit="K", displayUnit="degC")=storageDHW.layer[1].T)
              annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,95})));

            Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperatureDHW(final T=dhwParameters.TAmb)           annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-72,-88})));

            AixLib.Fluid.Storage.BufferStorage storageBufVL(
              redeclare final package Medium = Medium,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final mSenFac=1,
              redeclare package MediumHC1 = MediumGen,
              redeclare package MediumHC2 = MediumGen,
              final m1_flow_nominal=mSup_flow_nominal[1],
              final m2_flow_nominal=m_flow_nominal[1],
              final mHC1_flow_nominal=bufVLParameters.mHC1_flow_nominal,
              final mHC2_flow_nominal=bufVLParameters.mHC2_flow_nominal,
              useHeatingCoil1=use_HC1VL,
              final useHeatingCoil2=use_HC2VL,
              final useHeatingRod=bufVLParameters.use_hr,
              final TStart=T_start,
              redeclare final RecordsCollection.BufferStorage.bufferData data(
                final hTank=bufVLParameters.h,
                hHC1Low=0,
                hHR=bufVLParameters.nLayerHR/bufVLParameters.nLayer*bufVLParameters.h,
                final dTank=bufVLParameters.d,
                final sWall=bufVLParameters.sIns/2,
                final sIns=bufVLParameters.sIns/2,
                final lambdaWall=bufVLParameters.lambda_ins,
                final lambdaIns=bufVLParameters.lambda_ins,
                final rhoIns=373000,
                final cIns=1000,
                pipeHC1=bufVLParameters.pipeHC1,
                pipeHC2=bufVLParameters.pipeHC2,
                lengthHC1=bufVLParameters.lengthHC1,
                lengthHC2=bufVLParameters.lengthHC2),
              final n=bufVLParameters.nLayer,
              final hConIn=bufVLParameters.hConIn,
              final hConOut=bufVLParameters.hConOut,
              final hConHC1=bufVLParameters.hConHC1,
              final hConHC2=bufVLParameters.hConHC2,
              upToDownHC1=true,
              upToDownHC2=true,
              final TStartWall=T_start,
              final TStartIns=T_start,
              redeclare model HeatTransfer =
                  AixLib.Fluid.Storage.BaseClasses.HeatTransferBuoyancyWetter,
              final allowFlowReversal_layers=allowFlowReversal,
              final allowFlowReversal_HC1=allowFlowReversal,
              final allowFlowReversal_HC2=allowFlowReversal) if use_BufStoVL
              annotation (Placement(transformation(extent={{-34,22},{-6,58}})));

            AixLib.Fluid.Storage.BufferStorage storageDHW(
              redeclare final package Medium = MediumDHW,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final mSenFac=1,
              redeclare final package MediumHC1 = MediumGen,
              redeclare final package MediumHC2 = MediumGen,
              final m1_flow_nominal=mSup_flow_nominal[1],
              final m2_flow_nominal=mDHW_flow_nominal,
              final mHC1_flow_nominal=dhwParameters.mHC1_flow_nominal,
              final mHC2_flow_nominal=dhwParameters.mHC2_flow_nominal,
              final useHeatingCoil1=true,
              final useHeatingCoil2=false,
              final useHeatingRod=dhwParameters.use_hr,
              final TStart=T_start,
              redeclare final RecordsCollection.BufferStorage.bufferData data(
                final hTank=dhwParameters.h,
                hHC1Low=0,
                hHR=dhwParameters.nLayerHR/dhwParameters.nLayer*dhwParameters.h,
                final dTank=dhwParameters.d,
                final sWall=dhwParameters.sIns/2,
                final sIns=dhwParameters.sIns/2,
                final lambdaWall=dhwParameters.lambda_ins,
                final lambdaIns=dhwParameters.lambda_ins,
                final rhoIns=373000,
                final cIns=1000,
                pipeHC1=dhwParameters.pipeHC1,
                pipeHC2=dhwParameters.pipeHC2,
                lengthHC1=dhwParameters.lengthHC1,
                lengthHC2=dhwParameters.lengthHC2),
              final n=dhwParameters.nLayer,
              final hConIn=dhwParameters.hConIn,
              final hConOut=dhwParameters.hConOut,
              final hConHC1=dhwParameters.hConHC1,
              final hConHC2=dhwParameters.hConHC2,
              final upToDownHC1=true,
              final upToDownHC2=true,
              final TStartWall=T_start,
              final TStartIns=T_start,
              redeclare model HeatTransfer =
                  AixLib.Fluid.Storage.BaseClasses.HeatTransferBuoyancyWetter,
              final allowFlowReversal_layers=allowFlowReversal,
              final allowFlowReversal_HC1=allowFlowReversal,
              final allowFlowReversal_HC2=allowFlowReversal)
              annotation (Placement(transformation(extent={{-38,-78},{-2,-32}})));

            BESMod.Components.HeatingRodWithSecurityControl
                                                   hea(
              redeclare package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              final m_flow_nominal=m_flow_nominal[1],
              final m_flow_small=1E-4*abs(m_flow_nominal[1]),
              final show_T=show_T,
              final dp_nominal=heatingRodAftBufParameters.dp_nominal,
              final tau=30,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final T_start=T_start,
              final Q_flow_nominal=QHRAftBuf_flow_nominal,
              final V=heatingRodAftBufParameters.V_hr,
              final eta=heatingRodAftBufParameters.eta_hr) if use_heatingRodAfterBuffer
              annotation (Placement(transformation(
                  extent={{-12,-11},{12,11}},
                  rotation=0,
                  origin={62,87})));
            replaceable Generation.RecordsCollection.HeatingRodBaseDataDefinition heatingRodAftBufParameters
           if use_heatingRodAfterBuffer "Parameters for heating rod after buffer storage"
              annotation (choicesAllMatching=true, Placement(transformation(
                  extent={{-6,-6},{6,6}},
                  rotation=0,
                  origin={98,106})));
            AixLib.Fluid.Interfaces.PassThroughMedium passThroughMediumHRBuf(redeclare
                package Medium = Medium, allowFlowReversal=allowFlowReversal)
              if not use_heatingRodAfterBuffer
              annotation (Placement(transformation(extent={{62,62},{74,74}})));
            replaceable Generation.RecordsCollection.HeatingRodBaseDataDefinition heatingRodAftDHWParameters
           if use_heatingRodAfterDHW "Parameters for heating rod after buffer storage"
              annotation (choicesAllMatching=true, Placement(transformation(
                  extent={{-6,-6},{6,6}},
                  rotation=0,
                  origin={48,-62})));
            AixLib.Fluid.Interfaces.PassThroughMedium passThroughMediumHRDHW(redeclare
                package Medium = MediumDHW, allowFlowReversal=allowFlowReversal) if not
              use_heatingRodAfterDHW
              annotation (Placement(transformation(extent={{52,-44},{64,-32}})));
            BESMod.Components.HeatingRodWithSecurityControl
                                                   heaAftDHW(
              redeclare package Medium = MediumDHW,
              final allowFlowReversal=allowFlowReversal,
              final m_flow_nominal=mDHW_flow_nominal,
              final m_flow_small=1E-4*abs(mDHW_flow_nominal),
              final show_T=show_T,
              final dp_nominal=heatingRodAftDHWParameters.dp_nominal,
              final tau=30,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final T_start=T_start,
              final Q_flow_nominal=QHRAftDHW_flow_nominal,
              final V=heatingRodAftDHWParameters.V_hr,
              final eta=heatingRodAftDHWParameters.eta_hr) if use_heatingRodAfterDHW
              annotation (Placement(transformation(
                  extent={{-12,-11},{12,11}},
                  rotation=0,
                  origin={66,-3})));
            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow QHRStoDHWPre_flow(final
                T_ref=293.15, final alpha=0) if dhwParameters.use_hr annotation (
                Placement(transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={-69,-51})));
            Modelica.Blocks.Math.Gain gain(k=dhwParameters.QHR_flow_nominal)
           if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-102,-60},{-86,-42}})));
            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow QHRStoBufPre_flow1(final
                T_ref=293.15, final alpha=0) if bufVLParameters.use_hr
                                                                     annotation (
                Placement(transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={-47,35})));
            Modelica.Blocks.Math.Gain gainHRBuf(k=bufVLParameters.QHR_flow_nominal)
              if bufVLParameters.use_hr
              annotation (Placement(transformation(extent={{-82,26},{-66,44}})));
            BESMod.Components.DiscretizeContSignal  discretizeHRAftBufSto(final
                discretizationSteps=heatingRodAftBufParameters.discretizationSteps)
           if use_heatingRodAfterBuffer
              annotation (Placement(transformation(extent={{36,88},{44,96}})));
            BESMod.Components.DiscretizeContSignal  discretizeHRAftDHWSto(final
                discretizationSteps=heatingRodAftDHWParameters.discretizationSteps)
           if use_heatingRodAfterDHW
              annotation (Placement(transformation(extent={{36,-2},{44,6}})));
            BESMod.Components.DiscretizeContSignal  discretizeHRInDHWSto(final
                discretizationSteps=dhwParameters.discretizationStepsHR)
              if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-120,-54},{-112,-46}})));
            BESMod.Components.DiscretizeContSignal discretizeHRInBufSto(final
                discretizationSteps=bufVLParameters.discretizationStepsHR)
              if bufVLParameters.use_hr
              annotation (Placement(transformation(extent={{-100,24},{-92,32}})));

            Components.Valves.ThreeWayValveWithFlowReturn threeWayValveWithFlowReturn(
              redeclare package Medium = MediumGen,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final T_start=T_start,
              final X_start=X_start,
              final C_start=C_start,
              final C_nominal=C_nominal,
              final mSenFac=mSenFac,
              redeclare BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve parameters=threeWayValveParameters)
              annotation (Placement(transformation(extent={{-84,54},{-64,74}})));

            Utilities.KPIs.InternalKPICalculator internalKPICalculatorBufLoss(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=false,
              calc_movAve=false,
              calc_intBelThres=false,
              y=fixedTemperatureBuf.port.Q_flow)
              annotation (Placement(transformation(extent={{-52,-134},{-32,-96}})));
            Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWLoss(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=false,
              calc_movAve=false,
              calc_intBelThres=false,
              y=fixedTemperatureDHW.port.Q_flow)
              annotation (Placement(transformation(extent={{-52,-154},{-32,-116}})));
            IBPSA.Fluid.Sensors.TemperatureTwoPort senTBuiSup(
              redeclare final package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=m_flow_nominal[1],
              tau=temperatureSensorData.tau,
              initType=temperatureSensorData.initType,
              T_start=T_start,
              final transferHeat=temperatureSensorData.transferHeat,
              TAmb=temperatureSensorData.TAmb,
              tauHeaTra=temperatureSensorData.tauHeaTra)
              "Temperature at supply for building" annotation (Placement(transformation(
                  extent={{5,6},{-5,-6}},
                  rotation=180,
                  origin={87,80})));

            IBPSA.Fluid.Sensors.TemperatureTwoPort senTBuiSup1(
              redeclare final package Medium = MediumDHW,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=mDHW_flow_nominal,
              tau=temperatureSensorData.tau,
              initType=temperatureSensorData.initType,
              T_start=T_start,
              final transferHeat=temperatureSensorData.transferHeat,
              TAmb=temperatureSensorData.TAmb,
              tauHeaTra=temperatureSensorData.tauHeaTra)
              "Temperature at supply for building" annotation (Placement(transformation(
                  extent={{5,6},{-5,-6}},
                  rotation=180,
                  origin={83,-38})));
            Utilities.Electrical.ZeroLoad zeroLoad
              annotation (Placement(transformation(extent={{30,-108},{50,-88}})));
            AixLib.Fluid.Storage.BufferStorage storageBufRL(
              redeclare final package Medium = Medium,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final mSenFac=1,
              redeclare package MediumHC1 = MediumGen,
              redeclare package MediumHC2 = MediumGen,
              final m1_flow_nominal=mSup_flow_nominal[1],
              final m2_flow_nominal=m_flow_nominal[1],
              final mHC1_flow_nominal=bufRLParameters.mHC1_flow_nominal,
              final mHC2_flow_nominal=bufRLParameters.mHC2_flow_nominal,
              useHeatingCoil1=use_HC1RL,
              final useHeatingCoil2=use_HC2RL,
              final useHeatingRod=bufRLParameters.use_hr,
              final TStart=T_start,
              redeclare final RecordsCollection.BufferStorage.bufferData data(
                final hTank=bufRLParameters.h,
                hHC1Low=0,
                hHR=bufRLParameters.nLayerHR/bufRLParameters.nLayer*bufRLParameters.h,
                final dTank=bufRLParameters.d,
                final sWall=bufRLParameters.sIns/2,
                final sIns=bufRLParameters.sIns/2,
                final lambdaWall=bufRLParameters.lambda_ins,
                final lambdaIns=bufRLParameters.lambda_ins,
                final rhoIns=373000,
                final cIns=1000,
                pipeHC1=bufRLParameters.pipeHC1,
                pipeHC2=bufRLParameters.pipeHC2,
                lengthHC1=bufRLParameters.lengthHC1,
                lengthHC2=bufRLParameters.lengthHC2),
              final n=bufRLParameters.nLayer,
              final hConIn=bufRLParameters.hConIn,
              final hConOut=bufRLParameters.hConOut,
              final hConHC1=bufRLParameters.hConHC1,
              final hConHC2=bufRLParameters.hConHC2,
              upToDownHC1=true,
              upToDownHC2=true,
              final TStartWall=T_start,
              final TStartIns=T_start,
              redeclare model HeatTransfer =
                  AixLib.Fluid.Storage.BaseClasses.HeatTransferBuoyancyWetter,
              final allowFlowReversal_layers=allowFlowReversal,
              final allowFlowReversal_HC1=allowFlowReversal,
              final allowFlowReversal_HC2=allowFlowReversal) if use_BufStoRL
              annotation (Placement(transformation(extent={{28,16},{56,52}})));
            AixLib.Fluid.Interfaces.PassThroughMedium passThroughMediumBufStoVL(
                redeclare package Medium = Medium, allowFlowReversal=allowFlowReversal)
              if not use_BufStoVL
              annotation (Placement(transformation(extent={{-2,14},{6,22}})));
            AixLib.Fluid.Interfaces.PassThroughMedium passThroughMediumBufStoRL(
                redeclare package Medium = Medium, allowFlowReversal=allowFlowReversal)
              if not use_BufStoRL
              annotation (Placement(transformation(extent={{72,24},{84,36}})));
            IBPSA.Fluid.Sensors.TemperatureTwoPort senTemVL(
              redeclare final package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=m_flow_nominal[1],
              tau=temperatureSensorData.tau,
              initType=temperatureSensorData.initType,
              T_start=T_start,
              final transferHeat=true,
              TAmb=temperatureSensorData.TAmb,
              tauHeaTra=temperatureSensorData.tauHeaTra)
              "Temperature on the top of the BufSto/at the exit of the passThrough if no BufSto"
              annotation (Placement(transformation(
                  extent={{4,5},{-4,-5}},
                  rotation=180,
                  origin={30,61})));
            IBPSA.Fluid.Sensors.TemperatureTwoPort senTemRL(
              redeclare final package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=m_flow_nominal[1],
              tau=temperatureSensorData.tau,
              initType=temperatureSensorData.initType,
              T_start=T_start,
              final transferHeat=true,
              TAmb=temperatureSensorData.TAmb,
              tauHeaTra=temperatureSensorData.tauHeaTra)
              "Temperature on the top of the BufSto/at the exit of the passThrough if no BufSto"
              annotation (Placement(transformation(
                  extent={{4,3},{-4,-3}},
                  rotation=180,
                  origin={-26,9})));
            replaceable RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition bufRLParameters
              constrainedby
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition(
              final Q_flow_nominal=Q_flow_nominal[1]*f_design[1],
              final rho=rho,
              final c_p=cp,
              final TAmb=TAmb,
              T_m=TSup_nominal[1],
              final QHC1_flow_nominal=Q_flow_nominal[1]*f_design[1],
              final mHC1_flow_nominal=mSup_flow_nominal[1],
              redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1,
              final use_HC2=use_HC2RL,
              final use_HC1=use_HC1RL,
              final dTLoadingHC2=9999999,
              final fHeiHC2=1,
              final fDiaHC2=1,
              final QHC2_flow_nominal=9999999,
              final mHC2_flow_nominal=9999999,
              redeclare final AixLib.DataBase.Pipes.Copper.Copper_10x0_6 pipeHC2)
              annotation (choicesAllMatching=true, Placement(transformation(extent={{68,42},
                      {82,56}})));
          equation
            connect(T_stoDHWBot.y, sigBusDistr.TStoDHWBotMea) annotation (Line(points={{-16.4,
                    95},{2.5,95},{2.5,101},{0,101}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoDHWTop.y, sigBusDistr.TStoDHWTopMea) annotation (Line(points={{-14.3,
                    70},{-2,70},{-2,101},{0,101}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoBufBot.y, sigBusDistr.TStoBufBotMea) annotation (Line(points={{-16.4,
                    79},{0,79},{0,101}},                      color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoBufTop.y, sigBusDistr.TStoBufTopMea) annotation (Line(points={{-16.4,
                    87},{0,87},{0,101}},                                  color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(fixedTemperatureDHW.port, storageDHW.heatportOutside) annotation (
                Line(points={{-62,-88},{14,-88},{14,-53.62},{-2.45,-53.62}},color={191,0,0}));
            connect(storageBufVL.heatportOutside, fixedTemperatureBuf.port) annotation (
                Line(points={{-6.35,41.08},{-6.35,42},{0,42},{0,2},{-70,2}}, color={191,0,
                    0}));
            connect(portDHW_in, storageDHW.fluidportBottom2) annotation (Line(points={{100,-82},
                    {-12,-82},{-12,-78.23},{-14.825,-78.23}},      color={0,127,255}));
            connect(heaAftDHW.port_a, storageDHW.fluidportTop2) annotation (Line(points={{54,-3},
                    {36,-3},{36,-20},{-14.375,-20},{-14.375,-31.77}},        color={0,127,
                    255},
                pattern=LinePattern.Dash));
            connect(passThroughMediumHRDHW.port_a, storageDHW.fluidportTop2) annotation (
                Line(points={{52,-38},{4,-38},{4,-20},{-14.375,-20},{-14.375,-31.77}},
                  color={0,127,255},
                pattern=LinePattern.Dash));
            connect(storageDHW.heatingRod, QHRStoDHWPre_flow.port) annotation (Line(
                points={{-38,-55},{-50,-55},{-50,-51},{-62,-51}},
                color={191,0,0},
                pattern=LinePattern.Dash));
            connect(QHRStoDHWPre_flow.Q_flow, gain.y) annotation (Line(
                points={{-76,-51},{-85.2,-51}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(QHRStoBufPre_flow1.Q_flow, gainHRBuf.y) annotation (Line(
                points={{-54,35},{-65.2,35}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(QHRStoBufPre_flow1.port, storageBufVL.heatingRod) annotation (Line(
                points={{-40,35},{-34,35},{-34,40}},
                color={191,0,0},
                pattern=LinePattern.Dash));
            connect(discretizeHRAftBufSto.u, sigBusDistr.uHRAftBuf) annotation (Line(
                  points={{35.2,92},{0,92},{0,101}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(discretizeHRAftBufSto.y, hea.u) annotation (Line(points={{44.4,92},{
                    47.6,92},{47.6,93.6}},
                                      color={0,0,127}));
            connect(heaAftDHW.u, discretizeHRAftDHWSto.y) annotation (Line(points={{51.6,3.6},
                    {51.6,2},{44.4,2}},        color={0,0,127}));
            connect(discretizeHRAftDHWSto.u, sigBusDistr.uHRAftDHW) annotation (Line(
                  points={{35.2,2},{16,2},{16,72},{0,72},{0,101}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(discretizeHRInBufSto.u, sigBusDistr.uHRStoBuf) annotation (Line(
                  points={{-100.8,28},{-116,28},{-116,101},{0,101}}, color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(discretizeHRInBufSto.y, gainHRBuf.u) annotation (Line(points={{-91.6,28},
                    {-88,28},{-88,35},{-83.6,35}}, color={0,0,127}));
            connect(discretizeHRInDHWSto.u, sigBusDistr.uHRStoDHW) annotation (Line(
                  points={{-120.8,-50},{-126,-50},{-126,101},{0,101}}, color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(gain.u, discretizeHRInDHWSto.y) annotation (Line(points={{-103.6,-51},
                    {-108,-51},{-108,-50},{-111.6,-50}}, color={0,0,127}));
            connect(portGen_in[1], threeWayValveWithFlowReturn.portGen_a) annotation (
                Line(points={{-100,80},{-92,80},{-92,68.4},{-84,68.4}}, color={0,127,255}));
            connect(portGen_out[1], threeWayValveWithFlowReturn.portGen_b) annotation (
                Line(points={{-100,40},{-96,40},{-96,38},{-92,38},{-92,60},{-84,60},{-84,60.4}},
                  color={0,127,255}));
            connect(threeWayValveWithFlowReturn.portDHW_b, storageDHW.portHC1In)
              annotation (Line(points={{-64,60.4},{-60,60.4},{-60,60},{-46,60},{-46,-41.89},
                    {-38.45,-41.89}}, color={0,127,255}));
            connect(storageDHW.portHC1Out, threeWayValveWithFlowReturn.portDHW_a)
              annotation (Line(points={{-38.225,-49.02},{-52,-49.02},{-52,56.4},{-64,56.4}},
                  color={0,127,255}));
            connect(threeWayValveWithFlowReturn.uBuf, sigBusDistr.uThrWayVal) annotation (
               Line(points={{-74,76},{-74,101},{0,101}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            connect(internalKPICalculatorBufLoss.KPIBus, outBusDist.QBufLoss) annotation (
               Line(
                points={{-31.8,-115},{0,-115},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(internalKPICalculatorDHWLoss.KPIBus, outBusDist.QDHWLoss) annotation (
               Line(
                points={{-31.8,-135},{-16,-135},{-16,-136},{0,-136},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(senTBuiSup.port_a, hea.port_b)
              annotation (Line(points={{82,80},{74,80},{74,87}}, color={0,127,255}));
            connect(senTBuiSup.port_b, portBui_out[1]) annotation (Line(points={{92,80},{
                    100,80}},               color={0,127,255}));
            connect(heaAftDHW.port_b, senTBuiSup1.port_a) annotation (Line(points={{78,-3},
                    {78,4},{80,4},{80,-26},{70,-26},{70,-38},{78,-38}},
                                              color={0,127,255}));
            connect(portDHW_out, senTBuiSup1.port_b) annotation (Line(points={{100,-22},
                    {86,-22},{86,-8},{114,-8},{114,-38},{88,-38}},
                                           color={0,127,255}));
            connect(senTBuiSup.T, sigBusDistr.TBuiSupMea) annotation (Line(points={{87,
                    86.6},{86,86.6},{86,102},{28,102},{28,76},{0,76},{0,101}}, color={0,0,
                    127}), Text(
                string="%second",
                index=1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            connect(passThroughMediumHRBuf.port_b, senTBuiSup.port_a)
              annotation (Line(points={{74,68},{82,68},{82,80}}, color={0,127,255}));
            connect(passThroughMediumHRDHW.port_b, senTBuiSup1.port_a)
              annotation (Line(points={{64,-38},{78,-38}}, color={0,127,255}));
            connect(senTBuiSup1.T, sigBusDistr.TDHWSupMea) annotation (Line(points={{83,-31.4},
                    {78,-31.4},{78,-22},{18,-22},{18,74},{0,74},{0,101}},
                                                                color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
                Line(
                points={{50,-98},{70,-98}},
                color={0,0,0},
                thickness=1));
            connect(threeWayValveWithFlowReturn.portBui_b, storageBufVL.fluidportBottom2)
              annotation (Line(points={{-64,72},{-40,72},{-40,18},{-15.975,18},{-15.975,
                    21.82}},
                  color={0,127,255}));
            connect(portBui_in[1], storageBufRL.fluidportTop1) annotation (Line(points={{100,40},
                    {37.1,40},{37.1,52.18}},     color={0,127,255}));
            connect(threeWayValveWithFlowReturn.portBui_b, passThroughMediumBufStoVL.port_a)
              annotation (Line(points={{-64,72},{-40,72},{-40,18},{-2,18}}, color={0,127,255}));
            connect(portBui_in[1], passThroughMediumBufStoRL.port_a) annotation (Line(
                  points={{100,40},{64,40},{64,30},{72,30}}, color={0,127,255}));
            connect(storageBufRL.heatportOutside, fixedTemperatureBuf.port) annotation (
                Line(points={{55.65,35.08},{55.65,36},{62,36},{62,12},{34,12},{34,2},{-70,
                    2}}, color={191,0,0}));
            connect(passThroughMediumBufStoVL.port_b, senTemVL.port_a) annotation (Line(
                  points={{6,18},{20,18},{20,61},{26,61}}, color={0,127,255}));
            connect(storageBufVL.fluidportTop2, senTemVL.port_a) annotation (Line(points=
                    {{-15.625,58.18},{-15.625,62},{-4,62},{-4,66},{20,66},{20,61},{26,61}},
                  color={0,127,255}));
            connect(senTemVL.port_b, passThroughMediumHRBuf.port_a) annotation (Line(
                  points={{34,61},{34,60},{56,60},{56,68},{62,68}}, color={0,127,255}));
            connect(senTemVL.port_b, hea.port_a) annotation (Line(points={{34,61},{34,60},
                    {50,60},{50,87}}, color={0,127,255}));
            connect(storageBufRL.fluidportBottom1, senTemRL.port_a) annotation (Line(
                  points={{37.275,15.64},{12,15.64},{12,0},{-30,0},{-30,9}}, color={0,127,
                    255}));
            connect(passThroughMediumBufStoRL.port_b, senTemRL.port_a) annotation (Line(
                  points={{84,30},{84,12},{54,12},{54,10},{34,10},{34,14},{12,14},{12,0},
                    {-30,0},{-30,9}}, color={0,127,255}));
            connect(senTemRL.port_b, threeWayValveWithFlowReturn.portBui_a) annotation (
                Line(points={{-22,9},{-22,8},{-18,8},{-18,14},{-30,14},{-30,16},{-58,16},
                    {-58,68},{-64,68}}, color={0,127,255}));

          end PartialDistributionBWP1and2;

          partial model PartialDistribution_TwoEntrances
            "Partial distribution model for HPS"
            extends BESMod.Utilities.Icons.StorageIcon;
            extends
              BESMod.HugosProject.Systems.BaseClasses.PartialFluidSubsystemWithParameters(
                final dp_nominal=dpDem_nominal, TSup_nominal=TDem_nominal .+
                  dTLoss_nominal .+ dTTra_nominal);
            extends PartialDHWParameters;
            replaceable package MediumDHW =
                Modelica.Media.Interfaces.PartialMedium
              annotation (choicesAllMatching=true);

            replaceable package MediumGen =
                Modelica.Media.Interfaces.PartialMedium
              annotation (choicesAllMatching=true);
            parameter Modelica.Units.SI.MassFlowRate mSup_flow_nominal[nParallelSup]
              "Nominal mass flow rate of system supplying the distribution" annotation (
                Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.MassFlowRate mDem_flow_nominal[nParallelDem]
              "Nominal mass flow rate of demand system of the distribution" annotation (
                Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.TemperatureDifference dTTraDHW_nominal
              "Nominal temperature difference to transfer heat to the DHW storage"
              annotation (Dialog(group="DHW Demand"));
            parameter Modelica.Units.SI.PressureDifference dpSup_nominal[nParallelSup]
              "Nominal pressure loss of resistances connected to the supply system of the distribution"
              annotation (Dialog(group=
                    "Design - Bottom Up: Parameters are defined by the subsystem"));
            parameter Modelica.Units.SI.PressureDifference dpDem_nominal[nParallelDem]
              "Nominal pressure loss of resistances connected to the demand system of the distribution"
              annotation (Dialog(group=
                    "Design - Bottom Up: Parameters are defined by the subsystem"));

            Modelica.Fluid.Interfaces.FluidPort_a portGenHeating_in[
              nParallelSup](redeclare final package Medium = MediumGen)
              "Inlet from the generation for heating" annotation (Placement(
                  transformation(extent={{-110,70},{-90,90}}),
                  iconTransformation(extent={{-110,70},{-90,90}})));
            Modelica.Fluid.Interfaces.FluidPort_b portGenHeating_out[
              nParallelSup](redeclare final package Medium = MediumGen)
              "Outlet to the generation for heating" annotation (Placement(
                  transformation(extent={{-110,30},{-90,50}}),
                  iconTransformation(extent={{-110,30},{-90,50}})));
            Modelica.Fluid.Interfaces.FluidPort_b portBui_out[nParallelDem](redeclare
                final package Medium =
                         Medium) "Outlet for the distribution to the building"
              annotation (Placement(transformation(extent={{90,70},{110,90}}),
                  iconTransformation(extent={{90,70},{110,90}})));
            Modelica.Fluid.Interfaces.FluidPort_a portBui_in[nParallelDem](redeclare
                final package Medium =
                         Medium) "Inlet for the distribution from the building"
              annotation (Placement(transformation(extent={{90,30},{110,50}}),
                  iconTransformation(extent={{90,30},{110,50}})));

            Modelica.Fluid.Interfaces.FluidPort_b portDHW_out(redeclare final
                package Medium =
                         MediumDHW) "Outlet for the distribution to the DHW" annotation (
                Placement(transformation(extent={{90,-32},{110,-12}}), iconTransformation(
                    extent={{90,-30},{110,-10}})));
            Modelica.Fluid.Interfaces.FluidPort_a portDHW_in(redeclare final
                package Medium =
                         MediumDHW) "Inet for the distribution from the DHW" annotation (
                Placement(transformation(extent={{90,-92},{110,-72}}), iconTransformation(
                    extent={{90,-70},{110,-50}})));

            BESMod.HugosProject.Systems.Hydraulical.Interfaces.DistributionControlBus
              sigBusDistr annotation (Placement(transformation(extent={{-24,80},
                      {24,122}})));
            BESMod.HugosProject.Systems.Hydraulical.Interfaces.DistributionOutputs
              outBusDist annotation (Placement(transformation(extent={{-10,-110},
                      {10,-90}})));
            Electrical.Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{60,-108},{80,-88}})));
            Modelica.Fluid.Interfaces.FluidPort_a portGenDHW_in[nParallelSup](
                redeclare final package Medium = MediumGen)
              "Inlet from the generation for DHW" annotation (Placement(
                  transformation(extent={{-110,-30},{-90,-10}}),
                  iconTransformation(extent={{-110,70},{-90,90}})));
            Modelica.Fluid.Interfaces.FluidPort_b portGenDHW_out[nParallelSup](
                redeclare final package Medium = MediumGen)
              "Outlet to the generation for DHW" annotation (Placement(
                  transformation(extent={{-110,-90},{-90,-70}}),
                  iconTransformation(extent={{-110,30},{-90,50}})));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialDistribution_TwoEntrances;

          partial model PartialDistribution_TwoEntrances_NoStorage
            "Partial model to later extent"
            extends PartialDistribution_TwoEntrances(
              final dpDem_nominal={0},
              final dpSup_nominal={2*(threeWayValveParameters.dpValve_nominal + max(
                  threeWayValveParameters.dp_nominal))},
              final dTTraDHW_nominal=dhwParameters.dTLoadingHC1,
              final dTTra_nominal={bufParameters.dTLoadingHC1},
              final m_flow_nominal=mDem_flow_nominal,
              final TSup_nominal=TDem_nominal .+ dTLoss_nominal .+ dTTra_nominal,
              final nParallelSup=1,
              final nParallelDem=1);

            parameter Modelica.Units.SI.PressureDifference dpBufHCSto_nominal
              "Nominal pressure difference in buffer storage heating coil";
            final parameter Modelica.Units.SI.PressureDifference dpDHWHCSto_nominal=sum(
                storageDHW.heatingCoil1.pipe.res.dp_nominal)
              "Nominal pressure difference in DHW storage heating coil";
            parameter Modelica.Units.SI.HeatFlowRate QHRAftBuf_flow_nominal
              "Nominal heat flow rate of heating rod after DHW storage"
              annotation (Dialog(enable=use_heatingRodAfterBuffer));
            parameter Boolean use_heatingRodAfterBuffer "=false to disable the heating rod after the buffer storage";
            parameter Integer discretizationStepsDWHStoHR=0
              "Number of steps to dicretize. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1";
            parameter Integer discretizationStepsBufStoHR=0
              "Number of steps to dicretize. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1";

            replaceable
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition dhwParameters
              constrainedby
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition(
                  final rho=rho,
                  final c_p=cp,
                  final TAmb=TAmb,
                  final use_HC1=storageDHW.useHeatingCoil1,
                  final QHC1_flow_nominal=Q_flow_nominal[1]*f_design[1],
                  final V=VDHWDay,
                  final Q_flow_nominal=QDHW_flow_nominal,
                  final VPerQ_flow=0,
                  T_m=TDHW_nominal,
                  final mHC1_flow_nominal=mSup_flow_nominal[1],
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1,
                  final use_HC2=storageDHW.useHeatingCoil2,
                  final dTLoadingHC2=9999999,
                  final fHeiHC2=1,
                  final fDiaHC2=1,
                  final QHC2_flow_nominal=9999999,
                  final mHC2_flow_nominal=9999999,
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_10x0_6 pipeHC2) annotation (
                choicesAllMatching=true, Placement(transformation(extent={{20,-62},{34,-48}})));

            Modelica.Blocks.Sources.RealExpression T_stoDHWTop(final y(unit="K", displayUnit="degC")=storageDHW.layer[
                  dhwParameters.nLayer].T) annotation (Placement(transformation(
                  extent={{-17,-6},{17,6}},
                  rotation=0,
                  origin={-33,70})));
            Modelica.Blocks.Sources.RealExpression T_stoBufTop(final y(
                unit="K",
                displayUnit="degC") = senTBuiTop.T)
                                           annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,87})));
            Modelica.Blocks.Sources.RealExpression T_stoBufBot(final y(
                unit="K",
                displayUnit="degC") = senTBuiTop.T)
              annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,79})));
            Modelica.Blocks.Sources.RealExpression T_stoDHWBot(final y(unit="K", displayUnit="degC")=storageDHW.layer[1].T)
              annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,95})));

            Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperatureDHW(final T=dhwParameters.TAmb)           annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-72,-88})));

            AixLib.Fluid.Storage.BufferStorage storageDHW(
              redeclare final package Medium = MediumDHW,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final mSenFac=1,
              redeclare final package MediumHC1 = MediumGen,
              redeclare final package MediumHC2 = MediumGen,
              final m1_flow_nominal=mSup_flow_nominal[1],
              final m2_flow_nominal=mDHW_flow_nominal,
              final mHC1_flow_nominal=dhwParameters.mHC1_flow_nominal,
              final mHC2_flow_nominal=dhwParameters.mHC2_flow_nominal,
              final useHeatingCoil1=true,
              final useHeatingCoil2=false,
              final useHeatingRod=dhwParameters.use_hr,
              final TStart=T_start,
              redeclare final RecordsCollection.BufferStorage.bufferData data(
                final hTank=dhwParameters.h,
                hHC1Low=0,
                hHR=dhwParameters.nLayerHR/dhwParameters.nLayer*dhwParameters.h,
                final dTank=dhwParameters.d,
                final sWall=dhwParameters.sIns/2,
                final sIns=dhwParameters.sIns/2,
                final lambdaWall=dhwParameters.lambda_ins,
                final lambdaIns=dhwParameters.lambda_ins,
                final rhoIns=373000,
                final cIns=1000,
                pipeHC1=dhwParameters.pipeHC1,
                pipeHC2=dhwParameters.pipeHC2,
                lengthHC1=dhwParameters.lengthHC1,
                lengthHC2=dhwParameters.lengthHC2),
              final n=dhwParameters.nLayer,
              final hConIn=dhwParameters.hConIn,
              final hConOut=dhwParameters.hConOut,
              final hConHC1=dhwParameters.hConHC1,
              final hConHC2=dhwParameters.hConHC2,
              final upToDownHC1=true,
              final upToDownHC2=true,
              final TStartWall=T_start,
              final TStartIns=T_start,
              redeclare model HeatTransfer =
                  AixLib.Fluid.Storage.BaseClasses.HeatTransferBuoyancyWetter,
              final allowFlowReversal_layers=allowFlowReversal,
              final allowFlowReversal_HC1=allowFlowReversal,
              final allowFlowReversal_HC2=allowFlowReversal)
              annotation (Placement(transformation(extent={{-36,-74},{0,-28}})));

            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow QHRStoDHWPre_flow(final
                T_ref=293.15, final alpha=0) if dhwParameters.use_hr annotation (
                Placement(transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={-69,-51})));
            Modelica.Blocks.Math.Gain gain(k=dhwParameters.QHR_flow_nominal)
           if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-102,-60},{-86,-42}})));
            BESMod.Components.DiscretizeContSignal  discretizeHRInDHWSto(final
                discretizationSteps=dhwParameters.discretizationStepsHR)
              if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-120,-54},{-112,-46}})));

            Utilities.KPIs.InternalKPICalculator internalKPICalculatorBufLoss(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=false,
              calc_movAve=false,
              calc_intBelThres=false,
              y=fixedTemperatureBuf.port.Q_flow)
              annotation (Placement(transformation(extent={{-52,-134},{-32,-96}})));
            Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWLoss(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=false,
              calc_movAve=false,
              calc_intBelThres=false,
              y=fixedTemperatureDHW.port.Q_flow)
              annotation (Placement(transformation(extent={{-52,-154},{-32,-116}})));

            Utilities.Electrical.ZeroLoad zeroLoad
              annotation (Placement(transformation(extent={{30,-108},{50,-88}})));
            Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWHR(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=true,
              calc_movAve=false,
              calc_intBelThres=false,
              y=QHRStoDHWPre_flow.Q_flow) if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-84,-134},{-64,-96}})));
            Utilities.KPIs.InputKPICalculator inputKPICalculator(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=true,
              calc_movAve=false,
              calc_intBelThres=false) if use_heatingRodAfterBuffer
              annotation (Placement(transformation(extent={{-84,-156},{-64,-118}})));
            Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWHR1(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=true,
              calc_movAve=false,
              calc_intBelThres=false,
              y=QHRStoBufPre_flow1.Q_flow) if bufParameters.use_hr
              annotation (Placement(transformation(extent={{-108,-134},{-88,-96}})));
            IBPSA.Fluid.Sensors.TemperatureTwoPort senTBuiTop(
              redeclare final package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=m_flow_nominal[1],
              tau=temperatureSensorData.tau,
              initType=temperatureSensorData.initType,
              T_start=T_start,
              final transferHeat=temperatureSensorData.transferHeat,
              TAmb=temperatureSensorData.TAmb,
              tauHeaTra=temperatureSensorData.tauHeaTra)
              "Temperature at supply for building" annotation (Placement(transformation(
                  extent={{5,6},{-5,-6}},
                  rotation=180,
                  origin={65,78})));
            IBPSA.Fluid.Sensors.TemperatureTwoPort senTBuiBot(
              redeclare final package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=m_flow_nominal[1],
              tau=temperatureSensorData.tau,
              initType=temperatureSensorData.initType,
              T_start=T_start,
              final transferHeat=temperatureSensorData.transferHeat,
              TAmb=temperatureSensorData.TAmb,
              tauHeaTra=temperatureSensorData.tauHeaTra)
              "Temperature at supply for building" annotation (Placement(
                  transformation(
                  extent={{5,6},{-5,-6}},
                  rotation=180,
                  origin={69,42})));
            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.TemperatureSensorBaseDefinition
              temperatureSensorData annotation (choicesAllMatching=true,
                Placement(transformation(extent={{44,52},{50,58}})));
          equation
            connect(T_stoDHWBot.y, sigBusDistr.TStoDHWBotMea) annotation (Line(points={{-16.4,
                    95},{2.5,95},{2.5,101},{0,101}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoDHWTop.y, sigBusDistr.TStoDHWTopMea) annotation (Line(points={{-14.3,
                    70},{-2,70},{-2,101},{0,101}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoBufBot.y, sigBusDistr.TStoBufBotMea) annotation (Line(points={{-16.4,
                    79},{0,79},{0,101}},                      color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoBufTop.y, sigBusDistr.TStoBufTopMea) annotation (Line(points={{-16.4,
                    87},{0,87},{0,101}},                                  color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(fixedTemperatureDHW.port, storageDHW.heatportOutside) annotation (
                Line(points={{-62,-88},{14,-88},{14,-49.62},{-0.45,-49.62}},color={191,0,0}));
            connect(portDHW_in, storageDHW.fluidportBottom2) annotation (Line(points={{100,
                    -82},{-12,-82},{-12,-74.23},{-12.825,-74.23}}, color={0,127,255}));
            connect(storageDHW.heatingRod, QHRStoDHWPre_flow.port) annotation (Line(
                points={{-36,-51},{-62,-51}},
                color={191,0,0},
                pattern=LinePattern.Dash));
            connect(QHRStoDHWPre_flow.Q_flow, gain.y) annotation (Line(
                points={{-76,-51},{-85.2,-51}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(discretizeHRInDHWSto.u, sigBusDistr.uHRStoDHW) annotation (Line(
                  points={{-120.8,-50},{-126,-50},{-126,101},{0,101}}, color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(gain.u, discretizeHRInDHWSto.y) annotation (Line(points={{-103.6,-51},
                    {-108,-51},{-108,-50},{-111.6,-50}}, color={0,0,127}));
            connect(internalKPICalculatorBufLoss.KPIBus, outBusDist.QBufLoss) annotation (
               Line(
                points={{-31.8,-115},{0,-115},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(internalKPICalculatorDHWLoss.KPIBus, outBusDist.QDHWLoss) annotation (
               Line(
                points={{-31.8,-135},{-16,-135},{-16,-136},{0,-136},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
                Line(
                points={{50,-98},{70,-98}},
                color={0,0,0},
                thickness=1));
            connect(storageDHW.fluidportTop2, portDHW_out) annotation (Line(points={{-12.375,
                    -27.77},{-12.375,-20},{100,-20},{100,-22}}, color={0,127,255}));
            connect(internalKPICalculatorDHWHR.KPIBus, outBusDist.WelHRDHW) annotation (
                Line(
                points={{-63.8,-115},{0,-115},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(inputKPICalculator.KPIBus, outBusDist.WelHRAftBuf) annotation (Line(
                points={{-63.8,-137},{0,-137},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(internalKPICalculatorDHWHR1.KPIBus, outBusDist.WelHRBufSto)
              annotation (Line(
                points={{-87.8,-115},{-43.9,-115},{-43.9,-100},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(portGenDHW_in[1], storageDHW.portHC1In) annotation (Line(
                  points={{-100,-20},{-44,-20},{-44,-37.89},{-36.45,-37.89}},
                  color={0,127,255}));
            connect(portGenDHW_out[1], storageDHW.portHC1Out) annotation (Line(
                  points={{-100,-80},{-86,-80},{-86,-64},{-50,-64},{-50,-45.02},
                    {-36.225,-45.02}}, color={0,127,255}));
            connect(portGenHeating_out[1], senTBuiBot.port_a) annotation (Line(
                  points={{-100,40},{-98,40},{-98,42},{64,42}}, color={0,127,
                    255}));
            connect(senTBuiBot.port_b, portBui_in[1]) annotation (Line(points={
                    {74,42},{86,42},{86,40},{100,40}}, color={0,127,255}));
            connect(portGenHeating_in[1], senTBuiTop.port_a) annotation (Line(
                  points={{-100,80},{-54,80},{-54,60},{40,60},{40,78},{60,78}},
                  color={0,127,255}));
            connect(senTBuiTop.port_b, portBui_out[1]) annotation (Line(points=
                    {{70,78},{86,78},{86,80},{100,80}}, color={0,127,255}));
          end PartialDistribution_TwoEntrances_NoStorage;

          partial model PartialDistributionNoStorageForHeating
            "Partial model to later extent"
            extends BaseClasses.PartialDistribution(
              final dpDem_nominal={0},
              final dpSup_nominal={2*(threeWayValveParameters.dpValve_nominal + max(
                  threeWayValveParameters.dp_nominal))},
              final dTTraDHW_nominal=dhwParameters.dTLoadingHC1,
              final dTTra_nominal={bufParameters.dTLoadingHC1},
              final m_flow_nominal=mDem_flow_nominal,
              final TSup_nominal=TDem_nominal .+ dTLoss_nominal .+ dTTra_nominal,
              final nParallelSup=1,
              final nParallelDem=1);

            parameter Modelica.Units.SI.PressureDifference dpBufHCSto_nominal
              "Nominal pressure difference in buffer storage heating coil";
            final parameter Modelica.Units.SI.PressureDifference dpDHWHCSto_nominal=sum(
                storageDHW.heatingCoil1.pipe.res.dp_nominal)
              "Nominal pressure difference in DHW storage heating coil";
            parameter Modelica.Units.SI.HeatFlowRate QHRAftBuf_flow_nominal
              "Nominal heat flow rate of heating rod after DHW storage"
              annotation (Dialog(enable=use_heatingRodAfterBuffer));
            parameter Boolean use_heatingRodAfterBuffer "=false to disable the heating rod after the buffer storage";
            parameter Integer discretizationStepsDWHStoHR=0
              "Number of steps to dicretize. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1";
            parameter Integer discretizationStepsBufStoHR=0
              "Number of steps to dicretize. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1";
            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.TemperatureSensorBaseDefinition
              temperatureSensorData annotation (choicesAllMatching=true,
                Placement(transformation(extent={{78,58},{84,64}})));
            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.Valves.ThreeWayValve
              threeWayValveParameters constrainedby
              BESMod.HugosProject.Systems.RecordsCollection.Valves.ThreeWayValve(
              final dp_nominal={dpBufHCSto_nominal,dpDHWHCSto_nominal},
              final m_flow_nominal=mSup_flow_nominal[1],
              final fraK=1,
              use_inputFilter=false) annotation (choicesAllMatching=true,
                Placement(transformation(extent={{-84,84},{-64,104}})));

            replaceable
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition dhwParameters
              constrainedby
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition(
                  final rho=rho,
                  final c_p=cp,
                  final TAmb=TAmb,
                  final use_HC1=storageDHW.useHeatingCoil1,
                  final QHC1_flow_nominal=Q_flow_nominal[1]*f_design[1],
                  final V=VDHWDay,
                  final Q_flow_nominal=QDHW_flow_nominal,
                  final VPerQ_flow=0,
                  T_m=TDHW_nominal,
                  final mHC1_flow_nominal=mSup_flow_nominal[1],
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1,
                  final use_HC2=storageDHW.useHeatingCoil2,
                  final dTLoadingHC2=9999999,
                  final fHeiHC2=1,
                  final fDiaHC2=1,
                  final QHC2_flow_nominal=9999999,
                  final mHC2_flow_nominal=9999999,
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_10x0_6 pipeHC2) annotation (
                choicesAllMatching=true, Placement(transformation(extent={{20,-62},{34,-48}})));

            Modelica.Blocks.Sources.RealExpression T_stoDHWTop(final y(unit="K", displayUnit="degC")=storageDHW.layer[
                  dhwParameters.nLayer].T) annotation (Placement(transformation(
                  extent={{-17,-6},{17,6}},
                  rotation=0,
                  origin={-33,70})));
            Modelica.Blocks.Sources.RealExpression T_stoBufTop(final y(
                unit="K",
                displayUnit="degC") = senTBuiVL.T)
                                           annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,87})));
            Modelica.Blocks.Sources.RealExpression T_stoBufBot(final y(
                unit="K",
                displayUnit="degC") = senTBuiRL.T)
              annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,79})));
            Modelica.Blocks.Sources.RealExpression T_stoDHWBot(final y(unit="K", displayUnit="degC")=storageDHW.layer[1].T)
              annotation (Placement(transformation(
                  extent={{-16,-5},{16,5}},
                  rotation=0,
                  origin={-34,95})));

            Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperatureDHW(final T=dhwParameters.TAmb)           annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-72,-88})));

            AixLib.Fluid.Storage.BufferStorage storageDHW(
              redeclare final package Medium = MediumDHW,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final mSenFac=1,
              redeclare final package MediumHC1 = MediumGen,
              redeclare final package MediumHC2 = MediumGen,
              final m1_flow_nominal=mSup_flow_nominal[1],
              final m2_flow_nominal=mDHW_flow_nominal,
              final mHC1_flow_nominal=dhwParameters.mHC1_flow_nominal,
              final mHC2_flow_nominal=dhwParameters.mHC2_flow_nominal,
              final useHeatingCoil1=true,
              final useHeatingCoil2=false,
              final useHeatingRod=dhwParameters.use_hr,
              final TStart=T_start,
              redeclare final RecordsCollection.BufferStorage.bufferData data(
                final hTank=dhwParameters.h,
                hHC1Low=0,
                hHR=dhwParameters.nLayerHR/dhwParameters.nLayer*dhwParameters.h,
                final dTank=dhwParameters.d,
                final sWall=dhwParameters.sIns/2,
                final sIns=dhwParameters.sIns/2,
                final lambdaWall=dhwParameters.lambda_ins,
                final lambdaIns=dhwParameters.lambda_ins,
                final rhoIns=373000,
                final cIns=1000,
                pipeHC1=dhwParameters.pipeHC1,
                pipeHC2=dhwParameters.pipeHC2,
                lengthHC1=dhwParameters.lengthHC1,
                lengthHC2=dhwParameters.lengthHC2),
              final n=dhwParameters.nLayer,
              final hConIn=dhwParameters.hConIn,
              final hConOut=dhwParameters.hConOut,
              final hConHC1=dhwParameters.hConHC1,
              final hConHC2=dhwParameters.hConHC2,
              final upToDownHC1=true,
              final upToDownHC2=true,
              final TStartWall=T_start,
              final TStartIns=T_start,
              redeclare model HeatTransfer =
                  AixLib.Fluid.Storage.BaseClasses.HeatTransferBuoyancyWetter,
              final allowFlowReversal_layers=allowFlowReversal,
              final allowFlowReversal_HC1=allowFlowReversal,
              final allowFlowReversal_HC2=allowFlowReversal)
              annotation (Placement(transformation(extent={{-36,-74},{0,-28}})));

            Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow QHRStoDHWPre_flow(final
                T_ref=293.15, final alpha=0) if dhwParameters.use_hr annotation (
                Placement(transformation(
                  extent={{-7,-7},{7,7}},
                  rotation=0,
                  origin={-69,-51})));
            Modelica.Blocks.Math.Gain gain(k=dhwParameters.QHR_flow_nominal)
           if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-102,-60},{-86,-42}})));
            BESMod.Components.DiscretizeContSignal  discretizeHRInDHWSto(final
                discretizationSteps=dhwParameters.discretizationStepsHR)
              if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-120,-54},{-112,-46}})));

            Components.Valves.ThreeWayValveWithFlowReturn threeWayValveWithFlowReturn(
              redeclare package Medium = MediumGen,
              final energyDynamics=energyDynamics,
              final p_start=p_start,
              final T_start=T_start,
              final X_start=X_start,
              final C_start=C_start,
              final C_nominal=C_nominal,
              final mSenFac=mSenFac,
              redeclare BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                                                                                     parameters=threeWayValveParameters)
              annotation (Placement(transformation(extent={{-84,54},{-64,74}})));

            Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWLoss(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=false,
              calc_movAve=false,
              calc_intBelThres=false,
              y=fixedTemperatureDHW.port.Q_flow)
              annotation (Placement(transformation(extent={{-52,-154},{-32,-116}})));

            Utilities.Electrical.ZeroLoad zeroLoad
              annotation (Placement(transformation(extent={{30,-108},{50,-88}})));
            Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWHR(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=true,
              calc_movAve=false,
              calc_intBelThres=false,
              y=QHRStoDHWPre_flow.Q_flow) if dhwParameters.use_hr
              annotation (Placement(transformation(extent={{-84,-134},{-64,-96}})));
            Utilities.KPIs.InputKPICalculator inputKPICalculator(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=true,
              calc_movAve=false,
              calc_intBelThres=false) if use_heatingRodAfterBuffer
              annotation (Placement(transformation(extent={{-84,-156},{-64,-118}})));
            Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWHR1(
              unit="W",
              integralUnit="J",
              thresholdOn=Modelica.Constants.eps,
              calc_singleOnTime=false,
              calc_integral=true,
              calc_totalOnTime=false,
              calc_numSwi=true,
              calc_movAve=false,
              calc_intBelThres=false,
              y=QHRStoBufPre_flow1.Q_flow) if bufParameters.use_hr
              annotation (Placement(transformation(extent={{-108,-134},{-88,-96}})));
            IBPSA.Fluid.Sensors.TemperatureTwoPort senTBuiRL(
              redeclare final package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=m_flow_nominal[1],
              tau=temperatureSensorData.tau,
              initType=temperatureSensorData.initType,
              T_start=T_start,
              final transferHeat=temperatureSensorData.transferHeat,
              TAmb=temperatureSensorData.TAmb,
              tauHeaTra=temperatureSensorData.tauHeaTra)
              "Temperature at supply for building" annotation (Placement(
                  transformation(
                  extent={{5,6},{-5,-6}},
                  rotation=180,
                  origin={57,44})));
            IBPSA.Fluid.Sensors.TemperatureTwoPort senTBuiVL(
              redeclare final package Medium = Medium,
              final allowFlowReversal=allowFlowReversal,
              m_flow_nominal=m_flow_nominal[1],
              tau=temperatureSensorData.tau,
              initType=temperatureSensorData.initType,
              T_start=T_start,
              final transferHeat=temperatureSensorData.transferHeat,
              TAmb=temperatureSensorData.TAmb,
              tauHeaTra=temperatureSensorData.tauHeaTra)
              "Temperature at supply for building" annotation (Placement(
                  transformation(
                  extent={{5,6},{-5,-6}},
                  rotation=180,
                  origin={57,78})));
           replaceable
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition bufParameters(
              final use_HC1=false,
              dTLoadingHC1=0,
              final use_HC2=false)
              constrainedby
              RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition(
                  final Q_flow_nominal=Q_flow_nominal[1]*f_design[1],
                  final rho=rho,
                  final c_p=cp,
                  final TAmb=TAmb,
                  T_m=TSup_nominal[1],
                  final QHC1_flow_nominal=Q_flow_nominal[1]*f_design[1],
                  final mHC1_flow_nominal=mSup_flow_nominal[1],
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1,
                  final use_HC2=false,
                  final use_HC1=false,
                  final dTLoadingHC2=9999999,
                  final fHeiHC2=1,
                  final fDiaHC2=1,
                  final QHC2_flow_nominal=9999999,
                  final mHC2_flow_nominal=9999999,
                  redeclare final AixLib.DataBase.Pipes.Copper.Copper_10x0_6 pipeHC2)
                    annotation (
                choicesAllMatching=true, Placement(transformation(extent={{44,12},{58,26}})));
          equation
            connect(T_stoDHWBot.y, sigBusDistr.TStoDHWBotMea) annotation (Line(points={{-16.4,
                    95},{2.5,95},{2.5,101},{0,101}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoDHWTop.y, sigBusDistr.TStoDHWTopMea) annotation (Line(points={{-14.3,
                    70},{-2,70},{-2,101},{0,101}},              color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoBufBot.y, sigBusDistr.TStoBufBotMea) annotation (Line(points={{-16.4,
                    79},{0,79},{0,101}},                      color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(T_stoBufTop.y, sigBusDistr.TStoBufTopMea) annotation (Line(points={{-16.4,
                    87},{0,87},{0,101}},                                  color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(fixedTemperatureDHW.port, storageDHW.heatportOutside) annotation (
                Line(points={{-62,-88},{14,-88},{14,-49.62},{-0.45,-49.62}},color={191,0,0}));
            connect(portDHW_in, storageDHW.fluidportBottom2) annotation (Line(points={{100,
                    -82},{-12,-82},{-12,-74.23},{-12.825,-74.23}}, color={0,127,255}));
            connect(storageDHW.heatingRod, QHRStoDHWPre_flow.port) annotation (Line(
                points={{-36,-51},{-62,-51}},
                color={191,0,0},
                pattern=LinePattern.Dash));
            connect(QHRStoDHWPre_flow.Q_flow, gain.y) annotation (Line(
                points={{-76,-51},{-85.2,-51}},
                color={0,0,127},
                pattern=LinePattern.Dash));
            connect(discretizeHRInDHWSto.u, sigBusDistr.uHRStoDHW) annotation (Line(
                  points={{-120.8,-50},{-126,-50},{-126,101},{0,101}}, color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(gain.u, discretizeHRInDHWSto.y) annotation (Line(points={{-103.6,-51},
                    {-108,-51},{-108,-50},{-111.6,-50}}, color={0,0,127}));
            connect(portGen_in[1], threeWayValveWithFlowReturn.portGen_a) annotation (
                Line(points={{-100,80},{-92,80},{-92,68.4},{-84,68.4}}, color={0,127,255}));
            connect(portGen_out[1], threeWayValveWithFlowReturn.portGen_b) annotation (
                Line(points={{-100,40},{-96,40},{-96,38},{-92,38},{-92,60},{-84,60},{-84,60.4}},
                  color={0,127,255}));
            connect(threeWayValveWithFlowReturn.portDHW_b, storageDHW.portHC1In)
              annotation (Line(points={{-64,60.4},{-58,60.4},{-58,-37.89},
                    {-36.45,-37.89}}, color={0,127,255}));
            connect(storageDHW.portHC1Out, threeWayValveWithFlowReturn.portDHW_a)
              annotation (Line(points={{-36.225,-45.02},{-60,-45.02},{-60,56.4},{-64,56.4}},
                  color={0,127,255}));
            connect(threeWayValveWithFlowReturn.uBuf, sigBusDistr.uThrWayVal) annotation (
               Line(points={{-74,76},{-74,101},{0,101}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            connect(internalKPICalculatorDHWLoss.KPIBus, outBusDist.QDHWLoss) annotation (
               Line(
                points={{-31.8,-135},{-16,-135},{-16,-136},{0,-136},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
                Line(
                points={{50,-98},{70,-98}},
                color={0,0,0},
                thickness=1));
            connect(storageDHW.fluidportTop2, portDHW_out) annotation (Line(points={{-12.375,
                    -27.77},{-12.375,-20},{100,-20},{100,-22}}, color={0,127,255}));
            connect(internalKPICalculatorDHWHR.KPIBus, outBusDist.WelHRDHW) annotation (
                Line(
                points={{-63.8,-115},{0,-115},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(inputKPICalculator.KPIBus, outBusDist.WelHRAftBuf) annotation (Line(
                points={{-63.8,-137},{0,-137},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(internalKPICalculatorDHWHR1.KPIBus, outBusDist.WelHRBufSto)
              annotation (Line(
                points={{-87.8,-115},{-43.9,-115},{-43.9,-100},{0,-100}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(senTBuiVL.port_b, portBui_out[1]) annotation (Line(points={
                    {62,78},{86,78},{86,80},{100,80}}, color={0,127,255}));
            connect(senTBuiRL.port_b, portBui_in[1]) annotation (Line(points={{
                    62,44},{84,44},{84,40},{100,40}}, color={0,127,255}));
            connect(threeWayValveWithFlowReturn.portBui_b, senTBuiVL.port_a) annotation (
                Line(points={{-64,72},{-56,72},{-56,64},{44,64},{44,78},{52,78}}, color={0,
                    127,255}));
            connect(threeWayValveWithFlowReturn.portBui_a, senTBuiRL.port_a) annotation (
                Line(points={{-64,68},{-58,68},{-58,62},{-54,62},{-54,36},{46,36},{46,44},
                    {52,44}}, color={0,127,255}));
          end PartialDistributionNoStorageForHeating;
        annotation (Icon(graphics={
                Rectangle(
                  lineColor={200,200,200},
                  fillColor={248,248,248},
                  fillPattern=FillPattern.HorizontalCylinder,
                  extent={{-100.0,-100.0},{100.0,100.0}},
                  radius=25.0),
                Rectangle(
                  lineColor={128,128,128},
                  extent={{-100.0,-100.0},{100.0,100.0}},
                  radius=25.0),
                Ellipse(
                  extent={{-30.0,-30.0},{30.0,30.0}},
                  lineColor={128,128,128},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end BaseClasses;

        model DistributionSchema1 "Distribution schema 1 BWP"
          extends BaseClasses.PartialDistributionBWP1and2;
        end DistributionSchema1;

        model DistributionSchema1Test "Direct transfer and DHW storage"
          extends BaseClasses.PartialDistribution(
            final dpDem_nominal={0},
            final dpSup_nominal={0},
            final dTTraDHW_nominal=dhwParameters.dTLoadingHC1,
            final dTTra_nominal={0},
            final QLoss_flow_nominal=f_design .* Q_flow_nominal .- Q_flow_nominal,
            final TSup_nominal=TDem_nominal .+ dTLoss_nominal .+ dTTra_nominal,
            dTLoss_nominal=fill(0, nParallelDem),
            final m_flow_nominal=mDem_flow_nominal,
            final nParallelSup=1,
            final nParallelDem=1);

          AixLib.Fluid.Storage.Storage storageDHW(
            redeclare final package Medium = MediumDHW,
            final n=dhwParameters.nLayer,
            final d=dhwParameters.d,
            final h=dhwParameters.h,
            final lambda_ins=dhwParameters.lambda_ins,
            final s_ins=dhwParameters.sIns,
            final hConIn=dhwParameters.hConIn,
            final hConOut=dhwParameters.hConOut,
            final k_HE=dhwParameters.k_HE,
            final A_HE=dhwParameters.A_HE,
            final V_HE=dhwParameters.V_HE,
            final beta=dhwParameters.beta,
            final kappa=dhwParameters.kappa,
            final m_flow_nominal_layer=mDHW_flow_nominal,
            final m_flow_nominal_HE=mSup_flow_nominal[1],
            final energyDynamics=energyDynamics,
            final T_start=TDHW_nominal,
            final p_start=p_start,
            final m_flow_small_layer=1E-4*abs(storageDHW.m_flow_nominal_layer),
            final m_flow_small_layer_HE=1E-4*abs(storageDHW.m_flow_nominal_HE))
            "The DHW storage (TWWS) for domestic hot water demand"
            annotation (Placement(transformation(extent={{66,-70},{32,-32}})));
          Modelica.Blocks.Sources.RealExpression T_stoDHWTop(final y(unit="K", displayUnit="degC")=storageDHW.layer[
                dhwParameters.nLayer].T) annotation (Placement(transformation(
                extent={{-5,-3},{5,3}},
                rotation=180,
                origin={37,87})));
          Modelica.Blocks.Sources.RealExpression T_stoBufTop(final y(
              unit="K",
              displayUnit="degC") = senTemVL.T)
                                         annotation (Placement(transformation(
                extent={{-5,-2},{5,2}},
                rotation=180,
                origin={23,92})));
          Modelica.Blocks.Sources.RealExpression T_stoBufBot(final y(
              unit="K",
              displayUnit="degC") = senTemRL.T)
            annotation (Placement(transformation(
                extent={{-5,-3},{5,3}},
                rotation=180,
                origin={23,87})));
          Modelica.Blocks.Sources.RealExpression T_stoDHWBot(final y(unit="K", displayUnit="degC")=storageDHW.layer[1].T)
            annotation (Placement(transformation(
                extent={{-5,-3},{5,3}},
                rotation=180,
                origin={37,99})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.SimpleStorageBaseDataDefinition
            dhwParameters constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.SimpleStorageBaseDataDefinition(
            final rho=rho,
            final c_p=cp,
            final TAmb=TAmb,
            final QHC1_flow_nominal=QDHW_flow_nominal,
            final V=VDHWDay,
            final Q_flow_nominal=QDHW_flow_nominal,
            final VPerQ_flow=0,
            final T_m=TDHW_nominal,
            final mHC1_flow_nominal=mSup_flow_nominal[1],
            redeclare final AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1)
            annotation (choicesAllMatching=true, Placement(transformation(
                  extent={{82,-58},{98,-42}})));
          Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperatureDHW(final T=
                dhwParameters.TAmb)           annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={30,-90})));

          Utilities.KPIs.InternalKPICalculator internalKPICalculatorDHWLoss(
            unit="W",
            integralUnit="J",
            thresholdOn=Modelica.Constants.eps,
            calc_singleOnTime=false,
            calc_integral=true,
            calc_totalOnTime=false,
            calc_numSwi=false,
            calc_movAve=false,
            calc_intBelThres=false,
            y=fixedTemperatureDHW.port.Q_flow)
            annotation (Placement(transformation(extent={{-80,-110},{-60,-72}})));
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{34,-110},{54,-90}})));
          IBPSA.Fluid.Sensors.TemperatureTwoPort senTemVL(
            redeclare final package Medium = Medium,
            final allowFlowReversal=false,
            m_flow_nominal=m_flow_nominal[1],
            tau=temperatureSensorData.tau,
            initType=temperatureSensorData.initType,
            T_start=T_start,
            final transferHeat=temperatureSensorData.transferHeat,
            TAmb=temperatureSensorData.TAmb,
            tauHeaTra=temperatureSensorData.tauHeaTra)
            "Temperature on the top of the BufSto/at the exit of the passThrough if no BufSto"
            annotation (Placement(transformation(
                extent={{4,5},{-4,-5}},
                rotation=180,
                origin={46,75})));
          IBPSA.Fluid.Sensors.TemperatureTwoPort senTemRL(
            redeclare final package Medium = Medium,
            final allowFlowReversal=false,
            m_flow_nominal=m_flow_nominal[1],
            tau=temperatureSensorData.tau,
            initType=temperatureSensorData.initType,
            T_start=T_start,
            final transferHeat=temperatureSensorData.transferHeat,
            TAmb=temperatureSensorData.TAmb,
            tauHeaTra=temperatureSensorData.tauHeaTra)
            "Temperature on the bottom of the BufSto/at the exit of the passThrough if no BufSto"
            annotation (Placement(transformation(
                extent={{4,5},{-4,-5}},
                rotation=180,
                origin={60,51})));
          replaceable parameter
            BESMod.Systems.RecordsCollection.TemperatureSensors.TemperatureSensorBaseDefinition
            temperatureSensorData
            annotation (choicesAllMatching=true, Placement(transformation(extent={{30,40},
                    {42,54}})));
          Components.Valves.ThreeWayValveWithFlowReturn
            threeWayValveWithFlowReturn(redeclare package Medium = Medium,
              redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
              parameters)
            annotation (Placement(transformation(extent={{-68,38},{-20,80}})));
        equation
          connect(storageDHW.port_b_consumer, portDHW_out) annotation (Line(points={{49,-32},
                  {48,-32},{48,-22},{100,-22}},      color={0,127,255}));
          connect(portDHW_in, storageDHW.port_a_consumer) annotation (Line(points={{100,-82},
                  {48,-82},{48,-70},{49,-70}},      color={0,127,255}));
          connect(fixedTemperatureDHW.port, storageDHW.heatPort) annotation (Line(
                points={{40,-90},{70,-90},{70,-51},{62.6,-51}}, color={191,0,0}));
          connect(internalKPICalculatorDHWLoss.KPIBus, outBusDist.QDHWLoss) annotation (
             Line(
              points={{-59.8,-91},{-14,-91},{-14,-86},{0,-86},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));

          connect(T_stoDHWBot.y, sigBusDistr.TStoDHWBotMea) annotation (Line(points={{31.5,
                  99},{0,99},{0,101}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(T_stoDHWTop.y, sigBusDistr.TStoDHWTopMea) annotation (Line(points={{31.5,
                  87},{28,87},{28,101},{0,101}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(T_stoBufBot.y, sigBusDistr.TStoBufBotMea) annotation (Line(points={{17.5,
                  87},{0,87},{0,101}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(T_stoBufTop.y, sigBusDistr.TStoBufTopMea) annotation (Line(points={{17.5,
                  92},{0,92},{0,101}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{54,-100},{54,-98},{70,-98}},
              color={0,0,0},
              thickness=1));
          connect(senTemVL.port_b, portBui_out[1]) annotation (Line(points={{50,75},
                  {50,74},{84,74},{84,80},{100,80}},
                                                 color={0,127,255}));
          connect(portBui_in[1], senTemRL.port_a)
            annotation (Line(points={{100,40},{56,40},{56,51}}, color={0,127,255}));
          connect(portGen_in[1], threeWayValveWithFlowReturn.portGen_a)
            annotation (Line(points={{-100,80},{-74,80},{-74,68.24},{-68,68.24}},
                color={0,127,255}));
          connect(portGen_out[1], threeWayValveWithFlowReturn.portGen_b)
            annotation (Line(points={{-100,40},{-74,40},{-74,51.44},{-68,51.44}},
                color={0,127,255}));
          connect(threeWayValveWithFlowReturn.portBui_b, senTemVL.port_a)
            annotation (Line(points={{-20,75.8},{10,75.8},{10,75},{42,75}},
                color={0,127,255}));
          connect(threeWayValveWithFlowReturn.portBui_a, senTemRL.port_b)
            annotation (Line(points={{-20,67.4},{-20,66},{68,66},{68,51},{64,51}},
                color={0,127,255}));
          connect(threeWayValveWithFlowReturn.uBuf, sigBusDistr.uThrWayVal)
            annotation (Line(points={{-44,84.2},{-44,92},{-74,92},{-74,82},{-76,
                  82},{-76,46},{-72,46},{-72,34},{-4,34},{-4,76},{0,76},{0,101}},
                color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
        end DistributionSchema1Test;

        model NoStorageForHeating
          "Distribution system without storage for heating"
          extends BaseClasses.PartialDistribution_TwoEntrances_NoStorage;
        end NoStorageForHeating;

        model DirectHeating "No storage for heating"
          extends BaseClasses.PartialDistributionNoStorageForHeating;
        end DirectHeating;

        model TwoEntrances_NoStorage
          "Two separate circuits for heating and DHW"
          extends BaseClasses.PartialDistribution_TwoEntrances_NoStorage;
        end TwoEntrances_NoStorage;
      end Distribution;

      package Generation "Models for heat generation in Heat Pump Systems"
        extends BESMod.Utilities.Icons.SystemIcon;

        model ElectricalHeater "Only heat using a heating rod"
          extends BaseClasses.PartialGeneration(
            final dTLoss_nominal=fill(0, nParallelDem),
            dp_nominal={hea.dp_nominal}, final nParallelDem=1);

          Modelica.Blocks.Logical.Switch switch1 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={46,-16})));
          Modelica.Blocks.Sources.Constant       dummyMassFlow(final k=1)
            annotation (Placement(transformation(extent={{84,-6},{64,14}})));
          Modelica.Blocks.Sources.Constant       dummyZero(k=0)
                                                           annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={18,4})));

          AixLib.Fluid.HeatExchangers.HeatingRod hea(
            redeclare package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal[1],
            final m_flow_small=1E-4*abs(m_flow_nominal[1]),
            final show_T=show_T,
            final dp_nominal=heatingRodParameters.dp_nominal,
            final tau=30,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final Q_flow_nominal=Q_flow_nominal[1],
            final V=heatingRodParameters.V_hr,
            final eta=heatingRodParameters.eta_hr)
            annotation (Placement(transformation(extent={{-16,-16},{16,16}},
                rotation=90,
                origin={-32,10})));
          replaceable
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.HeatingRodBaseDataDefinition
            heatingRodParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-62,-42},{-50,-30}})));

          Modelica.Blocks.Logical.GreaterThreshold isOnHR(threshold=Modelica.Constants.eps)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={46,14})));

          IBPSA.Fluid.Movers.SpeedControlled_y pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal[1],
              final dp_nominal=dpDem_nominal[1] + dp_nominal[1],
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=180,
                origin={48,-48})));
          IBPSA.Fluid.Sources.Boundary_pT bou1(
            redeclare package Medium = Medium,
            p=p_start,
            T=T_start,
            nPorts=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={62,-74})));

        Utilities.KPIs.InternalKPICalculator KPIQHR(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=false,
            calc_integral=true,
            calc_totalOnTime=false,
            calc_numSwi=false,
            calc_movAve=false,
            calc_intBelThres=false,
            y=hea.vol.heatPort.Q_flow)
          annotation (Placement(transformation(extent={{-40,-128},{-28,-106}})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{14,-64},{28,-52}})));
          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{32,-108},{52,-88}})));
        equation
          connect(dummyZero.y,switch1. u3)
            annotation (Line(points={{29,4},{38,4},{38,-4}},    color={0,0,127}));
          connect(dummyMassFlow.y,switch1. u1)
            annotation (Line(points={{63,4},{54,4},{54,-4}}, color={0,0,127}));

          connect(hea.port_b, portGen_out[1]) annotation (Line(points={{-32,26},{-32,80},
                  {100,80}},        color={0,127,255}));
          connect(hea.Pel, outBusGen.PelHR) annotation (Line(points={{-41.6,27.6},{-41.6,
                  49.6},{-72,49.6},{-72,-100},{0,-100}},
                                               color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(portGen_in[1], pump.port_a) annotation (Line(points={{100,-2},{80,-2},
                  {80,-48},{58,-48}}, color={0,127,255}));
          connect(pump.port_a, bou1.ports[1])
            annotation (Line(points={{58,-48},{62,-48},{62,-64}}, color={0,127,255}));
          connect(switch1.y, pump.y) annotation (Line(points={{46,-27},{46,-31.5},{48,-31.5},
                  {48,-36}}, color={0,0,127}));
          connect(isOnHR.y, switch1.u2)
            annotation (Line(points={{46,7.4},{46,-4}}, color={255,0,255}));
          connect(hea.port_a, pump.port_b) annotation (Line(points={{-32,-6},{-34,-6},{
                  -34,-48},{38,-48}}, color={0,127,255}));
          connect(KPIQHR.KPIBus, outBusGen.QHR) annotation (Line(
              points={{-27.88,-117},{0,-117},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(hea.u, sigBusGen.uHR) annotation (Line(points={{-41.6,-9.2},{-41.6,
                  -24},{-56,-24},{-56,98},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(isOnHR.u, sigBusGen.uHR) annotation (Line(points={{46,21.2},{48,21.2},
                  {48,46},{2,46},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{52.2,-97.8},{52.2,-96},{58,-96},{58,-86},{72,-86},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(realToElecCon.PEleLoa, hea.Pel) annotation (Line(points={{30,-94},{
                  -64,-94},{-64,27.6},{-41.6,27.6}}, color={0,0,127}));
        end ElectricalHeater;

        model GasBoiler "Just a gas boiler"
          extends BaseClasses.PartialGeneration(dp_nominal={boilerNoControl.dp_nominal},
                                                final nParallelDem=1);

          AixLib.Fluid.BoilerCHP.BoilerNoControl boilerNoControl(
            redeclare package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal[1],
            final m_flow_small=1E-4*abs(m_flow_nominal[1]),
            final show_T=show_T,
            final tau=temperatureSensorData.tau,
            final initType=temperatureSensorData.initType,
            final transferHeat=temperatureSensorData.transferHeat,
            final TAmb=temperatureSensorData.TAmb,
            final tauHeaTra=temperatureSensorData.tauHeaTra,
            final rho_default=rho,
            final p_start=p_start,
            final T_start=T_start,
            paramBoiler=paramBoiler,
            etaTempBased=etaTempBased)
            annotation (Placement(transformation(extent={{-66,-6},{-34,26}})));

          replaceable parameter AixLib.DataBase.Boiler.General.BoilerTwoPointBaseDataDefinition
            paramBoiler "Parameters for Boiler" annotation(choicesAllMatching=true);
          parameter Real etaTempBased[:,2]=[293.15,1.09; 303.15,1.08; 313.15,1.05;
              323.15,1.; 373.15,0.99] "Table matrix for temperature based efficiency";
        Utilities.KPIs.InternalKPICalculator KPIQHR(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=false,
            calc_integral=true,
            calc_totalOnTime=false,
            calc_numSwi=false,
            calc_movAve=false,
            calc_intBelThres=false,
            y=boilerNoControl.QflowCalculation.y)
          annotation (Placement(transformation(extent={{-46,-106},{-24,-70}})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.TemperatureSensorBaseDefinition
            temperatureSensorData annotation (choicesAllMatching=true,
              Placement(transformation(extent={{-98,-16},{-78,4}})));
          IBPSA.Fluid.Movers.SpeedControlled_y pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal[1],
              final dp_nominal=dpDem_nominal[1] + dp_nominal[1],
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=180,
                origin={46,-50})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{54,-80},{68,-68}})));
          IBPSA.Fluid.Sources.Boundary_pT bou1(
            redeclare package Medium = Medium,
            p=p_start,
            T=T_start,
            nPorts=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={66,-26})));
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{26,-108},{46,-88}})));
        equation

          connect(boilerNoControl.port_b, portGen_out[1]) annotation (Line(points={{-34,
                  10},{-20,10},{-20,80},{100,80}}, color={0,127,255}));
          connect(boilerNoControl.T_in, sigBusGen.TBoiIn) annotation (Line(points={{-38.48,
                  19.28},{2,19.28},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(boilerNoControl.T_out, sigBusGen.TBoiOut) annotation (Line(points={{-38.48,
                  15.12},{2,15.12},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(boilerNoControl.u_rel, sigBusGen.uBoiSet) annotation (Line(points={{-61.2,
                  21.2},{-68,21.2},{-68,98},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(KPIQHR.KPIBus, outBusGen.QBoi) annotation (Line(
              points={{-23.78,-88},{0,-88},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(portGen_in[1], pump.port_a) annotation (Line(points={{100,-2},{94,-2},
                  {94,-6},{86,-6},{86,-50},{56,-50}}, color={0,127,255}));
          connect(boilerNoControl.port_a, pump.port_b) annotation (Line(points={{-66,10},
                  {-68,10},{-68,-50},{36,-50},{36,-50}}, color={0,127,255}));
          connect(pump.y, sigBusGen.uBoiSet) annotation (Line(points={{46,-38},{46,14},
                  {2,14},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(bou1.ports[1], pump.port_a)
            annotation (Line(points={{66,-36},{66,-50},{56,-50}}, color={0,127,255}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{46,-98},{72,-98}},
              color={0,0,0},
              thickness=1));
        end GasBoiler;

        model HeatPumpAndHeatingRod "Bivalent monoenergetic heat pump"
          extends
            BESMod.HugosProject.Systems.Hydraulical.Generation.BaseClasses.PartialGeneration(
            final QLoss_flow_nominal=f_design .* Q_flow_nominal .-
                Q_flow_nominal,
            final dTLoss_nominal=fill(0, nParallelDem),
            dTTra_nominal={if TDem_nominal[i] > 273.15 + 55 then 10 elseif
                TDem_nominal[i] > 44.9 + 273.15 then 8 else 5 for i in 1:
                nParallelDem},
            dp_nominal={heatPump.dpCon_nominal + dpHeaRod_nominal},
            nParallelDem=1);
             parameter Boolean use_pressure=false "=true to use a pump which works on pressure difference";
           parameter Boolean use_heaRod=true "=false to disable the heating rod";
            replaceable model PerDataMainHP =
              AixLib.DataBase.HeatPump.PerformanceData.LookUpTable2D
            constrainedby
            AixLib.DataBase.HeatPump.PerformanceData.BaseClasses.PartialPerformanceData
            annotation (__Dymola_choicesAllMatching=true);
          parameter Modelica.Media.Interfaces.Types.Temperature TSoilConst=273.15 + 10
            "Constant soil temperature for ground source heat pumps";
          replaceable package Medium_eva =
              Modelica.Media.Interfaces.PartialMedium                              constrainedby
            Modelica.Media.Interfaces.PartialMedium annotation (
              __Dymola_choicesAllMatching=true);
          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.HeatPumpBaseDataDefinition
            heatPumpParameters constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.HeatPumpBaseDataDefinition(
              final QGen_flow_nominal=Q_flow_nominal[1], final TOda_nominal=
                TOda_nominal) annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-90,4},{-72,22}})));
          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.HeatingRodBaseDataDefinition
            heatingRodParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{60,42},{72,54}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{4,-46},{18,-34}})));

          AixLib.Fluid.Interfaces.PassThroughMedium passThroughMediumHRBuf(redeclare
              package Medium = Medium, allowFlowReversal=allowFlowReversal)
            if not use_heaRod
            annotation (Placement(transformation(extent={{32,74},{44,86}})));

          BESMod.Components.Pumps.ArtificalPumpIsotermhal artificalPumpIsotermhal(
            redeclare package Medium = Medium,
            final p=p_start,
            final m_flow_nominal=m_flow_nominal[1]) if not
            use_pressure                         annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=180,
                origin={70,-50})));
          Modelica.Blocks.Logical.Switch switch1 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={46,-16})));
          Modelica.Blocks.Sources.RealExpression dummyMassFlow(final y=if use_pressure
                 then 1 else m_flow_nominal[1])
            annotation (Placement(transformation(extent={{84,-6},{64,14}})));
          Modelica.Blocks.Sources.RealExpression dummyZero annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={18,4})));
          Modelica.Blocks.MathBoolean.Or
                                     or1(nu=3)
                                         annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={46,14})));

          AixLib.Fluid.HeatPumps.HeatPump heatPump(
            redeclare package Medium_con = Medium,
            redeclare package Medium_eva = Medium_eva,
            final use_rev=false,
            final use_autoCalc=false,
            final Q_useNominal=0,
            final scalingFactor=heatPumpParameters.scalingFactor,
            final use_refIne=heatPumpParameters.use_refIne,
            final refIneFre_constant=heatPumpParameters.refIneFre_constant,
            final nthOrder=1,
            final useBusConnectorOnly=true,
            final mFlow_conNominal=m_flow_nominal[1],
            final VCon=heatPumpParameters.VCon,
            final dpCon_nominal=heatPumpParameters.dpCon_nominal,
            final use_conCap=false,
            final CCon=0,
            final GConOut=0,
            final GConIns=0,
            final mFlow_evaNominal=heatPumpParameters.mEva_flow_nominal,
            final VEva=heatPumpParameters.VEva,
            final dpEva_nominal=heatPumpParameters.dpEva_nominal,
            final use_evaCap=false,
            final CEva=0,
            final GEvaOut=0,
            final GEvaIns=0,
            final tauSenT=heatPumpParameters.TempSensorData.tau,
            final transferHeat=true,
            final allowFlowReversalEva=allowFlowReversal,
            final allowFlowReversalCon=allowFlowReversal,
            final tauHeaTraEva=heatPumpParameters.TempSensorData.tauHeaTra,
            final TAmbEva_nominal=heatPumpParameters.TempSensorData.TAmb,
            final tauHeaTraCon=heatPumpParameters.TempSensorData.tauHeaTra,
            final TAmbCon_nominal=heatPumpParameters.TempSensorData.TAmb,
            final pCon_start=p_start,
            final TCon_start=T_start,
            final pEva_start=Medium_eva.p_default,
            final TEva_start=Medium_eva.T_default,
            final energyDynamics=energyDynamics,
            final show_TPort=show_T,
            redeclare model PerDataMainHP = PerDataMainHP,
            redeclare model PerDataRevHP =
                AixLib.DataBase.Chiller.PerformanceData.LookUpTable2D (final dataTable=
                    AixLib.DataBase.Chiller.EN14511.Vitocal200AWO201()))
                                                         annotation (Placement(
                transformation(
                extent={{22,-27},{-22,27}},
                rotation=270,
                origin={-44,15})));

          IBPSA.Fluid.Sources.Boundary_ph bou_sinkAir(final nPorts=1, redeclare
              package Medium = Medium_eva)                       annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={-90,-22})));
          IBPSA.Fluid.Sources.MassFlowSource_T bou_air(
            final m_flow=heatPumpParameters.mEva_flow_nominal,
            final use_T_in=true,
            redeclare package Medium = Medium_eva,
            final use_m_flow_in=false,
            final nPorts=1)
            annotation (Placement(transformation(extent={{-100,42},{-80,62}})));

          Modelica.Blocks.Logical.GreaterThreshold isOnHP(threshold=Modelica.Constants.eps)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={16,38})));

          Modelica.Blocks.Logical.Switch switch2 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-124,56})));
          Modelica.Blocks.Sources.BooleanConstant
                                           AirOrSoil(k=heatPumpParameters.useAirSource)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-164,56})));
          Modelica.Blocks.Logical.GreaterThreshold isOnHR(threshold=Modelica.Constants.eps)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={40,36})));

          Utilities.KPIs.InputKPICalculator KPIWel(
            integralUnit="J",
            calc_singleOnTime=true,
            calc_integral=true,
            calc_movAve=false,
            unit="W")
            annotation (Placement(transformation(extent={{-78,-106},{-66,-84}})));
          Utilities.KPIs.InputKPICalculator KPIWHRel(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=true,
            calc_integral=true,
            calc_movAve=false) if use_heaRod
            annotation (Placement(transformation(extent={{86,86},{98,108}})));

          Modelica.Blocks.Sources.BooleanConstant constRunPump247(final k=
                heatPumpParameters.use_refIne)
            annotation (Placement(transformation(
                extent={{-5,5},{5,-5}},
                rotation=180,
                origin={79,27})));
          IBPSA.Fluid.Movers.SpeedControlled_y pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal[1],
              final dp_nominal=dpDem_nominal[1] + dp_nominal[1],
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) if use_pressure annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=180,
                origin={16,-68})));
          AixLib.Fluid.HeatExchangers.HeatingRod hea(
            redeclare package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal[1],
            final m_flow_small=1E-4*abs(m_flow_nominal[1]),
            final show_T=show_T,
            final dp_nominal=heatingRodParameters.dp_nominal,
            final tau=30,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final Q_flow_nominal=heatPumpParameters.QSec_flow_nominal,
            final V=heatingRodParameters.V_hr,
            final eta=heatingRodParameters.eta_hr,
            use_countNumSwi=false) if use_heaRod
            annotation (Placement(transformation(extent={{22,64},{54,96}})));

          Modelica.Blocks.Sources.Constant TSoil(k=TSoilConst)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-164,32})));

        Utilities.KPIs.InternalKPICalculator KPIQHP(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=false,                                        calc_integral=true,
            calc_totalOnTime=false,
            calc_numSwi=false,                                                                  calc_movAve=false,
            calc_intBelThres=false,                                                                                y=heatPump.con.QFlow_in)
          annotation (Placement(transformation(extent={{-76,-124},{-64,-102}})));
        Utilities.KPIs.InternalKPICalculator KPIQHR(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=false,                                        calc_integral=true,
            calc_totalOnTime=false,
            calc_numSwi=false,                                                                  calc_movAve=false,
            calc_intBelThres=false,                                                                                y=hea.vol.heatPort.Q_flow)
            if use_heaRod
          annotation (Placement(transformation(extent={{-76,-142},{-64,-120}})));

          IBPSA.Fluid.Sources.Boundary_pT bouPumpHP(
            redeclare package Medium = Medium,
            final p=p_start,
            final T=T_start,
            final nPorts=1) if use_pressure annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={52,-86})));

          IBPSA.Fluid.Sensors.TemperatureTwoPort senTBuiSup(
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            m_flow_nominal=m_flow_nominal[1],
            tau=heatPumpParameters.TempSensorData.tau,
            initType=heatPumpParameters.TempSensorData.initType,
            T_start=T_start,
            final transferHeat=heatPumpParameters.TempSensorData.transferHeat,
            TAmb=heatPumpParameters.TempSensorData.TAmb,
            tauHeaTra=heatPumpParameters.TempSensorData.tauHeaTra)
            "Temperature at supply for building" annotation (Placement(transformation(
                extent={{5,6},{-5,-6}},
                rotation=180,
                origin={71,80})));
          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=180,
                origin={100,-78})));
          Modelica.Blocks.Math.MultiSum multiSum(nu=if (use_pressure and use_heaRod) then 3 elseif use_pressure and not use_heaRod then 2 elseif use_heaRod and not use_pressure then 2 else 1) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={130,-82})));
        protected
          parameter Modelica.Units.SI.PressureDifference dpHeaRod_nominal=if use_heaRod
               then heatingRodParameters.dp_nominal else 0;

        equation
          connect(KPIQHP.KPIBus, outBusGen.QHP_flow) annotation (Line(points={{-63.88,-113},{0,-113},{0,-100}}, color={255,204,51}, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}, horizontalAlignment=TextAlignment.Left));
        connect(KPIQHR.KPIBus, outBusGen.QHR_flow) annotation (Line(points={{-63.88,-131},{0,-131},{0,-100}}, color={255,204,51}, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}, horizontalAlignment=TextAlignment.Left));

          connect(dummyZero.y,switch1. u3)
            annotation (Line(points={{29,4},{38,4},{38,-4}},    color={0,0,127}));
          connect(dummyMassFlow.y,switch1. u1)
            annotation (Line(points={{63,4},{54,4},{54,-4}}, color={0,0,127}));
          connect(or1.y,switch1. u2)
            annotation (Line(points={{46,7.1},{46,-4}},
                                                     color={255,0,255}));
          connect(switch1.y, artificalPumpIsotermhal.m_flow_in)
            annotation (Line(points={{46,-27},{46,-38.4},{70,-38.4}},
                                                               color={0,0,127},
              pattern=LinePattern.Dash));

          connect(artificalPumpIsotermhal.port_b, heatPump.port_a1) annotation (Line(
                points={{60,-50},{-30.5,-50},{-30.5,-7}}, color={0,127,255},
              pattern=LinePattern.Dash));
          connect(bou_air.ports[1], heatPump.port_a2) annotation (Line(
              points={{-80,52},{-57.5,52},{-57.5,37}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(heatPump.port_b2, bou_sinkAir.ports[1]) annotation (Line(
              points={{-57.5,-7},{-58,-7},{-58,-22},{-80,-22}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(sigBusGen.hp_bus, heatPump.sigBus) annotation (Line(
              points={{2,98},{-132,98},{-132,-62},{-52.775,-62},{-52.775,-6.78}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));

          connect(sigBusGen.hp_bus.nSet, isOnHP.u) annotation (Line(
              points={{2,98},{2,58},{16,58},{16,45.2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(bou_air.T_in, switch2.y)
            annotation (Line(points={{-102,56},{-113,56}}, color={0,0,127}));
          connect(sigBusGen.hp_bus.TOdaMea, switch2.u1) annotation (Line(
              points={{2,98},{-150,98},{-150,64},{-136,64}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(switch2.u2, AirOrSoil.y)
            annotation (Line(points={{-136,56},{-157.4,56}}, color={255,0,255}));
          connect(hea.u, sigBusGen.hr_on) annotation (Line(points={{18.8,89.6},{18.8,74},
                  {2,74},{2,98}},        color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(sigBusGen.hr_on, isOnHR.u) annotation (Line(
              points={{2,98},{2,60},{46,60},{46,43.2},{40,43.2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(portGen_in[1], artificalPumpIsotermhal.port_a) annotation (Line(
                points={{100,-2},{102,-2},{102,-50},{80,-50}}, color={0,127,255},
              pattern=LinePattern.Dash));
          connect(KPIWel.u, sigBusGen.hp_bus.PelMea) annotation (Line(points={{-79.32,
                  -95},{-110,-95},{-110,98},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(KPIWel.KPIBus, outBusGen.WHPel) annotation (Line(
              points={{-65.88,-95},{0,-95},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(hea.Pel, KPIWHRel.u) annotation (Line(points={{55.6,89.6},{54,89.6},{
                  54,100},{76,100},{76,97},{84.68,97}},
                                            color={0,0,127}));
          connect(KPIWHRel.KPIBus, outBusGen.WHRel) annotation (Line(
              points={{98.12,97},{116,97},{116,-108},{0,-108},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(isOnHR.y, or1.u[1]) annotation (Line(points={{40,29.4},{40,26},{44.6,26},
                  {44.6,20}}, color={255,0,255}));
          connect(isOnHP.y, or1.u[2]) annotation (Line(points={{16,31.4},{16,24},{46,24},
                  {46,20}}, color={255,0,255}));
          connect(constRunPump247.y, or1.u[3]) annotation (Line(points={{73.5,27},{48.1,
                  27},{48.1,20},{47.4,20}}, color={255,0,255}));
          connect(pump.port_a, portGen_in[1]) annotation (Line(
              points={{26,-68},{100,-68},{100,-2}},
              color={0,127,255},
              pattern=LinePattern.Dash));

          connect(passThroughMediumHRBuf.port_a, heatPump.port_b1) annotation (Line(
                points={{32,80},{-30,80},{-30,78},{-30.5,78},{-30.5,37}},
                                                        color={0,127,255}));
          connect(pump.port_b, heatPump.port_a1) annotation (Line(
              points={{6,-68},{-30.5,-68},{-30.5,-7}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(TSoil.y, switch2.u3) annotation (Line(points={{-157.4,32},{-146,32},
                  {-146,48},{-136,48}}, color={0,0,127}));
          connect(heatPump.port_b1, hea.port_a) annotation (Line(points={{-30.5,
                  37},{-30.5,80},{22,80}},
                                      color={0,127,255}));
          connect(bouPumpHP.ports[1], pump.port_a) annotation (Line(
              points={{52,-76},{52,-68},{26,-68}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(switch1.y, pump.y) annotation (Line(points={{46,-27},{46,-38},{16,-38},
                  {16,-56}}, color={0,0,127}));
          connect(hea.port_b, passThroughMediumHRBuf.port_a)
            annotation (Line(points={{54,80},{32,80}}, color={0,127,255}));
          connect(senTBuiSup.T, sigBusGen.THeaRodMea) annotation (Line(points={{71,86.6},
                  {71,98},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(senTBuiSup.port_b, portGen_out[1])
            annotation (Line(points={{76,80},{100,80}}, color={0,127,255}));
          connect(passThroughMediumHRBuf.port_a, hea.port_a)
            annotation (Line(points={{32,80},{22,80}}, color={0,127,255}));
          connect(passThroughMediumHRBuf.port_b, senTBuiSup.port_a)
            annotation (Line(points={{44,80},{66,80}}, color={0,127,255}));
          connect(hea.port_b, senTBuiSup.port_a)
            annotation (Line(points={{54,80},{66,80}}, color={0,127,255}));

          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{89.8,-78.2},{72,-78.2},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(multiSum.y, realToElecCon.PEleLoa)
            annotation (Line(points={{122.98,-82},{112,-82}}, color={0,0,127}));
          if use_heaRod and use_pressure then
            connect(multiSum.u[2], hea.Pel) annotation (Line(points={{136,-82},{142,-82},
                  {142,89.6},{55.6,89.6}},color={0,0,127}));
            connect(multiSum.u[1], sigBusGen.hp_bus.PelMea) annotation (Line(points={{136,
                  -82},{140,-82},{140,96},{72,96},{72,98},{2,98}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
            connect(multiSum.u[3], pump.P) annotation (Line(points={{136,-82},{140,-82},{
                  140,-86},{144,-86},{144,-59},{5,-59}},
                                                     color={0,0,127}));
          elseif use_heaRod then
            connect(multiSum.u[2], hea.Pel) annotation (Line(points={{136,-82},{142,-82},
                  {142,89.6},{55.6,89.6}},color={0,0,127}));
            connect(multiSum.u[1], sigBusGen.hp_bus.PelMea) annotation (Line(points={{136,
                  -82},{140,-82},{140,96},{72,96},{72,98},{2,98}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          elseif use_pressure then
            connect(multiSum.u[2], pump.P) annotation (Line(points={{136,-82},{140,-82},{
                  140,-86},{144,-86},{144,-59},{5,-59}},
                                                     color={0,0,127}));
            connect(multiSum.u[1], sigBusGen.hp_bus.PelMea) annotation (Line(points={{136,
                  -82},{140,-82},{140,96},{72,96},{72,98},{2,98}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          else
            connect(multiSum.u[1], sigBusGen.hp_bus.PelMea) annotation (Line(points={{136,
                  -82},{140,-82},{140,96},{72,96},{72,98},{2,98}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          end if;
        end HeatPumpAndHeatingRod;

        model NoGeneration "No heat generation at all"
          extends BaseClasses.PartialGeneration(
            dp_nominal={0},
            dTTra_nominal={10},
            final nParallelDem=1);
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{32,-108},{52,-88}})));
        equation
          connect(portGen_out, portGen_in) annotation (Line(points={{100,80},{78,80},{
                  78,-2},{100,-2}}, color={0,127,255}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{52,-98},{72,-98}},
              color={0,0,0},
              thickness=1));
        end NoGeneration;

        model SolarThermalBivHP
          "Solar thermal assistet monoenergetic heat pump with heating rod"
          extends HeatPumpAndHeatingRod(dTTra_nominal={if TDem_nominal[1] > 273.15 + 55
                 then 10 elseif TDem_nominal[1] > 44.9 then 8 else 5,solarThermalParas.dTMax},
                 final nParallelDem=2,
                 final dp_nominal={heatPump.dpCon_nominal + dpHeaRod_nominal, dpST_nominal});
          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.SolarThermalBaseDataDefinition
            solarThermalParas constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.SolarThermalBaseDataDefinition(
              final c_p=cp) annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-86,-62},{-66,-42}})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpSTData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{4,-152},{18,-138}})));
          AixLib.Fluid.Solar.Thermal.SolarThermal solarThermal(
            redeclare final package Medium = Medium,
            final allowFlowReversal=true,
            final m_flow_nominal=solarThermalParas.m_flow_nominal,
            final m_flow_small=1E-4*abs(solarThermalParas.m_flow_nominal),
            final show_T=false,
            final tau=1,
            final initType=Modelica.Blocks.Types.Init.InitialState,
            final T_start=T_start,
            final transferHeat=false,
            final TAmb=Medium.T_default,
            final tauHeaTra=1200,
            final p_start=p_start,
            final dp_nominal=dpST_nominal,
            final rho_default=rho,
            final a=solarThermal.pressureDropCoeff,
            final A=solarThermalParas.A,
            final volPip=solarThermalParas.volPip,
            final pressureDropCoeff=solarThermalParas.pressureDropCoeff,
            final Collector=AixLib.DataBase.SolarThermal.SimpleAbsorber(
                  eta_zero=solarThermalParas.eta_zero,
                  c1=solarThermalParas.c1,
                  c2=solarThermalParas.c2),
            vol(final energyDynamics=energyDynamics))                annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-32,-84})));

          IBPSA.Fluid.Movers.SpeedControlled_y pumpST(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpSTData.speed_rpm_nominal,
              final m_flow_nominal=solarThermalParas.m_flow_nominal,
              final dp_nominal=dpST_nominal+ dpDem_nominal[2],
              final rho=rho,
              final V_flowCurve=pumpSTData.V_flowCurve,
              final dpCurve=pumpSTData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpSTData.addPowerToMedium,
            final tau=pumpSTData.tau,
            final use_inputFilter=pumpSTData.use_inputFilter,
            final riseTime=pumpSTData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={28,-104})));

          IBPSA.Fluid.Sources.Boundary_pT bou(
            redeclare package Medium = Medium,
            final p=p_start,
            final T=T_start,              nPorts=1) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={54,-128})));
          Modelica.Blocks.Sources.Constant AirOrSoil1(k=1)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={14,-126})));

          Utilities.KPIs.InternalKPICalculator
                                            KPIWel1(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=true,
            calc_integral=true,
            calc_movAve=false,
            y=-solarThermal.heater.port.Q_flow)
            annotation (Placement(transformation(extent={{-104,-134},{-92,-112}})));

            Modelica.Blocks.Sources.RealExpression realExpression(y=solarThermal.senTCold.T)
              annotation (Placement(transformation(extent={{-112,-118},{-92,-98}})));
            Modelica.Blocks.Sources.RealExpression realExpression1(y=solarThermal.senTHot.T)
              annotation (Placement(transformation(extent={{-102,-156},{-82,-136}})));

        protected
          parameter Modelica.Units.SI.PressureDifference dpST_nominal=solarThermalParas.m_flow_nominal
              ^2*solarThermalParas.pressureDropCoeff/(rho^2)
            "Pressure drop at nominal mass flow rate";
        equation

          connect(pumpST.port_a, bou.ports[1]) annotation (Line(points={{38,-104},{54,-104},
                  {54,-118}}, color={0,127,255}));
          connect(pumpST.port_b, solarThermal.port_a) annotation (Line(points={{18,-104},
                  {-32,-104},{-32,-94}}, color={0,127,255}));
          connect(solarThermal.port_b, portGen_out[2]) annotation (Line(points={{-32,-74},
                  {-32,-62},{132,-62},{132,82.5},{100,82.5}},
                                                          color={0,127,255}));
          connect(portGen_in[2], pumpST.port_a) annotation (Line(points={{100,0.5},{102,
                  0.5},{102,-104},{38,-104}},
                                         color={0,127,255}));
          connect(pumpST.P, outBusGen.PelPumpST) annotation (Line(points={{17,-113},{0,
                  -113},{0,-100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(AirOrSoil1.y, pumpST.y) annotation (Line(points={{20.6,-126},{28,
                  -126},{28,-116}},
                              color={0,0,127}));
          connect(KPIWel1.KPIBus, outBusGen.QST_flow) annotation (Line(
              points={{-91.88,-123},{-91.88,-120},{-88,-120},{-88,-70},{0,-70},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(realExpression.y, outBusGen.TSolCol_in) annotation (Line(points={{-91,
                  -108},{-88,-108},{-88,-88},{-90,-88},{-90,-66},{-28,-66},{-28,-64},{0,
                  -64},{0,-100}},                 color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          connect(realExpression1.y, outBusGen.TSolCol_out) annotation (Line(points={{-81,
                  -146},{-81,-110},{-86,-110},{-86,-68},{-28,-68},{-28,-66},{0,-66},{0,-100}},
                                                                         color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));

          connect(solarThermal.T_air, weaBus.TDryBul) annotation (Line(points={{-42,-90},
                  {-101,-90},{-101,80}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(solarThermal.Irradiation, weaBus.HGloHor) annotation (Line(points={{
                  -42,-84},{-66,-84},{-66,-80},{-101,-80},{-101,80}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
        end SolarThermalBivHP;

        model SolarThermalBivHPBuiLib
          "Solar thermal assistet monoenergetic heat pump with heating rod"
          extends HeatPumpAndHeatingRod(dTTra_nominal={if TDem_nominal[1] > 273.15 + 55
                 then 10 elseif TDem_nominal[1] > 44.9 then 8 else 5,solarThermalParas.dTMax},
                 final nParallelDem=2,
                 final dp_nominal={heatPump.dpCon_nominal + dpHeaRod_nominal, dpST_nominal});
          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.SolarThermalBaseDataDefinition
            solarThermalParas constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.SolarThermalBaseDataDefinition(
              final c_p=cp) annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-86,-62},{-66,-42}})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpSTData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{4,-152},{18,-138}})));
          Buildings.Fluid.SolarCollectors.EN12975 solCol(
            redeclare final package Medium = Medium,
            final allowFlowReversal=true,
            final m_flow_small=1E-4*abs(solarThermalParas.m_flow_nominal),
            final show_T=false,
            final T_start=T_start,
            final p_start=p_start,
            nSeg=5,
            azi=0,
            til=0.5235987755983,
            rho=0.2,
            use_shaCoe_in=false,
            shaCoe=0,
            nColType=Buildings.Fluid.SolarCollectors.Types.NumberSelection.Area,
            totalArea=solarThermalParas.A,
            sysConfig=Buildings.Fluid.SolarCollectors.Types.SystemConfiguration.Series,
            per=Buildings.Fluid.SolarCollectors.Data.GenericSolarCollector(
                ATyp=Buildings.Fluid.SolarCollectors.Types.Area.Aperture,
                A=4.302,
                mDry=484,
                V=4.4/1000,
                dp_nominal=100,
                mperA_flow_nominal=solarThermalParas.m_flow_nominal/solarThermalParas.A,
                B0=0,
                B1=0,
                y_intercept=solarThermalParas.eta_zero,
                slope=0,
                IAMDiff=0.133,
                C1=solarThermalParas.c1,
                C2=solarThermalParas.c2,
                G_nominal=solarThermalParas.GMax,
                dT_nominal=solarThermalParas.dTMax))                 annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-32,-84})));

          IBPSA.Fluid.Movers.SpeedControlled_y pumpST(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpSTData.speed_rpm_nominal,
              final m_flow_nominal=solarThermalParas.m_flow_nominal,
              final dp_nominal=dpST_nominal+ dpDem_nominal[2],
              final rho=rho,
              final V_flowCurve=pumpSTData.V_flowCurve,
              final dpCurve=pumpSTData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpSTData.addPowerToMedium,
            final tau=pumpSTData.tau,
            final use_inputFilter=pumpSTData.use_inputFilter,
            final riseTime=pumpSTData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={28,-104})));

          IBPSA.Fluid.Sources.Boundary_pT bou(
            redeclare package Medium = Medium,
            final p=p_start,
            final T=T_start,              nPorts=1) annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={54,-128})));
          Modelica.Blocks.Sources.Constant AirOrSoil1(k=1)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-56,-150})));

          Utilities.KPIs.InternalKPICalculator KPIWel1(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=true,
            calc_integral=true,
            calc_movAve=false,
            y=sum(solCol.vol.heatPort.Q_flow))
            annotation (Placement(transformation(extent={{-104,-134},{-92,-112}})));

          Modelica.Blocks.Logical.Switch switch3 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-26,-162})));
          Modelica.Blocks.Sources.Constant AirOrSoil2(k=0)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-58,-178})));
          Modelica.Blocks.Logical.Hysteresis       isOnHR1(uLow=10, uHigh=100)
            annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=0,
                origin={-111,-151})));
        protected
          parameter Modelica.Units.SI.PressureDifference dpST_nominal=solarThermalParas.m_flow_nominal
              ^2*solarThermalParas.pressureDropCoeff/(rho^2)
            "Pressure drop at nominal mass flow rate";
        equation

          connect(pumpST.port_a, bou.ports[1]) annotation (Line(points={{38,-104},{54,-104},
                  {54,-118}}, color={0,127,255}));
          connect(pumpST.port_b, solCol.port_a) annotation (Line(points={{18,-104},{-32,
                  -104},{-32,-94}}, color={0,127,255}));
          connect(solCol.port_b, portGen_out[2]) annotation (Line(points={{-32,-74},{-32,
                  -62},{132,-62},{132,82.5},{100,82.5}}, color={0,127,255}));
          connect(portGen_in[2], pumpST.port_a) annotation (Line(points={{100,0.5},{102,
                  0.5},{102,-104},{38,-104}},
                                         color={0,127,255}));
          connect(pumpST.P, outBusGen.PelPumpST) annotation (Line(points={{17,-113},{0,
                  -113},{0,-100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(KPIWel1.KPIBus, outBusGen.QST_flow) annotation (Line(
              points={{-91.88,-123},{-91.88,-120},{-88,-120},{-88,-70},{0,-70},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));

          connect(weaBus, solCol.weaBus) annotation (Line(
              points={{-101,80},{-106,80},{-106,-94},{-41.6,-94}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(switch3.y, pumpST.y) annotation (Line(points={{-15,-162},{6,-162},{6,
                  -160},{28,-160},{28,-116}}, color={0,0,127}));
          connect(switch3.u1, AirOrSoil1.y) annotation (Line(points={{-38,-154},{-44,
                  -154},{-44,-150},{-49.4,-150}}, color={0,0,127}));
          connect(AirOrSoil2.y, switch3.u3) annotation (Line(points={{-51.4,-178},{-46,
                  -178},{-46,-170},{-38,-170}}, color={0,0,127}));
          connect(switch3.u2, isOnHR1.y) annotation (Line(points={{-38,-162},{-38,-176},
                  {-34,-176},{-34,-158},{-105.5,-158},{-105.5,-151}}, color={255,0,255}));
          connect(isOnHR1.u, weaBus.HDirNor) annotation (Line(points={{-117,-151},{-117,
                  -6},{-94,-6},{-94,38},{-76,38},{-76,44},{-74,44},{-74,80},{-101,80}},
                color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
        end SolarThermalBivHPBuiLib;

        package Tests
        extends Modelica.Icons.ExamplesPackage;

          model ElectricalHeater
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Hydraulical.Generation.ElectricalHeater
                generation(redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                  heatingRodParameters, redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                  pumpData));
            Modelica.Blocks.Sources.Constant     const1(k=1)
              annotation (Placement(transformation(extent={{-52,64},{-32,84}})));
          equation
            connect(const1.y, genControlBus.uHR) annotation (Line(points={{-31,74},{10,74}},
                  color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          end ElectricalHeater;

          model GasBoiler
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Hydraulical.Generation.GasBoiler generation(
                dTTra_nominal={10},
                redeclare
                  AixLib.DataBase.Boiler.General.Boiler_Vitogas200F_11kW
                  paramBoiler,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                  temperatureSensorData,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                  pumpData));
            Modelica.Blocks.Sources.Pulse        pulse(period=1800)
              annotation (Placement(transformation(extent={{-42,68},{-22,88}})));
          equation
            connect(pulse.y, genControlBus.uBoiSet) annotation (Line(points={{-21,78},{
                    -18,78},{-18,74},{10,74}},
                          color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          end GasBoiler;

          model HeatPumpAndHeatingRod
            extends PartialTest(   redeclare
                BESMod.HugosProject.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
                generation(
                use_pressure=true,
                use_heaRod=true,
                redeclare model PerDataMainHP =
                    AixLib.DataBase.HeatPump.PerformanceData.LookUpTable2D (
                      dataTable=AixLib.DataBase.HeatPump.EN255.Vitocal350AWI114()),
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                  heatPumpParameters,
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                  heatingRodParameters,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                  pumpData,
                redeclare package Medium_eva = IBPSA.Media.Air));
            Modelica.Blocks.Sources.Constant     const1(k=0)
              annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
            Modelica.Blocks.Sources.BooleanConstant
                                                 booleanConstant(k=true)
              annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
            Modelica.Blocks.Sources.Pulse        pulse(period=1800)
              annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
            Modelica.Blocks.Sources.Constant     const(k=1)
              annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
          equation
            connect(const.y, genControlBus.hp_bus.iceFacMea) annotation (Line(points={{
                    -119,90},{-119,92},{-104,92},{-104,74},{10,74}}, color={0,0,127}),
                Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(booleanConstant.y, genControlBus.hp_bus.modeSet) annotation (Line(
                  points={{-79,50},{-52,50},{-52,46},{10,46},{10,74}}, color={255,0,255}),
                Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(pulse.y, genControlBus.hp_bus.nSet) annotation (Line(points={{-79,90},
                    {-16,90},{-16,74},{10,74}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(const1.y, genControlBus.hr_on) annotation (Line(points={{-119,50},{
                    -119,74},{10,74}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          end HeatPumpAndHeatingRod;

          model SolarThermalAndHeatPumpAndHeatingRod
            extends PartialTest(   redeclare
                BESMod.HugosProject.Systems.Hydraulical.Generation.SolarThermalBivHP
                generation(
                redeclare model PerDataMainHP =
                    AixLib.DataBase.HeatPump.PerformanceData.VCLibMap,
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                  heatPumpParameters,
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                  heatingRodParameters,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                  pumpData,
                redeclare package Medium_eva = IBPSA.Media.Air,
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.DefaultSolarThermal
                  solarThermalParas,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                  pumpSTData));
            Modelica.Blocks.Sources.Constant     const1(k=0)
              annotation (Placement(transformation(extent={{-140,40},{-120,60}})));
            Modelica.Blocks.Sources.BooleanConstant
                                                 booleanConstant(k=true)
              annotation (Placement(transformation(extent={{-100,40},{-80,60}})));
            Modelica.Blocks.Sources.Pulse        pulse(period=1800)
              annotation (Placement(transformation(extent={{-100,80},{-80,100}})));
            Modelica.Blocks.Sources.Constant     const(k=1)
              annotation (Placement(transformation(extent={{-140,80},{-120,100}})));
          equation
            connect(const.y, genControlBus.hp_bus.iceFacMea) annotation (Line(points={{-119,
                    90},{-119,92},{-104,92},{-104,74},{10,74}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(booleanConstant.y, genControlBus.hp_bus.modeSet) annotation (Line(
                  points={{-79,50},{-52,50},{-52,46},{10,46},{10,74}}, color={255,0,255}),
                Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(pulse.y, genControlBus.hp_bus.nSet) annotation (Line(points={{-79,90},
                    {-16,90},{-16,74},{10,74}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
            connect(const1.y, genControlBus.hr_on) annotation (Line(points={{-119,50},{-119,
                    74},{10,74}}, color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));
          end SolarThermalAndHeatPumpAndHeatingRod;

          partial model PartialTest
            "Model for a partial test of hydraulic generation systems"
            extends BESMod.HugosProject.Systems.BaseClasses.PartialBESExample;

            BESMod.HugosProject.Systems.Hydraulical.Interfaces.GenerationControlBus
              genControlBus
              annotation (Placement(transformation(extent={{-10,54},{30,94}})));
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Generation.BaseClasses.PartialGeneration
              generation constrainedby
              BESMod.HugosProject.Systems.Hydraulical.Generation.BaseClasses.PartialGeneration(
              redeclare package Medium = IBPSA.Media.Water,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              dTTra_nominal=fill(10, generation.nParallelDem),
              m_flow_nominal=fill(0.317, generation.nParallelDem),
              Q_flow_nominal=fill(sum(systemParameters.QBui_flow_nominal),
                  generation.nParallelDem),
              TOda_nominal=systemParameters.TOda_nominal,
              dpDem_nominal=fill(0, generation.nParallelDem),
              TDem_nominal=fill(systemParameters.THydSup_nominal[1], generation.nParallelDem),
              TAmb=systemParameters.TAmbHyd) annotation (choicesAllMatching=
                  true, Placement(transformation(extent={{-50,-44},{24,28}})));

            IBPSA.Fluid.MixingVolumes.MixingVolume vol[generation.nParallelDem](
              redeclare final package Medium = IBPSA.Media.Water,
              each final energyDynamics=generation.energyDynamics,
              each final massDynamics=generation.massDynamics,
              each final p_start=generation.p_start,
              final T_start=fixedTemperature.T,
              each final X_start=generation.X_start,
              each final C_start=generation.C_start,
              each final C_nominal=generation.C_nominal,
              each final mSenFac=generation.mSenFac,
              final m_flow_nominal=generation.m_flow_nominal,
              final m_flow_small=1E-4*abs(generation.m_flow_nominal),
              each final allowFlowReversal=generation.allowFlowReversal,
              each V=23.5e-6*sum(systemParameters.QBui_flow_nominal),
              each final use_C_flow=false,
              each nPorts=2) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=270,
                  origin={54,12})));
            Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperature[
              generation.nParallelDem](each final T(displayUnit="K") = systemParameters.THydSup_nominal[
                1])                                                      annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={90,8})));
            IBPSA.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(final filNam=
                  systemParameters.filNamWea)
              "Weather data reader"
              annotation (Placement(transformation(extent={{-102,66},{-66,100}})));
          equation
            connect(generation.sigBusGen, genControlBus) annotation (Line(
                points={{-12.26,27.28},{-12.26,49.64},{10,49.64},{10,74}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            for i in 1:generation.nParallelDem loop
            connect(generation.portGen_out[i], vol[i].ports[1]) annotation (Line(points={{24,20.8},
                      {36,20.8},{36,6},{44,6},{44,13}},     color={0,127,255}));
            connect(generation.portGen_in[i], vol[i].ports[2])
              annotation (Line(points={{24,6.4},{44,6.4},{44,11}}, color={0,127,255}));
            end for;

            connect(vol.heatPort, fixedTemperature.port) annotation (Line(points={{54,22},
                    {54,26},{76,26},{76,8},{80,8}}, color={191,0,0}));
            connect(weaDat.weaBus, generation.weaBus) annotation (Line(
                points={{-66,83},{-66,82},{-58,82},{-58,13.6},{-49.26,13.6}},
                color={255,204,51},
                thickness=0.5));

            annotation (experiment(
                StopTime=864000,
                Interval=600,
                __Dymola_Algorithm="Dassl"));
          end PartialTest;
        end Tests;

        package BaseClasses "Base class with partial generation models"
          partial model PartialGeneration "Partial generation model for HPS"
            extends BESMod.Utilities.Icons.GenerationIcon;
            extends
              BESMod.HugosProject.Systems.BaseClasses.PartialFluidSubsystemWithParameters(
              final TSup_nominal=TDem_nominal .+ dTLoss_nominal,
              m_flow_nominal=Q_flow_nominal .* f_design ./ dTTra_nominal ./
                  4184,
              final nParallelSup=nParallelDem);

            parameter Modelica.Units.SI.PressureDifference dpDem_nominal[nParallelDem]
              "Nominal pressure loss of resistances in the demand system of the generation"
              annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));

            BESMod.HugosProject.Systems.Hydraulical.Interfaces.GenerationControlBus
              sigBusGen annotation (Placement(transformation(extent={{-18,78},{
                      22,118}})));
            Modelica.Fluid.Interfaces.FluidPort_b portGen_out[nParallelDem](redeclare
                final package Medium = Medium) "Outlet of the generation" annotation (
                Placement(transformation(extent={{90,70},{110,90}}), iconTransformation(
                    extent={{90,70},{110,90}})));
            Modelica.Fluid.Interfaces.FluidPort_a portGen_in[nParallelDem](redeclare
                final package Medium = Medium) "Inlet to the generation" annotation (
                Placement(transformation(extent={{90,-12},{110,8}}), iconTransformation(
                    extent={{90,30},{110,50}})));
            BESMod.HugosProject.Systems.Hydraulical.Interfaces.GenerationOutputs
              outBusGen annotation (Placement(transformation(extent={{-10,-110},
                      {10,-90}})));

            IBPSA.BoundaryConditions.WeatherData.Bus
                weaBus "Weather data bus" annotation (Placement(transformation(extent={{-122,58},
                      {-80,102}}),         iconTransformation(extent={{-108,50},{-88,
                      70}})));
            Electrical.Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{62,-108},{82,-88}})));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialGeneration;

          partial model PartialGeneration_TwoCirtcuits
            "Partial generation model for HPS with two circuits"
            extends BESMod.Utilities.Icons.GenerationIcon;
            extends
              BESMod.HugosProject.Systems.BaseClasses.PartialFluidSubsystemWithParameters(
              final TSup_nominal=TDem_nominal .+ dTLoss_nominal,
              m_flow_nominal=Q_flow_nominal .* f_design ./ dTTra_nominal ./
                  4184,
              final nParallelSup=nParallelDem);

            parameter Modelica.Units.SI.PressureDifference dpDem_nominal[nParallelDem]
              "Nominal pressure loss of resistances in the demand system of the generation"
              annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));

            BESMod.HugosProject.Systems.Hydraulical.Interfaces.GenerationControlBus
              sigBusGen annotation (Placement(transformation(extent={{-18,78},{
                      22,118}})));
            Modelica.Fluid.Interfaces.FluidPort_b portGenHeat_out[nParallelDem](redeclare
                final package Medium = Medium) "Outlet of the generation for heating" annotation (
                Placement(transformation(extent={{90,70},{110,90}}), iconTransformation(
                    extent={{90,70},{110,90}})));
            Modelica.Fluid.Interfaces.FluidPort_a portGenHeat_in[nParallelDem](redeclare
                final package Medium = Medium) "Inlet to the generation for heating" annotation (
                Placement(transformation(extent={{90,30},{110,50}}), iconTransformation(
                    extent={{90,30},{110,50}})));
            Modelica.Fluid.Interfaces.FluidPort_b portGenDHW_out(redeclare
                final package
                Medium =               Medium) "Outlet of the generation for DHW" annotation (
                Placement(transformation(extent={{90,-30},{110,-10}}),
                                                                     iconTransformation(
                    extent={{90,-30},{110,-10}})));
            Modelica.Fluid.Interfaces.FluidPort_a portGenDHW_in(redeclare
                final package
                Medium =               Medium) "Inlet to the generation for DHW" annotation (
                Placement(transformation(extent={{90,-70},{110,-50}}),
                                                                     iconTransformation(
                    extent={{90,30},{110,50}})));
            BESMod.HugosProject.Systems.Hydraulical.Interfaces.GenerationOutputs
              outBusGen annotation (Placement(transformation(extent={{-10,-110},
                      {10,-90}})));

            IBPSA.BoundaryConditions.WeatherData.Bus
                weaBus "Weather data bus" annotation (Placement(transformation(extent={{-122,58},
                      {-80,102}}),         iconTransformation(extent={{-108,50},{-88,
                      70}})));
            Electrical.Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{62,-108},{82,-88}})));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialGeneration_TwoCirtcuits;
        annotation (Icon(graphics={
                Rectangle(
                  lineColor={200,200,200},
                  fillColor={248,248,248},
                  fillPattern=FillPattern.HorizontalCylinder,
                  extent={{-100.0,-100.0},{100.0,100.0}},
                  radius=25.0),
                Rectangle(
                  lineColor={128,128,128},
                  extent={{-100.0,-100.0},{100.0,100.0}},
                  radius=25.0),
                Ellipse(
                  extent={{-30.0,-30.0},{30.0,30.0}},
                  lineColor={128,128,128},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end BaseClasses;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

          partial record HeatingRodBaseDataDefinition
            extends Modelica.Icons.Record;
            // Generation: Heating Rod
            parameter Real eta_hr "Heating rod efficiency";
            parameter Modelica.Units.SI.Volume V_hr
              "Volume to model thermal inertia of water";
            parameter Modelica.Units.SI.PressureDifference dp_nominal
              "Pressure difference";

            parameter Integer discretizationSteps(min=0) "Number of steps to dicretize. =0 modulating, =1 resembels an on-off controller. =2 would sample 0, 0.5 and 1";

            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end HeatingRodBaseDataDefinition;

          record DefaultHR
            extends
              Systems.Hydraulical.Generation.RecordsCollection.HeatingRodBaseDataDefinition(
              discretizationSteps=0,
              V_hr=0.001,
              eta_hr=0.97,
              dp_nominal(displayUnit="Pa") = 1000);
          end DefaultHR;

          partial record SolarThermalBaseDataDefinition
            extends Modelica.Icons.Record;
            parameter Modelica.Units.SI.Efficiency eta_zero=0.75
              "Conversion factor/Efficiency at Q = 0";
            parameter Real c1=2                   "Loss coefficient c1";
            parameter Real c2=0.005                 "Loss coefficient c2";
            parameter Modelica.Units.SI.Area A=2 "Area of solar thermal collector";

            parameter Modelica.Units.SI.Diameter dPipe "Diameter of the pip";
            parameter Modelica.Units.SI.Length spacing
              "Spacing of pipes / distance betwenn two pipes";
            parameter Modelica.Units.SI.SpecificHeatCapacityAtConstantPressure c_p=4184
              "Heat capacity of water";
            parameter Modelica.Units.SI.TemperatureDifference dTMax
              "Maximal temperature difference";
            parameter Modelica.Units.SI.Irradiance GMax
              "Maximal heat flow rate per area due to radation";

            parameter Real pressureDropCoeff=2500/(A*2.5e-5)^2
              "Pressure drop coefficient, delta_p[Pa] = PD * Q_flow[m^3/s]^2";
            parameter Modelica.Units.SI.MassFlowRate m_flow_nominal=GMax*A/(c_p*dTMax)
              "Nominal mass flow rate";

            parameter Modelica.Units.SI.Volume volPip=dPipe^2*Modelica.Constants.pi/4*A/
                spacing "Water volume of piping";

            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end SolarThermalBaseDataDefinition;

          record DefaultSolarThermal "DummyParameters"
            extends
              BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.SolarThermalBaseDataDefinition(
              GMax=1000,
              dTMax=35,
              spacing=0.1,
              dPipe=0.001,
              volPip=5e-3,
              m_flow_nominal=0.1);

          end DefaultSolarThermal;

          partial record HeatPumpBaseDataDefinition
            extends Modelica.Icons.Record;

            parameter Modelica.Units.SI.HeatFlowRate QGen_flow_nominal
              "Nominal heating load at outdoor air temperature"
              annotation (Dialog(group="Design"));

            // Temperature Levels
            parameter Modelica.Units.SI.Temperature TOda_nominal
              "Nominal outdoor air temperature" annotation (Dialog(group="Design"));
            parameter Modelica.Units.SI.Temperature THeaTresh "Heating treshhold"
              annotation (Dialog(group="Design"));
            parameter
              BESMod.HugosProject.Systems.Hydraulical.Generation.Types.GenerationDesign
              genDesTyp "Type of generation system design"
              annotation (Dialog(group="Design"));
            parameter Modelica.Units.SI.HeatFlowRate QPri_flow_nominal=if genDesTyp ==Systems.Hydraulical.Generation.Types.GenerationDesign.Monovalent
                                                                                 then
                QGen_flow_nominal else QGenBiv_flow_nominal
              "Nominal heat flow rate of primary generation component (e.g. heat pump)"
              annotation (Dialog(group="Design"));
            parameter Modelica.Units.SI.HeatFlowRate QSec_flow_nominal=if genDesTyp ==Systems.Hydraulical.Generation.Types.GenerationDesign.Monovalent
                                                                                 then 0
                 elseif genDesTyp ==Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentAlternativ
                 then QGen_flow_nominal elseif genDesTyp ==Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentParallel
                 then QGen_flow_nominal - QGenBiv_flow_nominal else QGen_flow_nominal
              "Nominal heat flow rate of secondary generation component (e.g. auxilliar heater)"
              annotation (Dialog(group="Design"));
            parameter Modelica.Units.SI.Temperature TBiv=TOda_nominal
              "Nominal bivalence temperature. = TOda_nominal for monovalent systems."
              annotation (Dialog(enable=genDesTyp <> Systems.Hydraulical.Generation.Types.GenerationDesign.Monovalent,
                  group="Design"));

            parameter Modelica.Units.SI.HeatFlowRate QGenBiv_flow_nominal=
                QGen_flow_nominal*(TBiv - THeaTresh)/(TOda_nominal - THeaTresh)
              "Nominal heat flow rate at bivalence temperature"
              annotation (Dialog(group="Design"));

            // Generation: Heat Pump
            parameter Real scalingFactor=1 "Scaling-factor of vapour compression machine";
            parameter Modelica.Units.SI.MassFlowRate mEva_flow_nominal=1
              "Mass flow rate through evaporator";
            parameter Modelica.Units.SI.Volume VEva=0.004
              "Manual input of the evaporator volume (if not automatically calculated)";
            parameter Modelica.Units.SI.Volume VCon=0.001
              "Manual input of the condenser volume";
            parameter Boolean useAirSource=true "Turn false to use water as temperature source.";
            parameter Modelica.Units.SI.PressureDifference dpCon_nominal=1000
              "Pressure difference";
            parameter Modelica.Units.SI.PressureDifference dpEva_nominal=1000
              "Pressure difference";
             parameter Boolean use_refIne=false
              "Consider the inertia of the refrigerant cycle";
            parameter Modelica.Units.SI.Frequency refIneFre_constant=0
              "Cut off frequency for inertia of refrigerant cycle";

            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.TemperatureSensorBaseDefinition
              TempSensorData "Temperature Sensor Data"
              annotation (choicesAllMatching=true);
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end HeatPumpBaseDataDefinition;

          record DefaultHP
            extends
              Systems.Hydraulical.Generation.RecordsCollection.HeatPumpBaseDataDefinition(
              genDesTyp=BESMod.HugosProject.Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentAlternativ,
              THeaTresh=293.15,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                TempSensorData);

          end DefaultHP;
        end RecordsCollection;

        package Types "Package with types like enumartions or similar"

          type GenerationDesign = enumeration(
              Monovalent "Monovalent",
              BivalentAlternativ "Bivalent alternativ",
              BivalentParallel "Bivalent parallel",
              BivalentPartParallel "Bivalent partly parallel")
            "Choose between different design options for primary generation";
        end Types;

        model HeatPumpAndHeatingRod_TwoExits "Bivalent monoenergetic heat pump with two exits"
          extends BaseClasses.PartialGeneration_TwoCirtcuits;
          parameter Boolean use_pressure=true "=true to use a pump which works on pressure difference";
          parameter Boolean use_heaRod=true "=false to disable the heating rod";
          AixLib.Fluid.HeatPumps.HeatPump heatPump(
            redeclare package Medium_con = Medium,
            redeclare package Medium_eva = Medium_eva,
            final use_rev=false,
            final use_autoCalc=false,
            final Q_useNominal=0,
            final scalingFactor=heatPumpParameters.scalingFactor,
            final use_refIne=heatPumpParameters.use_refIne,
            final refIneFre_constant=heatPumpParameters.refIneFre_constant,
            final nthOrder=1,
            final useBusConnectorOnly=true,
            final mFlow_conNominal=m_flow_nominal[1],
            final VCon=heatPumpParameters.VCon,
            final dpCon_nominal=heatPumpParameters.dpCon_nominal,
            final use_conCap=false,
            final CCon=0,
            final GConOut=0,
            final GConIns=0,
            final mFlow_evaNominal=heatPumpParameters.mEva_flow_nominal,
            final VEva=heatPumpParameters.VEva,
            final dpEva_nominal=heatPumpParameters.dpEva_nominal,
            final use_evaCap=false,
            final CEva=0,
            final GEvaOut=0,
            final GEvaIns=0,
            final tauSenT=heatPumpParameters.TempSensorData.tau,
            final transferHeat=true,
            final allowFlowReversalEva=allowFlowReversal,
            final allowFlowReversalCon=allowFlowReversal,
            final tauHeaTraEva=heatPumpParameters.TempSensorData.tauHeaTra,
            final TAmbEva_nominal=heatPumpParameters.TempSensorData.TAmb,
            final tauHeaTraCon=heatPumpParameters.TempSensorData.tauHeaTra,
            final TAmbCon_nominal=heatPumpParameters.TempSensorData.TAmb,
            final pCon_start=p_start,
            final TCon_start=T_start,
            final pEva_start=Medium_eva.p_default,
            final TEva_start=Medium_eva.T_default,
            final energyDynamics=energyDynamics,
            final show_TPort=show_T,
            redeclare model PerDataMainHP = PerDataMainHP,
            redeclare model PerDataRevHP =
                AixLib.DataBase.Chiller.PerformanceData.LookUpTable2D (final
                  dataTable=AixLib.DataBase.Chiller.EN14511.Vitocal200AWO201()))
                                                         annotation (Placement(
                transformation(
                extent={{22,-27},{-22,27}},
                rotation=270,
                origin={-78,-1})));
          replaceable parameter
            RecordsCollection.HeatPumpBaseDataDefinition
            heatPumpParameters constrainedby
            RecordsCollection.HeatPumpBaseDataDefinition(
              final QGen_flow_nominal=Q_flow_nominal[1], final TOda_nominal=
                TOda_nominal) annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-138,-8},{-120,10}})));
          IBPSA.Fluid.Sources.Boundary_ph bou_sinkAir(final nPorts=1, redeclare
              package Medium =
                       Medium_eva)                               annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={-126,-40})));
          Modelica.Blocks.Logical.Switch switch2 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-178,24})));
          Modelica.Blocks.Sources.BooleanConstant
                                           AirOrSoil(k=heatPumpParameters.useAirSource)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-230,24})));
          Modelica.Blocks.Sources.Constant TSoil(k=TSoilConst)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-232,0})));
          IBPSA.Fluid.Sources.MassFlowSource_T bou_air(
            final m_flow=heatPumpParameters.mEva_flow_nominal,
            final use_T_in=true,
            redeclare package Medium = Medium_eva,
            final use_m_flow_in=false,
            final nPorts=1)
            annotation (Placement(transformation(extent={{-132,20},{-112,40}})));
          replaceable parameter
            RecordsCollection.HeatingRodBaseDataDefinition
            heatingRodParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-66,80},{-54,92}})));
          AixLib.Fluid.HeatExchangers.HeatingRod hea(
            redeclare package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal[1],
            final m_flow_small=1E-4*abs(m_flow_nominal[1]),
            final show_T=show_T,
            final dp_nominal=heatingRodParameters.dp_nominal,
            final tau=30,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final Q_flow_nominal=heatPumpParameters.QSec_flow_nominal,
            final V=heatingRodParameters.V_hr,
            final eta=heatingRodParameters.eta_hr,
            use_countNumSwi=false) if use_heaRod
            annotation (Placement(transformation(extent={{-62,48},{-34,74}})));
          AixLib.Fluid.Interfaces.PassThroughMedium passThroughMediumHRBuf(redeclare
              package Medium = Medium, allowFlowReversal=allowFlowReversal)
            if not use_heaRod
            annotation (Placement(transformation(extent={{-56,28},{-44,40}})));
          IBPSA.Fluid.Sensors.TemperatureTwoPort senTBuiSup(
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            m_flow_nominal=m_flow_nominal[1],
            tau=heatPumpParameters.TempSensorData.tau,
            initType=heatPumpParameters.TempSensorData.initType,
            T_start=T_start,
            final transferHeat=heatPumpParameters.TempSensorData.transferHeat,
            TAmb=heatPumpParameters.TempSensorData.TAmb,
            tauHeaTra=heatPumpParameters.TempSensorData.tauHeaTra)
            "Temperature at supply for building" annotation (Placement(transformation(
                extent={{5,6},{-5,-6}},
                rotation=180,
                origin={-27,46})));
          IBPSA.Fluid.Movers.SpeedControlled_y pumpHeating(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal[1],
              final dp_nominal=dpDem_nominal[1] + dp_nominal[1],
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) if use_pressure annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                origin={52,80})));
          IBPSA.Fluid.Movers.SpeedControlled_y pumpDHW(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal[1],
              final dp_nominal=dpDem_nominal[1] + dp_nominal[1],
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) if use_pressure annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                origin={62,10})));
          Distribution.Components.Valves.ThreeWayValveWithFlowReturn
                                                        threeWayValveWithFlowReturn(
            redeclare package Medium = MediumGen,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final X_start=X_start,
            final C_start=C_start,
            final C_nominal=C_nominal,
            final mSenFac=mSenFac,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
              parameters=threeWayValveParameters)
            annotation (Placement(transformation(extent={{-20,12},{0,32}})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Valves.ThreeWayValve
            threeWayValveParameters constrainedby
            BESMod.HugosProject.Systems.RecordsCollection.Valves.ThreeWayValve(
            final dp_nominal={dpBufHCSto_nominal,dpDHWHCSto_nominal},
            final m_flow_nominal=mSup_flow_nominal[1],
            final fraK=1,
            use_inputFilter=false) annotation (choicesAllMatching=true,
              Placement(transformation(extent={{-34,-16},{-14,4}})));
          Modelica.Blocks.Logical.Switch switchDHW annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={128,-32})));
          Modelica.Blocks.Sources.RealExpression dummyMassFlow(final y=if use_pressure
                 then 1 else m_flow_nominal[1])
            annotation (Placement(transformation(extent={{216,-4},{196,16}},rotation=270,
                origin={146,138})));
          Modelica.Blocks.Sources.RealExpression dummyZero annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={154,-12})));
          Modelica.Blocks.MathBoolean.Or orDHW(nu=2) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={178,-28})));
          Modelica.Blocks.Logical.GreaterThreshold isOnHR_forDHW(threshold=Modelica.Constants.eps)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={208,-12})));
          Modelica.Blocks.Sources.BooleanConstant constRunPump247(final k=
                heatPumpParameters.use_refIne)
            annotation (Placement(transformation(
                extent={{-5,5},{5,-5}},
                rotation=180,
                origin={215,-65})));
          Modelica.Blocks.Logical.Switch switchHeating annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={138,62})));
          Modelica.Blocks.Sources.RealExpression dummyMassFlow1(final y=if
                use_pressure then 1 else m_flow_nominal[1])
            annotation (Placement(transformation(extent={{216,-4},{196,16}},rotation=270,
                origin={156,232})));
          Modelica.Blocks.Sources.RealExpression dummyZero1
                                                           annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={164,82})));
          Modelica.Blocks.MathBoolean.Or orHeating(nu=2) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={188,66})));
          Modelica.Blocks.Logical.GreaterThreshold isOnHR_forHeating(threshold=
                Modelica.Constants.eps) annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={218,82})));
          Modelica.Blocks.Sources.BooleanConstant constRunPump1(final k=
                heatPumpParameters.use_refIne)
            annotation (Placement(transformation(
                extent={{-5,5},{5,-5}},
                rotation=180,
                origin={225,29})));
        equation
          connect(heatPump.port_b2, bou_sinkAir.ports[1]) annotation (Line(points={{-91.5,
                  -23},{-90,-23},{-90,-40},{-116,-40}}, color={0,127,255}));
          connect(sigBusGen.hp_bus, heatPump.sigBus) annotation (Line(
              points={{2,98},{-144,98},{-144,-94},{-86.775,-94},{-86.775,-22.78}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(switch2.u2,AirOrSoil. y)
            annotation (Line(points={{-190,24},{-223.4,24}}, color={255,0,255}));
          connect(TSoil.y,switch2. u3) annotation (Line(points={{-225.4,0},{-206,0},{-206,
                  16},{-190,16}},       color={0,0,127}));
          connect(sigBusGen.hp_bus.TOdaMea, switch2.u1) annotation (Line(
              points={{2,98},{-200,98},{-200,32},{-190,32}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(bou_air.T_in, switch2.y) annotation (Line(points={{-134,34},{-152,34},
                  {-152,24},{-167,24}}, color={0,0,127}));
          connect(bou_air.ports[1], heatPump.port_a2) annotation (Line(points={{-112,30},
                  {-91.5,30},{-91.5,21}}, color={0,127,255}));
          connect(heatPump.port_b1, hea.port_a) annotation (Line(points={{-64.5,21},{-64.5,
                  61},{-62,61}}, color={0,127,255}));
          connect(heatPump.port_b1, passThroughMediumHRBuf.port_a) annotation (Line(
                points={{-64.5,21},{-64.5,34},{-56,34}}, color={0,127,255}));
          connect(hea.port_b, senTBuiSup.port_a) annotation (Line(points={{-34,61},
                  {-34,56},{-32,56},{-32,46}},
                                          color={0,127,255}));
          connect(passThroughMediumHRBuf.port_b, senTBuiSup.port_a) annotation (Line(
                points={{-44,34},{-32,34},{-32,46}},          color={0,127,255}));
          connect(hea.u, sigBusGen.hr_on) annotation (Line(points={{-64.8,68.8},{-75,68.8},
                  {-75,100},{-40,100},{-40,90},{2,90},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(senTBuiSup.port_b, threeWayValveWithFlowReturn.portGen_a)
            annotation (Line(points={{-22,46},{-16,46},{-16,36},{-24,36},{-24,
                  26.4},{-20,26.4}},color={0,127,255}));
          connect(threeWayValveWithFlowReturn.portBui_b, pumpHeating.port_a)
            annotation (Line(points={{0,30},{36,30},{36,80},{42,80}},  color={0,
                  127,255}));
          connect(pumpHeating.port_b, portGenHeat_out[1]) annotation (Line(
                points={{62,80},{100,80}},                 color={0,127,255}));
          connect(portGenHeat_in[1], threeWayValveWithFlowReturn.portBui_a)
            annotation (Line(points={{100,40},{88,40},{88,26},{0,26}},  color={
                  0,127,255}));
          connect(threeWayValveWithFlowReturn.portDHW_b, pumpDHW.port_a)
            annotation (Line(points={{0,18.4},{46,18.4},{46,10},{52,10}},
                color={0,127,255}));
          connect(pumpDHW.port_b, portGenDHW_out) annotation (Line(points={{72,10},
                  {86,10},{86,-20},{100,-20}},       color={0,127,255}));
          connect(portGenDHW_in, threeWayValveWithFlowReturn.portDHW_a)
            annotation (Line(points={{100,-60},{6,-60},{6,14.4},{0,14.4}},
                color={0,127,255}));
          connect(threeWayValveWithFlowReturn.portGen_b, heatPump.port_a1)
            annotation (Line(points={{-20,18.4},{-44,18.4},{-44,-30},{-64.5,-30},
                  {-64.5,-23}}, color={0,127,255}));
          connect(threeWayValveWithFlowReturn.uBuf, sigBusGen.uThrWayVal)
            annotation (Line(points={{-10,34},{-10,74},{2,74},{2,98}}, color={0,
                  0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(dummyZero.y, switchDHW.u3)
            annotation (Line(points={{154,-23},{154,-24},{140,-24}},
                                                                color={0,0,127}));
          connect(dummyMassFlow.y, switchDHW.u1)
            annotation (Line(points={{152,-57},{152,-40},{140,-40}},
                                                                color={0,0,127}));
          connect(orDHW.y, switchDHW.u2)
            annotation (Line(points={{171.1,-28},{140,-28},{140,-32}},
                                                          color={255,0,255}));
          connect(isOnHR_forDHW.y, orDHW.u[1]) annotation (Line(points={{201.4,
                  -12},{184,-12},{184,-26.95}},
                                  color={255,0,255}));
          connect(constRunPump247.y, orDHW.u[2]) annotation (Line(points={{209.5,
                  -65},{192.5,-65},{192.5,-42},{184,-42},{184,-29.05}},
                                              color={255,0,255}));
          connect(switchDHW.y, pumpDHW.y) annotation (Line(points={{117,-32},{
                  112,-32},{112,-34},{62,-34},{62,-2}}, color={0,0,127}));
          connect(dummyZero1.y, switchHeating.u3) annotation (Line(points={{164,
                  71},{164,70},{150,70}}, color={0,0,127}));
          connect(dummyMassFlow1.y, switchHeating.u1) annotation (Line(points={
                  {162,37},{162,54},{150,54}}, color={0,0,127}));
          connect(orHeating.y, switchHeating.u2) annotation (Line(points={{
                  181.1,66},{150,66},{150,62}}, color={255,0,255}));
          connect(isOnHR_forHeating.y, orHeating.u[1]) annotation (Line(points=
                  {{211.4,82},{194,82},{194,67.05}}, color={255,0,255}));
          connect(constRunPump1.y, orHeating.u[2]) annotation (Line(points={{
                  219.5,29},{202.5,29},{202.5,52},{194,52},{194,64.95}}, color=
                  {255,0,255}));
          connect(switchHeating.y, pumpHeating.y) annotation (Line(points={{127,
                  62},{52,62},{52,68}}, color={0,0,127}));
          connect(sigBusGen.hr_on_forHeating, isOnHR_forHeating.u) annotation (
              Line(
              points={{2,98},{2,74},{30,74},{30,94},{118,94},{118,82},{225.2,82}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));

          connect(sigBusGen.hr_on_forDHW, isOnHR_forDHW.u) annotation (Line(
              points={{2,98},{2,68},{38,68},{38,56},{118,56},{118,-12},{215.2,
                  -12}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(sigBusGen.hp_on_forHeating, orHeating.u[3]) annotation (Line(
              points={{2,98},{2,66},{46,66},{46,58},{56,58},{56,66},{194,66}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(sigBusGen.hp_on_forDHW, orDHW.u[3]) annotation (Line(
              points={{2,98},{90,98},{90,-28},{184,-28},{184,-28}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
        end HeatPumpAndHeatingRod_TwoExits;

        model HeatPumpAndHeatingRod_pumpConsumption
          "Bivalent monoenergetic heat pump"
          extends
            BESMod.HugosProject.Systems.Hydraulical.Generation.BaseClasses.PartialGeneration(
            final QLoss_flow_nominal=f_design .* Q_flow_nominal .-
                Q_flow_nominal,
            final dTLoss_nominal=fill(0, nParallelDem),
            dTTra_nominal={if TDem_nominal[i] > 273.15 + 55 then 10 elseif
                TDem_nominal[i] > 44.9 + 273.15 then 8 else 5 for i in 1:
                nParallelDem},
            dp_nominal={heatPump.dpCon_nominal + dpHeaRod_nominal},
            nParallelDem=1);
             parameter Boolean use_pressure=false "=true to use a pump which works on pressure difference";
           parameter Boolean use_heaRod=true "=false to disable the heating rod";
            replaceable model PerDataMainHP =
              AixLib.DataBase.HeatPump.PerformanceData.LookUpTable2D
            constrainedby
            AixLib.DataBase.HeatPump.PerformanceData.BaseClasses.PartialPerformanceData
            annotation (__Dymola_choicesAllMatching=true);
          parameter Modelica.Media.Interfaces.Types.Temperature TSoilConst=273.15 + 10
            "Constant soil temperature for ground source heat pumps";
          replaceable package Medium_eva =
              Modelica.Media.Interfaces.PartialMedium                              constrainedby
            Modelica.Media.Interfaces.PartialMedium annotation (
              __Dymola_choicesAllMatching=true);
          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.HeatPumpBaseDataDefinition
            heatPumpParameters constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.HeatPumpBaseDataDefinition(
              final QGen_flow_nominal=Q_flow_nominal[1], final TOda_nominal=
                TOda_nominal) annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-90,4},{-72,22}})));
          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.HeatingRodBaseDataDefinition
            heatingRodParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{58,42},{70,54}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{4,-46},{18,-34}})));

          AixLib.Fluid.Interfaces.PassThroughMedium passThroughMediumHRBuf(redeclare
              package Medium = Medium, allowFlowReversal=allowFlowReversal)
            if not use_heaRod
            annotation (Placement(transformation(extent={{32,74},{44,86}})));

          BESMod.Components.Pumps.ArtificalPumpIsotermhal artificalPumpIsotermhal(
            redeclare package Medium = Medium,
            final p=p_start,
            final m_flow_nominal=m_flow_nominal[1]) if not
            use_pressure                         annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=180,
                origin={70,-50})));
          Modelica.Blocks.Logical.Switch switch1 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={46,-16})));
          Modelica.Blocks.Sources.RealExpression dummyMassFlow(final y=if use_pressure
                 then 1 else m_flow_nominal[1])
            annotation (Placement(transformation(extent={{84,-6},{64,14}})));
          Modelica.Blocks.Sources.RealExpression dummyZero annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={18,4})));
          Modelica.Blocks.MathBoolean.Or
                                     or1(nu=3)
                                         annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={46,14})));

          AixLib.Fluid.HeatPumps.HeatPump heatPump(
            redeclare package Medium_con = Medium,
            redeclare package Medium_eva = Medium_eva,
            final use_rev=false,
            final use_autoCalc=false,
            final Q_useNominal=0,
            final scalingFactor=heatPumpParameters.scalingFactor,
            final use_refIne=heatPumpParameters.use_refIne,
            final refIneFre_constant=heatPumpParameters.refIneFre_constant,
            final nthOrder=1,
            final useBusConnectorOnly=true,
            final mFlow_conNominal=m_flow_nominal[1],
            final VCon=heatPumpParameters.VCon,
            final dpCon_nominal=heatPumpParameters.dpCon_nominal,
            final use_conCap=false,
            final CCon=0,
            final GConOut=0,
            final GConIns=0,
            final mFlow_evaNominal=heatPumpParameters.mEva_flow_nominal,
            final VEva=heatPumpParameters.VEva,
            final dpEva_nominal=heatPumpParameters.dpEva_nominal,
            final use_evaCap=false,
            final CEva=0,
            final GEvaOut=0,
            final GEvaIns=0,
            final tauSenT=heatPumpParameters.TempSensorData.tau,
            final transferHeat=true,
            final allowFlowReversalEva=allowFlowReversal,
            final allowFlowReversalCon=allowFlowReversal,
            final tauHeaTraEva=heatPumpParameters.TempSensorData.tauHeaTra,
            final TAmbEva_nominal=heatPumpParameters.TempSensorData.TAmb,
            final tauHeaTraCon=heatPumpParameters.TempSensorData.tauHeaTra,
            final TAmbCon_nominal=heatPumpParameters.TempSensorData.TAmb,
            final pCon_start=p_start,
            final TCon_start=T_start,
            final pEva_start=Medium_eva.p_default,
            final TEva_start=Medium_eva.T_default,
            final energyDynamics=energyDynamics,
            final show_TPort=show_T,
            redeclare model PerDataMainHP = PerDataMainHP,
            redeclare model PerDataRevHP =
                AixLib.DataBase.Chiller.PerformanceData.LookUpTable2D (final dataTable=
                    AixLib.DataBase.Chiller.EN14511.Vitocal200AWO201()))
                                                         annotation (Placement(
                transformation(
                extent={{22,-27},{-22,27}},
                rotation=270,
                origin={-44,15})));

          IBPSA.Fluid.Sources.Boundary_ph bou_sinkAir(final nPorts=1, redeclare
              package
              Medium =         Medium_eva)                       annotation (Placement(
                transformation(
                extent={{10,-10},{-10,10}},
                rotation=180,
                origin={-90,-22})));
          IBPSA.Fluid.Sources.MassFlowSource_T bou_air(
            final m_flow=heatPumpParameters.mEva_flow_nominal,
            final use_T_in=true,
            redeclare package Medium = Medium_eva,
            final use_m_flow_in=false,
            final nPorts=1)
            annotation (Placement(transformation(extent={{-100,42},{-80,62}})));

          Modelica.Blocks.Logical.GreaterThreshold isOnHP(threshold=Modelica.Constants.eps)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={16,38})));

          Modelica.Blocks.Logical.Switch switch2 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-124,56})));
          Modelica.Blocks.Sources.BooleanConstant
                                           AirOrSoil(k=heatPumpParameters.useAirSource)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-164,56})));
          Modelica.Blocks.Logical.GreaterThreshold isOnHR(threshold=Modelica.Constants.eps)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=270,
                origin={40,36})));

          Utilities.KPIs.InputKPICalculator KPIWel(
            integralUnit="J",
            calc_singleOnTime=true,
            calc_integral=true,
            calc_movAve=false,
            unit="W")
            annotation (Placement(transformation(extent={{-78,-106},{-66,-84}})));
          Utilities.KPIs.InputKPICalculator KPIWHRel(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=true,
            calc_integral=true,
            calc_movAve=false) if use_heaRod
            annotation (Placement(transformation(extent={{86,86},{98,108}})));

          Modelica.Blocks.Sources.BooleanConstant constRunPump247(final k=
                heatPumpParameters.use_refIne)
            annotation (Placement(transformation(
                extent={{-5,5},{5,-5}},
                rotation=180,
                origin={79,27})));
          IBPSA.Fluid.Movers.SpeedControlled_y pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal[1],
              final dp_nominal=dpDem_nominal[1] + dp_nominal[1],
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) if use_pressure annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=180,
                origin={16,-68})));
          AixLib.Fluid.HeatExchangers.HeatingRod hea(
            redeclare package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal[1],
            final m_flow_small=1E-4*abs(m_flow_nominal[1]),
            final show_T=show_T,
            final dp_nominal=heatingRodParameters.dp_nominal,
            final tau=30,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final Q_flow_nominal=heatPumpParameters.QSec_flow_nominal,
            final V=heatingRodParameters.V_hr,
            final eta=heatingRodParameters.eta_hr,
            use_countNumSwi=false) if use_heaRod
            annotation (Placement(transformation(extent={{22,64},{54,96}})));

          Modelica.Blocks.Sources.Constant TSoil(k=TSoilConst)
            annotation (Placement(transformation(
                extent={{-6,-6},{6,6}},
                rotation=0,
                origin={-164,32})));

        Utilities.KPIs.InternalKPICalculator KPIQHP(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=false,                                        calc_integral=true,
            calc_totalOnTime=false,
            calc_numSwi=false,                                                                  calc_movAve=false,
            calc_intBelThres=false,                                                                                y=heatPump.con.QFlow_in)
          annotation (Placement(transformation(extent={{-76,-124},{-64,-102}})));
        Utilities.KPIs.InternalKPICalculator KPIQHR(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=false,                                        calc_integral=true,
            calc_totalOnTime=false,
            calc_numSwi=false,                                                                  calc_movAve=false,
            calc_intBelThres=false,                                                                                y=hea.vol.heatPort.Q_flow)
            if use_heaRod
          annotation (Placement(transformation(extent={{-76,-142},{-64,-120}})));

          IBPSA.Fluid.Sources.Boundary_pT bouPumpHP(
            redeclare package Medium = Medium,
            final p=p_start,
            final T=T_start,
            final nPorts=1) if use_pressure annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={52,-86})));

          IBPSA.Fluid.Sensors.TemperatureTwoPort senTBuiSup(
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            m_flow_nominal=m_flow_nominal[1],
            tau=heatPumpParameters.TempSensorData.tau,
            initType=heatPumpParameters.TempSensorData.initType,
            T_start=T_start,
            final transferHeat=heatPumpParameters.TempSensorData.transferHeat,
            TAmb=heatPumpParameters.TempSensorData.TAmb,
            tauHeaTra=heatPumpParameters.TempSensorData.tauHeaTra)
            "Temperature at supply for building" annotation (Placement(transformation(
                extent={{5,6},{-5,-6}},
                rotation=180,
                origin={71,80})));
          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=180,
                origin={100,-78})));
          Modelica.Blocks.Math.MultiSum multiSum(nu=if (use_pressure and use_heaRod) then 3 elseif use_pressure and not use_heaRod then 2 elseif use_heaRod and not use_pressure then 2 else 1) annotation (Placement(
                transformation(
                extent={{-6,-6},{6,6}},
                rotation=180,
                origin={130,-82})));
          Utilities.KPIs.InputKPICalculator KPIWPump_el(
            integralUnit="J",
            calc_singleOnTime=true,
            calc_integral=true,
            calc_movAve=false,
            unit="W")
            annotation (Placement(transformation(extent={{-76,-160},{-64,-138}})));
        protected
          parameter Modelica.Units.SI.PressureDifference dpHeaRod_nominal=if use_heaRod
               then heatingRodParameters.dp_nominal else 0;

        equation
          connect(KPIQHP.KPIBus, outBusGen.QHP_flow) annotation (Line(points={{-63.88,-113},{0,-113},{0,-100}}, color={255,204,51}, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}, horizontalAlignment=TextAlignment.Left));
        connect(KPIQHR.KPIBus, outBusGen.QHR_flow) annotation (Line(points={{-63.88,-131},{0,-131},{0,-100}}, color={255,204,51}, thickness=0.5), Text(string="%second", index=1, extent={{6,3},{6,3}}, horizontalAlignment=TextAlignment.Left));

          connect(dummyZero.y,switch1. u3)
            annotation (Line(points={{29,4},{38,4},{38,-4}},    color={0,0,127}));
          connect(dummyMassFlow.y,switch1. u1)
            annotation (Line(points={{63,4},{54,4},{54,-4}}, color={0,0,127}));
          connect(or1.y,switch1. u2)
            annotation (Line(points={{46,7.1},{46,-4}},
                                                     color={255,0,255}));
          connect(switch1.y, artificalPumpIsotermhal.m_flow_in)
            annotation (Line(points={{46,-27},{46,-38.4},{70,-38.4}},
                                                               color={0,0,127},
              pattern=LinePattern.Dash));

          connect(artificalPumpIsotermhal.port_b, heatPump.port_a1) annotation (Line(
                points={{60,-50},{-30.5,-50},{-30.5,-7}}, color={0,127,255},
              pattern=LinePattern.Dash));
          connect(bou_air.ports[1], heatPump.port_a2) annotation (Line(
              points={{-80,52},{-57.5,52},{-57.5,37}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(heatPump.port_b2, bou_sinkAir.ports[1]) annotation (Line(
              points={{-57.5,-7},{-58,-7},{-58,-22},{-80,-22}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(sigBusGen.hp_bus, heatPump.sigBus) annotation (Line(
              points={{2,98},{-132,98},{-132,-62},{-52.775,-62},{-52.775,-6.78}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));

          connect(sigBusGen.hp_bus.nSet, isOnHP.u) annotation (Line(
              points={{2,98},{2,58},{16,58},{16,45.2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(bou_air.T_in, switch2.y)
            annotation (Line(points={{-102,56},{-113,56}}, color={0,0,127}));
          connect(sigBusGen.hp_bus.TOdaMea, switch2.u1) annotation (Line(
              points={{2,98},{-150,98},{-150,64},{-136,64}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(switch2.u2, AirOrSoil.y)
            annotation (Line(points={{-136,56},{-157.4,56}}, color={255,0,255}));
          connect(hea.u, sigBusGen.hr_on) annotation (Line(points={{18.8,89.6},{18.8,74},
                  {2,74},{2,98}},        color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(sigBusGen.hr_on, isOnHR.u) annotation (Line(
              points={{2,98},{2,60},{46,60},{46,43.2},{40,43.2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(portGen_in[1], artificalPumpIsotermhal.port_a) annotation (Line(
                points={{100,-2},{102,-2},{102,-50},{80,-50}}, color={0,127,255},
              pattern=LinePattern.Dash));
          connect(KPIWel.u, sigBusGen.hp_bus.PelMea) annotation (Line(points={{-79.32,
                  -95},{-110,-95},{-110,98},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(KPIWel.KPIBus, outBusGen.WHPel) annotation (Line(
              points={{-65.88,-95},{0,-95},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(hea.Pel, KPIWHRel.u) annotation (Line(points={{55.6,89.6},{54,89.6},{
                  54,100},{76,100},{76,97},{84.68,97}},
                                            color={0,0,127}));
          connect(KPIWHRel.KPIBus, outBusGen.WHRel) annotation (Line(
              points={{98.12,97},{116,97},{116,-108},{0,-108},{0,-100}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(isOnHR.y, or1.u[1]) annotation (Line(points={{40,29.4},{40,26},{44.6,26},
                  {44.6,20}}, color={255,0,255}));
          connect(isOnHP.y, or1.u[2]) annotation (Line(points={{16,31.4},{16,24},{46,24},
                  {46,20}}, color={255,0,255}));
          connect(constRunPump247.y, or1.u[3]) annotation (Line(points={{73.5,27},{48.1,
                  27},{48.1,20},{47.4,20}}, color={255,0,255}));
          connect(pump.port_a, portGen_in[1]) annotation (Line(
              points={{26,-68},{100,-68},{100,-2}},
              color={0,127,255},
              pattern=LinePattern.Dash));

          connect(passThroughMediumHRBuf.port_a, heatPump.port_b1) annotation (Line(
                points={{32,80},{-30,80},{-30,78},{-30.5,78},{-30.5,37}},
                                                        color={0,127,255}));
          connect(pump.port_b, heatPump.port_a1) annotation (Line(
              points={{6,-68},{-30.5,-68},{-30.5,-7}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(TSoil.y, switch2.u3) annotation (Line(points={{-157.4,32},{-146,32},
                  {-146,48},{-136,48}}, color={0,0,127}));
          connect(heatPump.port_b1, hea.port_a) annotation (Line(points={{-30.5,
                  37},{-30.5,80},{22,80}},
                                      color={0,127,255}));
          connect(bouPumpHP.ports[1], pump.port_a) annotation (Line(
              points={{52,-76},{52,-68},{26,-68}},
              color={0,127,255},
              pattern=LinePattern.Dash));
          connect(switch1.y, pump.y) annotation (Line(points={{46,-27},{46,-38},{16,-38},
                  {16,-56}}, color={0,0,127}));
          connect(hea.port_b, passThroughMediumHRBuf.port_a)
            annotation (Line(points={{54,80},{32,80}}, color={0,127,255}));
          connect(senTBuiSup.T, sigBusGen.THeaRodMea) annotation (Line(points={{71,86.6},
                  {71,98},{2,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(senTBuiSup.port_b, portGen_out[1])
            annotation (Line(points={{76,80},{100,80}}, color={0,127,255}));
          connect(passThroughMediumHRBuf.port_a, hea.port_a)
            annotation (Line(points={{32,80},{22,80}}, color={0,127,255}));
          connect(passThroughMediumHRBuf.port_b, senTBuiSup.port_a)
            annotation (Line(points={{44,80},{66,80}}, color={0,127,255}));
          connect(hea.port_b, senTBuiSup.port_a)
            annotation (Line(points={{54,80},{66,80}}, color={0,127,255}));

          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{89.8,-78.2},{72,-78.2},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(multiSum.y, realToElecCon.PEleLoa)
            annotation (Line(points={{122.98,-82},{112,-82}}, color={0,0,127}));
          if use_heaRod and use_pressure then
            connect(multiSum.u[2], hea.Pel) annotation (Line(points={{136,-82},{142,-82},
                  {142,89.6},{55.6,89.6}},color={0,0,127}));
            connect(multiSum.u[1], sigBusGen.hp_bus.PelMea) annotation (Line(points={{136,
                  -82},{140,-82},{140,96},{72,96},{72,98},{2,98}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
            connect(multiSum.u[3], pump.P) annotation (Line(points={{136,-82},{140,-82},{
                  140,-86},{144,-86},{144,-59},{5,-59}},
                                                     color={0,0,127}));
          elseif use_heaRod then
            connect(multiSum.u[2], hea.Pel) annotation (Line(points={{136,-82},{142,-82},
                  {142,89.6},{55.6,89.6}},color={0,0,127}));
            connect(multiSum.u[1], sigBusGen.hp_bus.PelMea) annotation (Line(points={{136,
                  -82},{140,-82},{140,96},{72,96},{72,98},{2,98}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          elseif use_pressure then
            connect(multiSum.u[2], pump.P) annotation (Line(points={{136,-82},{140,-82},{
                  140,-86},{144,-86},{144,-59},{5,-59}},
                                                     color={0,0,127}));
            connect(multiSum.u[1], sigBusGen.hp_bus.PelMea) annotation (Line(points={{136,
                  -82},{140,-82},{140,96},{72,96},{72,98},{2,98}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          else
            connect(multiSum.u[1], sigBusGen.hp_bus.PelMea) annotation (Line(points={{136,
                  -82},{140,-82},{140,96},{72,96},{72,98},{2,98}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          end if;
          connect(pump.P, KPIWPump_el.u) annotation (Line(points={{5,-59},{-50,-59},{-50,
                  -80},{-86,-80},{-86,-120},{-77.32,-120},{-77.32,-149}}, color={0,0,127}));
          connect(outBusGen.WPump_el, KPIWPump_el.KPIBus) annotation (Line(
              points={{0,-100},{0,-149},{-63.88,-149}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));

        end HeatPumpAndHeatingRod_pumpConsumption;
      end Generation;

      package Transfer "Models for heat transfer"
        extends BESMod.Utilities.Icons.SystemIcon;

        model RadiatorTransferSystem
          "Subsystem using a radiator and ideal thermostatic valves"
          extends BaseClasses.PartialTransfer(
            final QLoss_flow_nominal=f_design .* Q_flow_nominal .- Q_flow_nominal,
            final dTLoss_nominal=fill(0, nParallelDem),
            final nParallelSup=1,
            final dp_nominal= fill(0, nParallelDem));

          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal .* f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal - dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            each final dp_nominal=0,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator" annotation (
              Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={-13,-29})));

          IBPSA.Fluid.FixedResistances.PressureDrop res1[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=1,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-38.5,39.5})));
          Modelica.Blocks.Math.Gain gain[nParallelDem](final k=rad.m_flow_nominal)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={8,34})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));
          Utilities.KPIs.InternalKPICalculator internalKPICalculator(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=false,
            calc_totalOnTime=false,
            calc_numSwi=false,
            calc_movAve=false,
            y=sum(-heatPortRad.Q_flow) + sum(-heatPortCon.Q_flow))
            annotation (Placement(transformation(extent={{-32,-96},{-12,-60}})));
          Utilities.KPIs.InputKPICalculator inputKPICalculator[nParallelDem](
            unit=fill("", nParallelDem),
            integralUnit=fill("s", nParallelDem),
            each calc_singleOnTime=false,
            each calc_integral=false,
            each calc_totalOnTime=false,
            each calc_numSwi=false,
            each calc_movAve=false)
            annotation (Placement(transformation(extent={{-32,-124},{-12,-88}})));
          IBPSA.Fluid.Movers.FlowControlled_m_flow pumpFix_m_flow[nParallelDem](
            redeclare final package Medium = Medium,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final T_start=T_start,
            each final X_start=X_start,
            each final C_start=C_start,
            each final C_nominal=C_nominal,
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            final m_flow_small=1E-4*abs(m_flow_nominal),
            each final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              each final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal,
              final dp_nominal=dp_nominal,
              each final rho=rho,
              each final V_flowCurve=pumpData.V_flowCurve,
              each final dpCurve=pumpData.dpCurve),
            each final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            each final addPowerToMedium=pumpData.addPowerToMedium,
            each final nominalValuesDefineDefaultPressureCurve=true,
            each final tau=pumpData.tau,
            each final use_inputFilter=false,
            final m_flow_start=m_flow_nominal)             annotation (Placement(
                transformation(
                extent={{-11,-11},{11,11}},
                rotation=270,
                origin={-15,9})));
          replaceable
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-98,78},{-78,98}})));
          IBPSA.Fluid.Sources.Boundary_pT bouPumpHP[nParallelDem](
            redeclare package Medium = Medium,
            each final p=p_start,
            each final T=T_start,
            each final nPorts=1) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={-66,10})));
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{30,-106},{50,-86}})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{-5.08,-31.2},
                  {40,-31.2},{40,-40},{100,-40}}, color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{-5.08,-26.8},
                  {-5.08,-26},{40,-26},{40,40},{100,40}},  color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(rad[i].port_b, portTra_out[1]) annotation (Line(points={{-13,-40},{-13,-42},
                  {-100,-42}}, color={0,127,255}));
           connect(portTra_in[1], res1[i].port_a) annotation (Line(points={{-100,38},{-76,38},
                  {-76,39.5},{-51,39.5}}, color={0,127,255}));
          end for;

          connect(internalKPICalculator.KPIBus, outBusTra.Q_flow) annotation (Line(
              points={{-11.8,-78},{0,-78},{0,-104}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculator.KPIBus, outBusTra.openings) annotation (Line(
              points={{-11.8,-106},{-6,-106},{-6,-104},{0,-104}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(inputKPICalculator.u, traControlBus.opening) annotation (Line(points=
                  {{-34.2,-106},{-36,-106},{-36,-62},{26,-62},{26,90},{0,90},{0,100}},
                color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(gain.u, traControlBus.opening) annotation (Line(points={{8,46},{8,90},
                  {0,90},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(res1.port_b, pumpFix_m_flow.port_a) annotation (Line(points={{-26,39.5},
                  {-26,38},{-15,38},{-15,20}}, color={0,127,255}));
          connect(pumpFix_m_flow.port_b, rad.port_a) annotation (Line(points={{-15,-2},{
                  -15,-18},{-13,-18}}, color={0,127,255}));
          connect(gain.y, pumpFix_m_flow.m_flow_in) annotation (Line(points={{8,23},{6,23},
                  {6,8},{-1.8,8},{-1.8,9}}, color={0,0,127}));
          connect(bouPumpHP.ports[1], pumpFix_m_flow.port_a) annotation (Line(points={{-66,20},
                  {-66,30},{-16,30},{-16,26},{-15,26},{-15,20}},
                                                   color={0,127,255}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{50,-96},{72,-96},{72,-98}},
              color={0,0,0},
              thickness=1));
        end RadiatorTransferSystem;

        model UFHTransferSystem
          extends BaseClasses.PartialTransfer(final nParallelSup=1, final dp_nominal=fill(0, nParallelDem));

          IBPSA.Fluid.FixedResistances.PressureDrop res1[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=1,
            final m_flow_nominal=m_flow_nominal)     "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-10.5,-12},{10.5,12}},
                rotation=0,
                origin={-64.5,38})));

          Modelica.Blocks.Math.Gain gain[nParallelDem](k=m_flow_nominal)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-28,72})));
          BESMod.Components.UFH.PanelHeating panelHeating[
            nParallelDem](
            redeclare package Medium = Medium,
            final floorHeatingType=floorHeatingType,
            each final dis=5,
            final A=UFHParameters.area,
            final T0=TDem_nominal,
            each calcMethod=1) annotation (Placement(transformation(
                extent={{-23,-10},{23,10}},
                rotation=270,
                origin={5,-4})));

          Modelica.Thermal.HeatTransfer.Sources.FixedTemperature
                                                              fixedTemperature
                                                                           [nParallelDem](final T=
                UFHParameters.T_floor)
                       annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-90,10})));
          Modelica.Thermal.HeatTransfer.Sensors.HeatFlowSensor heatFlowSensor
                                                                           [nParallelDem]
                       annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-46,-6})));
          Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow fixedHeatFlow[nParallelDem](final
              Q_flow=0)
                       annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-92,-20})));
          Modelica.Thermal.HeatTransfer.Components.HeatCapacitor
                                                              heatCapacitor[nParallelDem](C=100)
                       annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-114,2})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.UFHData
            UFHParameters constrainedby RecordsCollection.UFHData(nZones=
                nParallelDem, area=AZone) annotation (choicesAllMatching=true,
              Placement(transformation(extent={{22,12},{42,32}})));

          Utilities.KPIs.InputKPICalculator inputKPICalculatorOpening[nParallelDem](
            unit=fill("", nParallelDem),
            integralUnit=fill("s", nParallelDem),
            calc_singleOnTime=false,
            calc_integral=false,
            calc_totalOnTime=false,
            calc_numSwi=false,
            calc_movAve=false)
            annotation (Placement(transformation(extent={{-46,-94},{-26,-58}})));
          Utilities.KPIs.InputKPICalculator inputKPICalculatorLossUFH[nParallelDem](
            unit=fill("W", nParallelDem),
            integralUnit=fill("J", nParallelDem),
            calc_singleOnTime=false,
            calc_integral=false,
            calc_totalOnTime=false,
            calc_numSwi=false,
            calc_movAve=false)
            annotation (Placement(transformation(extent={{-46,-120},{-26,-84}})));
          IBPSA.Fluid.Sources.Boundary_pT bouPumpHP[nParallelDem](
            redeclare package Medium = Medium,
            each final p=p_start,
            each final T=T_start,
            each final nPorts=1) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-68,58})));
          IBPSA.Fluid.Movers.FlowControlled_m_flow pumpFix_m_flow[nParallelDem](
            redeclare package Medium = Medium,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final T_start=T_start,
            each final X_start=X_start,
            each final C_start=C_start,
            each final C_nominal=C_nominal,
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            final m_flow_small=1E-4*abs(m_flow_nominal),
            each final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              each final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal,
              final dp_nominal=dp_nominal,
              each final rho=rho,
              each final V_flowCurve=pumpData.V_flowCurve,
              each final dpCurve=pumpData.dpCurve),
            each final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            each final addPowerToMedium=pumpData.addPowerToMedium,
            each final nominalValuesDefineDefaultPressureCurve=true,
            each final tau=pumpData.tau,
            each final use_inputFilter=false,
            final m_flow_start=m_flow_nominal)             annotation (Placement(
                transformation(
                extent={{-11,-11},{11,11}},
                rotation=0,
                origin={-23,37})));
          replaceable
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-98,78},{-78,98}})));
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{32,-108},{52,-88}})));
        protected
          parameter BESMod.Components.UFH.ActiveWallBaseDataDefinition floorHeatingType[nParallelDem]={BESMod.Components.UFH.ActiveWallBaseDataDefinition(
                Temp_nom=Modelica.Units.Conversions.from_degC(  {TSup_nominal[i],
                  TSup_nominal[i]-dTTra_nominal[i],TDem_nominal[i]}),
                q_dot_nom=Q_flow_nominal[i] / UFHParameters.area[i],
                k_isolation=UFHParameters.k_top[i] + UFHParameters.k_down[i],
                k_top=UFHParameters.k_top[i],
                k_down=UFHParameters.k_down[i],
                VolumeWaterPerMeter=0,
                eps=0.9,
                C_ActivatedElement=UFHParameters.C_ActivatedElement[i],
                c_top_ratio=UFHParameters.c_top_ratio[i],
                PressureDropExponent=0,
                PressureDropCoefficient=0,
                diameter=UFHParameters.diameter) for i in 1:nParallelDem};

        equation

          for i in 1:nParallelDem loop
            connect(res1[i].port_a, portTra_in[1])
            annotation (Line(points={{-75,38},{-100,38}}, color={0,127,255}));
            connect(panelHeating[i].port_b, portTra_out[1]) annotation (Line(points={{3.33333,
                    -27},{3.33333,-42},{-100,-42}},
                                                  color={0,127,255}));
          if UFHParameters.is_groundFloor[i] then
           connect(fixedHeatFlow[i].port, heatCapacitor[i].port) annotation (Line(points=
                 {{-82,-20},{-76,-20},{-76,-8},{-114,-8}}, color={191,0,0}));
           connect(fixedTemperature[i].port, heatFlowSensor[i].port_a) annotation (Line(
              points={{-80,10},{-64,10},{-64,-6},{-56,-6}},
              color={191,0,0},
              pattern=LinePattern.Dash));
          else
           connect(fixedHeatFlow[i].port, heatFlowSensor[i].port_a) annotation (Line(
              points={{-82,-20},{-66,-20},{-66,-6},{-56,-6}},
              color={191,0,0},
              pattern=LinePattern.Dash));
           connect(fixedTemperature[i].port, heatCapacitor[i].port) annotation (Line(
              points={{-80,10},{-80,-8},{-114,-8}},
              color={191,0,0},
              pattern=LinePattern.Dash));
          end if;
          end for;

          connect(panelHeating.thermConv, heatPortCon) annotation (Line(points={{16.6667,
                  -7.22},{52,-7.22},{52,42},{100,42},{100,40}}, color={191,0,0}));
          connect(panelHeating.starRad, heatPortRad) annotation (Line(points={{16,-1.24},
                  {40,-1.24},{40,-40},{100,-40}}, color={0,0,0}));

          connect(heatFlowSensor.port_b, panelHeating.ThermDown) annotation (Line(
                points={{-36,-6},{-22,-6},{-22,-5.84},{-6,-5.84}}, color={191,0,0}));

          connect(gain.u, traControlBus.opening) annotation (Line(points={{-28,84},{-28,
                  100},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(gain.y, inputKPICalculatorOpening.u) annotation (Line(points={{-28,61},
                  {-28,54},{-46,54},{-46,8},{-60,8},{-60,-76},{-48.2,-76}}, color={0,0,
                  127}));
          connect(inputKPICalculatorOpening.KPIBus, outBusTra.opening) annotation (Line(
              points={{-25.8,-76},{0,-76},{0,-104}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(heatFlowSensor.Q_flow, inputKPICalculatorLossUFH.u) annotation (Line(
                points={{-46,-17},{-46,-22},{-62,-22},{-62,-102},{-48.2,-102}}, color={
                  0,0,127}));
          connect(inputKPICalculatorLossUFH.KPIBus, outBusTra.QLossUFH) annotation (
              Line(
              points={{-25.8,-102},{-14,-102},{-14,-100},{0,-100},{0,-104}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(bouPumpHP.ports[1],pumpFix_m_flow. port_a) annotation (Line(points={{-58,58},
                  {-48,58},{-48,37},{-34,37}},     color={0,127,255}));
          connect(res1.port_b, pumpFix_m_flow.port_a) annotation (Line(points={{-54,38},
                  {-44,38},{-44,37},{-34,37}}, color={0,127,255}));
          connect(pumpFix_m_flow.port_b, panelHeating.port_a) annotation (Line(points={{
                  -12,37},{-6,37},{-6,38},{3.33333,38},{3.33333,19}}, color={0,127,255}));
          connect(gain.y, pumpFix_m_flow.m_flow_in) annotation (Line(points={{-28,61},{-28,
                  56},{-23,56},{-23,50.2}}, color={0,0,127}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{52,-98},{72,-98}},
              color={0,0,0},
              thickness=1));
        end UFHTransferSystem;

        model RadiatorPressureBased "Pressure Based transfer system"
          extends BaseClasses.PartialTransfer(final dp_nominal=rad.dp_nominal .+ val.dpValve_nominal .+ res.dp_nominal .+ val.dpFixed_nominal,
                                              final nParallelSup=1);

          replaceable parameter RecordsCollection.TransferDataBaseDefinition
            transferDataBaseDefinition constrainedby
            RecordsCollection.TransferDataBaseDefinition(
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final nZones=nParallelDem,
            final AFloor=ABui,
            final heiBui=hBui)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-62,-98},{-42,-78}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-98,78},{-72,100}})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));
          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal .- dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            final dp_nominal=transferDataBaseDefinition.dpRad_nominal,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator"
            annotation (Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={-13,-25})));

          IBPSA.Fluid.FixedResistances.PressureDrop res[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=transferDataBaseDefinition.dpHeaDistr_nominal,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-34.5,37.5})));
          IBPSA.Fluid.Actuators.Valves.TwoWayLinear val[nParallelDem](
            redeclare package Medium = Medium,
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
            final dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            each final use_inputFilter=false,
            final dpFixed_nominal=transferDataBaseDefinition.dpHeaSysPreValve_nominal,
            each final l=transferDataBaseDefinition.leakageOpening)
                                                    annotation (Placement(transformation(
                extent={{-10,-11},{10,11}},
                rotation=270,
                origin={-12,1})));

          IBPSA.Fluid.MixingVolumes.MixingVolume vol(
            redeclare package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final mSenFac=1,
            final m_flow_nominal=sum(rad.m_flow_nominal),
            final m_flow_small=1E-4*abs(sum(rad.m_flow_nominal)),
            final allowFlowReversal=allowFlowReversal,
            final V(displayUnit="l") = transferDataBaseDefinition.vol,
            final use_C_flow=false,
            nPorts=1 + nParallelDem) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-58,18})));
          IBPSA.Fluid.Movers.SpeedControlled_y     pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=sum(m_flow_nominal),
              final dp_nominal=1/sum({1/dp_nominal[i] for i in 1:nParallelDem}),
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,38})));

          Modelica.Blocks.Sources.Constant m_flow1(k=1)   annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-48,68})));

          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{34,-94},{54,-74}})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{-5.08,-27.2},
                  {40,-27.2},{40,-40},{100,-40}}, color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{-5.08,-22.8},
                  {-5.08,-26},{40,-26},{40,40},{100,40}},  color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(rad[i].port_b, portTra_out[1]) annotation (Line(points={{-13,-36},
                    {-13,-42},{-100,-42}},
                               color={0,127,255}));
            connect(res[i].port_a, vol.ports[i + 1]) annotation (Line(points={{-47,37.5},
                    {-56,37.5},{-56,28},{-58,28}}, color={0,127,255}));
          end for;

          connect(val.port_b, rad.port_a) annotation (Line(points={{-12,-9},{-12,-13.5},
                  {-13,-13.5},{-13,-14}}, color={0,127,255}));
          connect(res.port_b, val.port_a) annotation (Line(points={{-22,37.5},{
                  -12,37.5},{-12,11}},
                             color={0,127,255}));
          connect(portTra_in[1],pump.port_a)
            annotation (Line(points={{-100,38},{-84,38}}, color={0,127,255}));
          connect(pump.port_b, vol.ports[1]) annotation (Line(points={{-64,38},{-62,38},
                  {-62,28},{-58,28}}, color={0,127,255}));

          connect(m_flow1.y,pump. y)
            annotation (Line(points={{-59,68},{-74,68},{-74,50}}, color={0,0,127}));
          connect(val.y, traControlBus.opening) annotation (Line(points={{1.2,1},{8,1},{
                  8,74},{0,74},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{54.2,-83.8},{54.2,-84},{72,-84},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(realToElecCon.PEleLoa, pump.P) annotation (Line(points={{32,-80},{
                  22,-80},{22,47},{-63,47}}, color={0,0,127}));
        end RadiatorPressureBased;

        model NoHeatTransfer "No heat tranfser to building"
          extends BaseClasses.PartialTransfer(
            dp_nominal=fill(0, nParallelDem),
            dTTra_nominal=fill(0, nParallelDem),
            TSup_nominal=fill(TDem_nominal[1], nParallelDem));
          Modelica.Thermal.HeatTransfer.Sources.FixedHeatFlow fixedHeatFlow[
            nParallelDem](each final Q_flow=0)
            annotation (Placement(transformation(extent={{54,-10},{74,10}})));
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{40,-80},{60,-60}})));
        equation
          connect(portTra_in, portTra_out) annotation (Line(points={{-100,38},{-74,38},
                  {-74,-42},{-100,-42}}, color={0,127,255}));
          connect(fixedHeatFlow.port, heatPortCon)
            annotation (Line(points={{74,0},{100,0},{100,40}}, color={191,0,0}));
          connect(fixedHeatFlow.port, heatPortRad)
            annotation (Line(points={{74,0},{100,0},{100,-40}}, color={191,0,0}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{60,-70},{72,-70},{72,-98}},
              color={0,0,0},
              thickness=1));
        end NoHeatTransfer;

        package Tests
          extends Modelica.Icons.ExamplesPackage;
          model TestIdealValveRadiatorSystem
            extends
              BESMod.HugosProject.Systems.Hydraulical.Transfer.Tests.PartialTest(
                redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorTransferSystem
                transfer(redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                  radParameters, redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                  pumpData));

          end TestIdealValveRadiatorSystem;

          model TestPressureBasedSystem
            extends
              BESMod.HugosProject.Systems.Hydraulical.Transfer.Tests.PartialTest(
                redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorPressureBased
                transfer(
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                  transferDataBaseDefinition,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                  pumpData,
                redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                  radParameters));

          end TestPressureBasedSystem;

          model TestUnderfloorHeating
            extends
              BESMod.HugosProject.Systems.Hydraulical.Transfer.Tests.PartialTest(
                redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.UFHTransferSystem
                transfer(redeclare
                  BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.DefaultUFHData
                  UFHParameters, redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                  pumpData));

          end TestUnderfloorHeating;

          partial model PartialTest
            extends BESMod.HugosProject.Systems.BaseClasses.PartialBESExample;
            replaceable
              BESMod.HugosProject.Systems.Hydraulical.Transfer.BaseClasses.PartialTransfer
              transfer constrainedby BaseClasses.PartialTransfer(
              redeclare package Medium = IBPSA.Media.Water,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              nParallelDem=1,
              TSup_nominal=systemParameters.THydSup_nominal,
              dTTra_nominal={10},
              m_flow_nominal={0.317},
              Q_flow_nominal=systemParameters.QBui_flow_nominal,
              TOda_nominal=systemParameters.TOda_nominal,
              TDem_nominal=systemParameters.TSetZone_nominal,
              TAmb=systemParameters.TAmbHyd,
              dpSup_nominal=fill(0, transfer.nParallelDem),
              AZone={100},
              hZone={2.6},
              ABui=100,
              hBui=2.6) annotation (choicesAllMatching=true, Placement(
                  transformation(extent={{-32,-26},{36,44}})));
            Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature
                                                                   prescribedTemperature(T(
                  displayUnit="K"))
                         annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={64,0})));

            Modelica.Blocks.Sources.Sine TRoom(
              amplitude=1,
              f=1/3600,
              offset=293.15 - 1) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=180,
                  origin={94,0})));
            IBPSA.Fluid.MixingVolumes.MixingVolume vol[transfer.nParallelSup](
              redeclare package Medium = IBPSA.Media.Water,
              each final energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              each final m_flow_nominal=sum(transfer.m_flow_nominal),
              each final V=1,
              each final nPorts=3) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-76,8})));

            IBPSA.Fluid.Sources.Boundary_pT bou1[transfer.nParallelSup](
              redeclare package Medium = IBPSA.Media.Water,
              each final p=200000,
              each final nPorts=1)            annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-70,-24})));
            Interfaces.TransferControlBus traControlBus
              annotation (Placement(transformation(extent={{-14,56},{6,76}})));
            Modelica.Blocks.Sources.Constant constOpening[systemParameters.nZones](each final
                      k=1) annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-86,70})));
          equation
            connect(prescribedTemperature.port, transfer.heatPortCon[1]) annotation (Line(
                  points={{54,1.33227e-15},{50,1.33227e-15},{50,23},{36,23}}, color={191,0,
                    0}));
            connect(prescribedTemperature.port, transfer.heatPortRad[1])
              annotation (Line(points={{54,0},{50,0},{50,-5},{36,-5}}, color={191,0,0}));
            connect(transfer.portTra_out, vol.ports[1]) annotation (Line(points={{-32,
                    -5.7},{-32,-4},{-58,-4},{-58,6.66667},{-66,6.66667}},
                                                   color={0,127,255}));
            connect(transfer.portTra_in, vol.ports[2]) annotation (Line(points={{-32,23},
                    {-32,22},{-56,22},{-56,8},{-66,8}},
                                                color={0,127,255}));
            connect(TRoom.y, prescribedTemperature.T) annotation (Line(points={{83,8.88178e-16},
                    {79.5,8.88178e-16},{79.5,-1.55431e-15},{76,-1.55431e-15}}, color={0,0,
                    127}));
            connect(traControlBus, transfer.traControlBus) annotation (Line(
                points={{-4,66},{-4,55},{2,55},{2,44}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
            connect(constOpening.y, traControlBus.opening) annotation (Line(points={{-75,70},
                    {-42,70},{-42,66},{-4,66}},     color={0,0,127}), Text(
                string="%second",
                index=1,
                extent={{6,3},{6,3}},
                horizontalAlignment=TextAlignment.Left));

            connect(bou1.ports[1], vol.ports[3]) annotation (Line(points={{-60,-24},{-54,
                    -24},{-54,-4},{-58,-4},{-58,9.33333},{-66,9.33333}}, color={0,127,255}));
          end PartialTest;
        end Tests;

        package BaseClasses "Base class with partial generation models"
          partial model PartialTransfer "Partial transfer model for BES"
            extends BESMod.Utilities.Icons.TransferIcon;
            extends
              BESMod.HugosProject.Systems.BaseClasses.PartialFluidSubsystemWithParameters(
                dTTra_nominal={if TSup_nominal[i] > 64.9 + 273.15 then 15
                   elseif TSup_nominal[i] > 44.9 + 273.15 then 10 else 7 for i in
                      1:nParallelDem}, m_flow_nominal=Q_flow_nominal ./ (
                  dTTra_nominal .* 4184));
            parameter Modelica.Units.SI.PressureDifference dpSup_nominal[nParallelSup]
              "Nominal pressure loss of resistances in the supply system of the distribution"
              annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));

            parameter Modelica.Units.SI.Area AZone[nParallelDem] "Area of zones/rooms"
              annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.Height hZone[nParallelDem] "Height of zones"
              annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.Area ABui "Ground area of building" annotation (
                Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));
            parameter Modelica.Units.SI.Height hBui "Height of building" annotation (
                Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));

            Modelica.Fluid.Interfaces.FluidPort_b portTra_out[nParallelSup](redeclare
                final package Medium = Medium) "Outlet of the transfer system"
              annotation (Placement(transformation(extent={{-110,-52},{-90,-32}}),
                  iconTransformation(extent={{-110,-52},{-90,-32}})));
            Modelica.Fluid.Interfaces.FluidPort_a portTra_in[nParallelSup](redeclare
                final package Medium = Medium) "Inlet to the transfer system" annotation (
               Placement(transformation(extent={{-110,28},{-90,48}}), iconTransformation(
                    extent={{-110,30},{-90,50}})));
            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortRad[nParallelDem]
              "Heat port for radiative heat transfer with room radiation temperature"
              annotation (Placement(transformation(extent={{90,-50},{110,-30}})));
            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortCon[nParallelDem]
              "Heat port for convective heat transfer with room air temperature"
              annotation (Placement(transformation(extent={{90,30},{110,50}}),
                  iconTransformation(extent={{90,30},{110,50}})));
            BESMod.HugosProject.Systems.Hydraulical.Interfaces.TransferOutputs outBusTra
              annotation (Placement(transformation(extent={{-10,-114},{10,-94}})));
            Interfaces.TransferControlBus traControlBus
              annotation (Placement(transformation(extent={{-10,90},{10,110}})));
            Electrical.Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{62,-108},{82,-88}})));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialTransfer;
        annotation (Icon(graphics={
                Rectangle(
                  lineColor={200,200,200},
                  fillColor={248,248,248},
                  fillPattern=FillPattern.HorizontalCylinder,
                  extent={{-100.0,-100.0},{100.0,100.0}},
                  radius=25.0),
                Rectangle(
                  lineColor={128,128,128},
                  extent={{-100.0,-100.0},{100.0,100.0}},
                  radius=25.0),
                Ellipse(
                  extent={{-30.0,-30.0},{30.0,30.0}},
                  lineColor={128,128,128},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end BaseClasses;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

          partial record TransferDataBaseDefinition "Data record for hydraulic heat transfer system"
            extends Modelica.Icons.Record;
            // Building
            parameter Integer nZones "Numer of zones heated"
                                                            annotation(Dialog(group=
                    "Building"));
            parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal[nZones]
              "Nominal heat flow rate" annotation (Dialog(group="Building"));
            parameter Modelica.Units.SI.Area AFloor "Net floor area of one floor"
              annotation (Dialog(group="Building"));
            parameter Modelica.Units.SI.Length heiBui "Building height"
              annotation (Dialog(group="Building"));

            // Volume
            parameter
              BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HeatTransferSystemType
              traType "Heat transfer system type"
              annotation (Dialog(group="Volume"));
            parameter Modelica.Units.SI.Volume vol=
                BESMod.HugosProject.Systems.Hydraulical.Transfer.Functions.GetAverageVolumeOfWater(
                                                                                      sum(
                Q_flow_nominal), traType)
              "Volume of water in whole heat distribution and transfer system"
              annotation (Dialog(group="Volume"));
            // Pressure
            parameter
              BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.PressureDropPerLength
              pressureDropPerLen
              "Pressure drop per m that is allowed maximal within whole heat distribution system (typical value: 100 Pa/m). TODO: Calculate based on Figure 2.6.3-12 in Taschenbuch für HEIZUNG + KLIMATECHNIK 2019"
              annotation (Dialog(group="Pressure"));
            parameter
              BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HydraulicResistanceType
              typeOfHydRes
              "Type of the hydraulic restistances to be considered for parameter zf"
              annotation (
              Dialog(group="Pressure"),
              choicesAllMatching=true,
              Dialog(descriptionLabel=true));
            parameter Real zf(min=1.0, max=10.0, unit="1") = BESMod.HugosProject.Systems.Hydraulical.Transfer.Functions.GetSurchargeFactorForHydraulicResistances(
                                                                                                                                                     typeOfHydRes)
                "Factor for additional pressure resistances in piping network such as bows. Acc. to [Babusch, 2009]"
                annotation(Dialog(group="Pressure"));
            parameter Modelica.Units.SI.PressureDifference dpHeaDistr_nominal=
                pressureDropPerLen*zf*2*(2*sqrt(AFloor) + heiBui)
              "Pressure difference of heat distribuition system including piping plus pressure resistances but excluding UFH piping / heating circuit distributor. Actually L * W * H (factor 2 for flow and return)."
              annotation (Dialog(group="Pressure"));

            // Radiator
            parameter Real perPreLosRad "Percentage of pressure loss in radiator relative to overall pressure loss" annotation(Dialog(group="Radiator"));
            parameter Modelica.Units.SI.PressureDifference dpRad_nominal[nZones]=fill(
                perPreLosRad*dpHeaDistr_nominal, nZones)
              "Pressure drop at nominal mass flow rate in radiator"
              annotation (Dialog(group="Radiator"));
            // Valves
            parameter Real valveAutho[nZones](each min=0.2, each max=0.8, each unit="1") "Assumed valve authority (typical value: 0.5)" annotation(Dialog(group="Thermostatic Valve"));
            parameter Modelica.Units.SI.PressureDifference dpHeaSysValve_nominal[nZones]=
                (dpRad_nominal .+ dpHeaSysPreValve_nominal) ./ (1 .- valveAutho)
              "Nominal pressure drop over valve when fully opened at m_flowValve_nominal"
              annotation (Dialog(group="Thermostatic Valve"));

            parameter Boolean use_hydrBalAutom = true "Use automatic hydraluic balancing to set dpHeaSysPreValve_nominal" annotation(Dialog(group="Thermostatic Valve"));
            parameter Modelica.Units.SI.PressureDifference dpHeaSysPreValve_nominal[
              nZones]=if use_hydrBalAutom then max(dpRad_nominal) .- (dpRad_nominal)
                 else fill(0, nZones)
              "Pressure difference of each branch in heat distribution system as pre set value for valves (hydraulic balance)"
              annotation (Dialog(group="Thermostatic Valve", enable=use_hydrBalAutom));
            parameter Real leakageOpening = 0.0001
              "may be useful for simulation stability. Always check the influence it has on your results" annotation(Dialog(group="Thermostatic Valve"));

            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end TransferDataBaseDefinition;

          record RadiatorTransferData
            extends Modelica.Icons.Record;

            parameter Integer nEle=5 "Number of elements used in the discretization";
            parameter Real fraRad=0.35 "Fraction radiant heat transfer";
            parameter Real n=1.24 "Exponent for heat transfer";

          end RadiatorTransferData;

          record SteelRadiatorStandardPressureLossData
            "Steel radiator and 100 Pa/m pressure loss"
            extends TransferDataBaseDefinition(
              valveAutho=fill(0.5, nZones),
              perPreLosRad=0.05,
              pressureDropPerLen=100,
              typeOfHydRes=BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HydraulicResistanceType.FittingAndThermostatAndCheckValve,
              traType=BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HeatTransferSystemType.SteelRadiator);

          end SteelRadiatorStandardPressureLossData;

          partial record UFHData
            extends Modelica.Icons.Record;

            parameter Integer nZones   "Number of zones to transfer heat to";
            parameter Modelica.Units.SI.Area area[nZones] "Room area";
            parameter Boolean is_groundFloor[nZones]                      "Indicate if the florr is connected to soil or other rooms";

            parameter Modelica.Units.SI.CoefficientOfHeatTransfer k_top[nZones]
              "Heat transfer coefficient for layers above tubes";
            parameter Modelica.Units.SI.CoefficientOfHeatTransfer k_down[nZones]
              "Heat transfer coefficient for layers underneath tubes";
            parameter AixLib.Fluid.HeatExchangers.ActiveWalls.BaseClasses.HeatCapacityPerArea C_ActivatedElement[nZones];
            parameter Real c_top_ratio[nZones];
            parameter Modelica.Units.SI.Diameter diameter "Pipe diameter";
            parameter Modelica.Units.SI.Temperature T_floor
              "Fixed temperature at floor (soil)";

          end UFHData;

          record DefaultUFHData "For a well insulated retrofit building"
            extends UFHData(
              T_floor=281.65,
              final diameter=18e-3,
              c_top_ratio=fill(0.19, nZones),
              C_ActivatedElement=fill(380, nZones),
              k_down=fill(0.37, nZones),
              k_top=fill(4.47, nZones),
              is_groundFloor=fill(true, nZones),
              area=fill(0, nZones));
          end DefaultUFHData;
        end RecordsCollection;

        package Types "Package for transfer types"
          type HydraulicResistanceType = enumeration(
              Fittings "Fittings only",
              Thermostat "Thermostatic valve",
              CheckValve "Check valve / gravity brake / mixing valve",
              FittingAndThermostat "Fittings + Thermostatic valve",
              FittingAndThermostatAndCheckValve "Fittings + Thermostatic valve + Check valve");
          type HeatTransferSystemType = enumeration(
              FloorHeating,
              SteelRadiator,
              CastRadiator,
              PanelRadiators,
              Convectors)
            "Type of the heating system for calculating volume of distribution and transfer system";
          type PressureDropPerLength = Real (
              final quantity="Modelica.SIunits.Pressure/Modelica.SIunits.Length",
              final unit="Pa/m") "Pressure drop per length";
        end Types;

        package Functions "Package for functions"
          function GetAverageVolumeOfWater
            "Calculate the average water volume for the whole heating unit based on the type of the unit and the installed heating load"
            input Modelica.Units.SI.HeatFlowRate Q_flow_nominal "Nominal heat flow rate";
            input
              BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HeatTransferSystemType
              traType "Heat transfer system type";
            output Modelica.Units.SI.Volume vol "Average water volume of heating system";
          protected
            Real QFlow_nominal_internal=Q_flow_nominal/1000 "Used for conversion W to kW (unit of x-axis in diagram)";
            parameter Real slope=0.8613286803324769 "Constant for every number of registers.";
            Real vol_internal "Used for conversion l (unit of y-axis in diagram) to m3";
            Real offset "Output of the table";
          algorithm
            if (traType == BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HeatTransferSystemType.FloorHeating) then
              offset :=  3.490635525069636;
            elseif (traType == BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HeatTransferSystemType.SteelRadiator) then
              offset :=  3.3077920048238503;
            elseif (traType == BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HeatTransferSystemType.CastRadiator) then
              offset :=  3.113249710054262;
            elseif (traType == BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HeatTransferSystemType.PanelRadiators) then
              offset :=  2.7190012280738522;
            elseif (traType == BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HeatTransferSystemType.Convectors) then
              offset :=  2.3351465455057547;
            end if;
            vol_internal := Modelica.Constants.e^(slope * Modelica.Math.log(QFlow_nominal_internal) + offset);
            vol := vol_internal/1000;
            annotation (Documentation(info="<html>
<p>Calculate the average volume of water in the heating system for a given type of heating system. Based on tables in [1, p. 3].</p>
<p><img src=\"modelica://HVACAndBuidlingCoupling/Resources/Images/Library/DesignParameters/AverageVolumeOfWater.png\"/></p>
<p>[1] MHG HEIZTECHNIK GMBH: Auslegung von Druckausgleichsgef&auml;&szlig;en: MHG-Information. 2006; <a href=\"https://mhg.de/fileadmin/redaktion_upload/geschuetzter_Download/MHG_Info_Ausleg-Druckausgl_dt_2006-07.pdf\">Link to pdf</a></p>
</html>"));
          end GetAverageVolumeOfWater;

          function GetSurchargeFactorForHydraulicResistances
            "Returns the surcharge factor for a given hydraulic resistance to calculate the pump head"
            input
              BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HydraulicResistanceType
              resistance_type "Type of the hydraulic resistance";
            output Real surchargeFactor "Surcharge factor based on Babusch et.al.";
          algorithm
            if resistance_type == BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HydraulicResistanceType.Fittings then
              surchargeFactor := 1.3;
            elseif resistance_type == BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HydraulicResistanceType.Thermostat then
              surchargeFactor := 1.7;
            elseif resistance_type == BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HydraulicResistanceType.CheckValve then
              surchargeFactor := 1.2;
            elseif resistance_type == BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HydraulicResistanceType.FittingAndThermostat then
              surchargeFactor := 2.2;
            elseif resistance_type == BESMod.HugosProject.Systems.Hydraulical.Transfer.Types.HydraulicResistanceType.FittingAndThermostatAndCheckValve then
              surchargeFactor := 2.6;
            end if;
            annotation (Documentation(info="<html>
<p>The surcharge factors are based on Babusch et. al. [1, p. 41].</p>
<p><br><br>[1] Babusch, Andr&eacute; ; Ebert, Thomas ; K&ouml;nig, Karl-Heinz ;Makoschey, Thomas; Millies, Andreas ; Oraschweski, Manfred ; Rudolph, Bernd: Grundlagen der Pumpentechnik: Pumpenfibel. 5. &uuml;berarbeitete und aktualisierte Auflage. Dortmund, 2009; <a href=\"http://wilo.cdn.mediamid.com/cdndoc/wilo6423/602980/wilo6423.pdf\">Link to pdf</a></p>
</html>"));
          end GetSurchargeFactorForHydraulicResistances;
        end Functions;

        model RadiatorPressureBased_OverflowValve
          "Pressure Based transfer system with an overflow valve"
          extends BaseClasses.PartialTransfer(final dp_nominal=rad.dp_nominal .+ val.dpValve_nominal .+ res.dp_nominal .+ val.dpFixed_nominal,
                                              final nParallelSup=1);

          replaceable parameter RecordsCollection.TransferDataBaseDefinition
            transferDataBaseDefinition constrainedby
            RecordsCollection.TransferDataBaseDefinition(
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final nZones=nParallelDem,
            final AFloor=ABui,
            final heiBui=hBui)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-62,-98},{-42,-78}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-98,78},{-72,100}})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));
          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal .- dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            final dp_nominal=transferDataBaseDefinition.dpRad_nominal,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator"
            annotation (Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={-13,-25})));

          IBPSA.Fluid.FixedResistances.PressureDrop res[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=transferDataBaseDefinition.dpHeaDistr_nominal,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-34.5,37.5})));
          IBPSA.Fluid.Actuators.Valves.TwoWayLinear val[nParallelDem](
            redeclare package Medium = Medium,
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
            final dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            each final use_inputFilter=false,
            final dpFixed_nominal=transferDataBaseDefinition.dpHeaSysPreValve_nominal,
            each final l=transferDataBaseDefinition.leakageOpening)
                                                    annotation (Placement(transformation(
                extent={{-10,-11},{10,11}},
                rotation=270,
                origin={-12,1})));

          IBPSA.Fluid.MixingVolumes.MixingVolume vol(
            redeclare package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final mSenFac=1,
            final m_flow_nominal=sum(rad.m_flow_nominal),
            final m_flow_small=1E-4*abs(sum(rad.m_flow_nominal)),
            final allowFlowReversal=allowFlowReversal,
            final V(displayUnit="l") = transferDataBaseDefinition.vol,
            final use_C_flow=false,
            nPorts=1 + nParallelDem) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-58,18})));
          IBPSA.Fluid.Movers.SpeedControlled_y     pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=sum(m_flow_nominal),
              final dp_nominal=1/sum({1/dp_nominal[i] for i in 1:nParallelDem}),
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,38})));

          Modelica.Blocks.Sources.Constant m_flow1(k=1)   annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-48,68})));

          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{34,-94},{54,-74}})));
          IBPSA.Fluid.Actuators.Valves.TwoWayLinear val2
                                                       [nParallelDem](
            redeclare package Medium = Medium,
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
            final dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            each final use_inputFilter=false,
            final dpFixed_nominal=transferDataBaseDefinition.dpHeaSysPreValve_nominal,
            each final l=transferDataBaseDefinition.leakageOpening)
                                                    annotation (Placement(transformation(
                extent={{-10,-11},{10,11}},
                rotation=180,
                origin={-90,-9})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{-5.08,-27.2},
                  {40,-27.2},{40,-40},{100,-40}}, color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{-5.08,-22.8},
                  {-5.08,-26},{40,-26},{40,40},{100,40}},  color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(rad[i].port_b, portTra_out[1]) annotation (Line(points={{-13,-36},{-13,
                    -42},{-100,-42}},
                               color={0,127,255}));
            connect(res[i].port_a, vol.ports[i + 1]) annotation (Line(points={{-47,37.5},
                    {-56,37.5},{-56,28},{-58,28}}, color={0,127,255}));
          end for;

          connect(val.port_b, rad.port_a) annotation (Line(points={{-12,-9},{-12,-13.5},
                  {-13,-13.5},{-13,-14}}, color={0,127,255}));
          connect(res.port_b, val.port_a) annotation (Line(points={{-22,37.5},{
                  -12,37.5},{-12,11}},
                             color={0,127,255}));
          connect(portTra_in[1],pump.port_a)
            annotation (Line(points={{-100,38},{-84,38}}, color={0,127,255}));
          connect(pump.port_b, vol.ports[1]) annotation (Line(points={{-64,38},{-62,38},
                  {-62,28},{-58,28}}, color={0,127,255}));

          connect(m_flow1.y,pump. y)
            annotation (Line(points={{-59,68},{-74,68},{-74,50}}, color={0,0,127}));
          connect(val.y, traControlBus.opening) annotation (Line(points={{1.2,1},{8,1},{
                  8,74},{0,74},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{54.2,-83.8},{54.2,-84},{72,-84},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(realToElecCon.PEleLoa, pump.P) annotation (Line(points={{32,-80},{
                  22,-80},{22,47},{-63,47}}, color={0,0,127}));
        end RadiatorPressureBased_OverflowValve;

        model RadiatorPressureBased_injection
          "Pressure Based transfer system with mixing control"
          extends BaseClasses.PartialTransfer(final dp_nominal=rad.dp_nominal .+ val.dpValve_nominal .+ res.dp_nominal .+ val.dpFixed_nominal,
                                              final nParallelSup=1);

          replaceable parameter RecordsCollection.TransferDataBaseDefinition
            transferDataBaseDefinition(dpHeaSysValve_nominal=(dpRad_nominal .+
                dpHeaSysPreValve_nominal) ./ (1 .- valveAutho))
                                       constrainedby
            RecordsCollection.TransferDataBaseDefinition(
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final nZones=nParallelDem,
            final AFloor=ABui,
            final heiBui=hBui)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-62,-98},{-42,-78}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-98,78},{-72,100}})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));
          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal .- dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            final dp_nominal=transferDataBaseDefinition.dpRad_nominal,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator"
            annotation (Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={43,-19})));

          IBPSA.Fluid.FixedResistances.PressureDrop res[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=transferDataBaseDefinition.dpHeaDistr_nominal,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-34.5,37.5})));
          IBPSA.Fluid.Actuators.Valves.TwoWayLinear val[nParallelDem](
            redeclare package Medium = Medium,
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
            final dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            each final use_inputFilter=false,
            final dpFixed_nominal=transferDataBaseDefinition.dpHeaSysPreValve_nominal,
            each final l=transferDataBaseDefinition.leakageOpening)
                                                    annotation (Placement(transformation(
                extent={{-10,-11},{10,11}},
                rotation=180,
                origin={-54,-41})));

          IBPSA.Fluid.MixingVolumes.MixingVolume vol(
            redeclare package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final mSenFac=1,
            final m_flow_nominal=sum(rad.m_flow_nominal),
            final m_flow_small=1E-4*abs(sum(rad.m_flow_nominal)),
            final allowFlowReversal=allowFlowReversal,
            final V(displayUnit="l") = transferDataBaseDefinition.vol,
            final use_C_flow=false,
            nPorts=1 + nParallelDem) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-58,18})));
          IBPSA.Fluid.Movers.SpeedControlled_y     pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=sum(m_flow_nominal),
              final dp_nominal=1/sum({1/dp_nominal[i] for i in 1:nParallelDem}),
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,38})));

          Modelica.Blocks.Sources.Constant m_flow1(k=1)   annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-48,68})));

          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{34,-94},{54,-74}})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumRadData
            annotation (choicesAllMatching=true, Placement(transformation(extent={{58,78},{78,98}})));
          IBPSA.Fluid.Movers.SpeedControlled_y pum[nParallelDem](
            redeclare final package Medium = Medium,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final T_start=T_start,
            each final allowFlowReversal=allowFlowReversal,
            each final show_T=show_T,
            redeclare
              BESMod.Systems.RecordsCollection.Movers.AutomaticConfigurationData per(
              each final speed_rpm_nominal=pumRadData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal,
              final dp_nominal=dp_nominal,
              final rho=rho,
              each final V_flowCurve=pumRadData.V_flowCurve,
              each final dpCurve=pumRadData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            each final addPowerToMedium=pumRadData.addPowerToMedium,
            each final tau=pumRadData.tau,
            each final use_inputFilter=pumRadData.use_inputFilter,
            each final riseTime=pumRadData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=270,
                origin={42,22})));
          IBPSA.Fluid.FixedResistances.LosslessPipe pip[nParallelDem](
            redeclare package Medium = Medium,
            allowFlowReversal=false,
            m_flow_nominal=m_flow_nominal)
            annotation (Placement(transformation(extent={{-14,-18},{6,2}},rotation=90,
                origin={0,4})));
          Modelica.Blocks.Sources.Constant m_flow_open[nParallelDem](k=1) annotation (
              Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=180,
                origin={141,29})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold[nParallelDem](
              threshold=transferDataBaseDefinition.leakageOpening)
            annotation (Placement(transformation(extent={{-140,-4},{-126,10}},rotation=180,
                origin={8,62})));
          Modelica.Blocks.Sources.Constant m_flow_closed[nParallelDem](k=pum.m_flow_small
                 ./ pum.m_flow_nominal)
                                     annotation (Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=180,
                origin={141,89})));
          Modelica.Blocks.Logical.Switch switch1[nParallelDem] annotation (
              Placement(transformation(
                extent={{-24,-14},{-4,6}},
                rotation=180,
                origin={54,44})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{50.92,-21.2},{
                  50.92,-24},{86,-24},{86,-40},{100,-40}},
                                                  color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{50.92,-16.8},{
                  86,-16.8},{86,40},{100,40}},             color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(res[i].port_a, vol.ports[i + 1]) annotation (Line(points={{-47,37.5},
                    {-56,37.5},{-56,28},{-58,28}}, color={0,127,255}));
            connect(val[i].port_b, portTra_out[1]) annotation (Line(points={{-64,-41},{-80,
                    -41},{-80,-40},{-100,-40},{-100,-42}},
                                                  color={0,127,255}));
          end for;

          connect(portTra_in[1],pump.port_a)
            annotation (Line(points={{-100,38},{-84,38}}, color={0,127,255}));
          connect(pump.port_b, vol.ports[1]) annotation (Line(points={{-64,38},{-62,38},
                  {-62,28},{-58,28}}, color={0,127,255}));

          connect(m_flow1.y,pump. y)
            annotation (Line(points={{-59,68},{-74,68},{-74,50}}, color={0,0,127}));
          connect(val.y, traControlBus.opening) annotation (Line(points={{-54,-54.2},{-28,
                  -54.2},{-28,20},{-12,20},{-12,86},{0,86},{0,100}},
                                         color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{54.2,-83.8},{54.2,-84},{72,-84},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(realToElecCon.PEleLoa, pump.P) annotation (Line(points={{32,-80},{
                  22,-80},{22,47},{-63,47}}, color={0,0,127}));
          connect(pum.port_b, rad.port_a) annotation (Line(points={{42,12},{42,3},{43,3},
                  {43,-8}}, color={0,127,255}));
          connect(val.port_a, rad.port_b)
            annotation (Line(points={{-44,-41},{43,-41},{43,-30}}, color={0,127,255}));
          connect(res.port_b, pum.port_a)
            annotation (Line(points={{-22,37.5},{42,37.5},{42,32}}, color={0,127,255}));
          connect(rad.port_b, pip.port_a) annotation (Line(points={{43,-30},{42,
                  -30},{42,-40},{8,-40},{8,-10}},
                                           color={0,127,255}));
          connect(pip.port_b, pum.port_a) annotation (Line(points={{8,10},{8,32},
                  {42,32}}, color={0,127,255}));
          connect(greaterThreshold.u, traControlBus.opening) annotation (Line(points={{149.4,
                  59},{0,59},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(switch1.u2, greaterThreshold.y) annotation (Line(points={{80,
                  48},{86,48},{86,59},{133.3,59}}, color={255,0,255}));
          connect(switch1.y, pum.y) annotation (Line(points={{57,48},{28,48},{
                  28,28},{24,28},{24,22},{30,22}}, color={0,0,127}));
          connect(m_flow_closed.y, switch1.u3) annotation (Line(points={{131.1,
                  89},{84,89},{84,62},{80,62},{80,56}}, color={0,0,127}));
          connect(m_flow_open.y, switch1.u1) annotation (Line(points={{131.1,29},
                  {114,29},{114,26},{80,26},{80,40}}, color={0,0,127}));
        end RadiatorPressureBased_injection;

        model RadiatorPressureBased_injection_threeWayValve
          "Pressure Based transfer system with mixing control and a three way valve"
          extends BaseClasses.PartialTransfer(final dp_nominal=rad.dp_nominal .+
                threeWayVal.dpValve_nominal .+ res.dp_nominal .+ threeWayVal.dpFixed_nominal[1],
              final nParallelSup=1);


          replaceable parameter RecordsCollection.TransferDataBaseDefinition
            transferDataBaseDefinition constrainedby
            RecordsCollection.TransferDataBaseDefinition(
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final nZones=nParallelDem,
            final AFloor=ABui,
            final heiBui=hBui)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-62,-98},{-42,-78}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-98,78},{-72,100}})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));

          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal .- dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            final dp_nominal=transferDataBaseDefinition.dpRad_nominal,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator"
            annotation (Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={43,-19})));

          IBPSA.Fluid.FixedResistances.PressureDrop res[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=transferDataBaseDefinition.dpHeaDistr_nominal,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-24.5,39.5})));

          IBPSA.Fluid.MixingVolumes.MixingVolume vol(
            redeclare package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final mSenFac=1,
            final m_flow_nominal=sum(rad.m_flow_nominal),
            final m_flow_small=1E-4*abs(sum(rad.m_flow_nominal)),
            final allowFlowReversal=allowFlowReversal,
            final V(displayUnit="l") = transferDataBaseDefinition.vol,
            final use_C_flow=false,
            nPorts=1 + nParallelDem) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-58,18})));
          IBPSA.Fluid.Movers.SpeedControlled_y     pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=sum(m_flow_nominal),
              final dp_nominal=1/sum({1/dp_nominal[i] for i in 1:nParallelDem}),
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,38})));

          Modelica.Blocks.Sources.Constant m_flow1(k=1)   annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-48,68})));

          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{34,-94},{54,-74}})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumRadData
            annotation (choicesAllMatching=true, Placement(transformation(extent={{58,78},{78,98}})));
          IBPSA.Fluid.Movers.SpeedControlled_y pum[nParallelDem](
            redeclare final package Medium = Medium,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final T_start=T_start,
            each final allowFlowReversal=allowFlowReversal,
            each final show_T=show_T,
            redeclare
              BESMod.Systems.RecordsCollection.Movers.AutomaticConfigurationData per(
              each final speed_rpm_nominal=pumRadData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal,
              final dp_nominal=dp_nominal,
              final rho=rho,
              each final V_flowCurve=pumRadData.V_flowCurve,
              each final dpCurve=pumRadData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            each final addPowerToMedium=pumRadData.addPowerToMedium,
            each final tau=pumRadData.tau,
            each final use_inputFilter=pumRadData.use_inputFilter,
            each final riseTime=pumRadData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=270,
                origin={42,22})));

          IBPSA.Fluid.FixedResistances.LosslessPipe pip[nParallelDem](
            redeclare package Medium = Medium,
            allowFlowReversal=false,
            m_flow_nominal=m_flow_nominal)
            annotation (Placement(transformation(extent={{-14,-18},{6,2}},rotation=90,
                origin={0,4})));

          IBPSA.Fluid.Actuators.Valves.ThreeWayLinear threeWayVal[nParallelDem](
              redeclare package Medium = Medium,
            each final portFlowDirection_1=Modelica.Fluid.Types.PortFlowDirection.Entering,
            each final portFlowDirection_2=Modelica.Fluid.Types.PortFlowDirection.Leaving,
            each final portFlowDirection_3=Modelica.Fluid.Types.PortFlowDirection.Entering,
            each final use_inputFilter=false,
            each final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
            final m_flow_nominal=m_flow_nominal,
            each final dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            each final dpFixed_nominal={transferDataBaseDefinition.dpHeaSysPreValve_nominal,
                0},
            each final l={transferDataBaseDefinition.leakageOpening,
                transferDataBaseDefinition.leakageOpening})
            annotation (Placement(transformation(extent={{-42,-44},{-22,-24}},rotation=180,
                origin={-68,-78})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve threeWayValveParameters=
              threeWayValveParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-136,-98},{-116,-78}})));
          Modelica.Blocks.Sources.Constant m_flow_closed[nParallelDem](k=pum.m_flow_small
                 ./ pum.m_flow_nominal)
                                     annotation (Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=180,
                origin={103,109})));
          Modelica.Blocks.Sources.Constant m_flow_open[nParallelDem](k=1) annotation (
              Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=180,
                origin={109,15})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold[nParallelDem](
              threshold=transferDataBaseDefinition.leakageOpening)
            annotation (Placement(transformation(extent={{-140,-4},{-126,10}},rotation=180,
                origin={-28,78})));
          Modelica.Blocks.Logical.Switch switch1[nParallelDem] annotation (
              Placement(transformation(
                extent={{-14.4,-8.4},{-2.4,3.6}},
                rotation=180,
                origin={39.6,45.6})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{50.92,-21.2},{
                  50.92,-24},{86,-24},{86,-40},{100,-40}},
                                                  color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{50.92,-16.8},{
                  86,-16.8},{86,40},{100,40}},             color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(res[i].port_a, vol.ports[i + 1]) annotation (Line(points={{-37,39.5},
                    {-37,38},{-58,38},{-58,28}},   color={0,127,255}));
            connect(portTra_out[1], threeWayVal[i].port_2) annotation (Line(points={{-100,
                  -42},{-98,-42},{-98,-44},{-46,-44}}, color={0,127,255}));
          end for;

          connect(portTra_in[1],pump.port_a)
            annotation (Line(points={{-100,38},{-84,38}}, color={0,127,255}));
          connect(pump.port_b, vol.ports[1]) annotation (Line(points={{-64,38},{-62,38},
                  {-62,28},{-58,28}}, color={0,127,255}));

          connect(m_flow1.y,pump. y)
            annotation (Line(points={{-59,68},{-74,68},{-74,50}}, color={0,0,127}));
          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{54.2,-83.8},{54.2,-84},{72,-84},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(realToElecCon.PEleLoa, pump.P) annotation (Line(points={{32,-80},{
                  22,-80},{22,47},{-63,47}}, color={0,0,127}));
          connect(pum.port_b, rad.port_a) annotation (Line(points={{42,12},{42,3},{43,3},
                  {43,-8}}, color={0,127,255}));
          connect(res.port_b, pum.port_a)
            annotation (Line(points={{-12,39.5},{-12,40},{8,40},{8,32},{42,32}},
                                                                    color={0,127,255}));
          connect(rad.port_b, pip.port_a) annotation (Line(points={{43,-30},{42,-30},{42,
                  -40},{8,-40},{8,-10}},   color={0,127,255}));
          connect(pip.port_b, pum.port_a) annotation (Line(points={{8,10},{8,32},{42,32}},
                            color={0,127,255}));
          connect(threeWayVal.port_1, rad.port_b) annotation (Line(points={{-26,-44},{20,
                  -44},{20,-40},{43,-40},{43,-30}}, color={0,127,255}));
          connect(threeWayVal.y, traControlBus.opening) annotation (Line(points={{-36,-56},
                  {-36,-62},{80,-62},{80,70},{0,70},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(threeWayVal.port_3, res.port_b) annotation (Line(points={{-36,-34},{-36,
                  18},{-4,18},{-4,39.5},{-12,39.5}}, color={0,127,255}));
          connect(switch1.u3, m_flow_closed.y) annotation (Line(points={{55.2,52.8},{86,
                  52.8},{86,109},{93.1,109}}, color={0,0,127}));
          connect(switch1.y, pum.y) annotation (Line(points={{41.4,48},{28,48},{28,28},{
                  24,28},{24,22},{30,22}}, color={0,0,127}));
          connect(greaterThreshold.y, switch1.u2) annotation (Line(points={{97.3,75},{78,
                  75},{78,48},{55.2,48}}, color={255,0,255}));
          connect(m_flow_open.y, switch1.u1) annotation (Line(points={{99.1,15},{58,15},
                  {58,38},{55.2,38},{55.2,43.2}}, color={0,0,127}));
          connect(greaterThreshold.u, traControlBus.opening) annotation (Line(points={{113.4,
                  75},{113.4,74},{118,74},{118,84},{84,84},{84,102},{16,102},{16,86},{0,
                  86},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
        end RadiatorPressureBased_injection_threeWayValve;

        model RadiatorPressureBased_injection_likeThreeWayValve
          "Pressure Based transfer system with mixing control"
          extends BaseClasses.PartialTransfer(final dp_nominal=rad.dp_nominal .+ val.dpValve_nominal .+ res.dp_nominal .+ val.dpFixed_nominal,
                                              final nParallelSup=1);

          replaceable parameter RecordsCollection.TransferDataBaseDefinition
            transferDataBaseDefinition(dpHeaSysValve_nominal=(dpRad_nominal .+
                dpHeaSysPreValve_nominal) ./ (1 .- valveAutho))
                                       constrainedby
            RecordsCollection.TransferDataBaseDefinition(
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final nZones=nParallelDem,
            final AFloor=ABui,
            final heiBui=hBui)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-62,-98},{-42,-78}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-112,-12},{-86,10}})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));
          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal .- dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            final dp_nominal=transferDataBaseDefinition.dpRad_nominal,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator"
            annotation (Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={43,-19})));

          IBPSA.Fluid.FixedResistances.PressureDrop res[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=transferDataBaseDefinition.dpHeaDistr_nominal,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-32.5,23.5})));
          IBPSA.Fluid.Actuators.Valves.TwoWayLinear val[nParallelDem](
            redeclare package Medium = Medium,
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
            final dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            each final use_inputFilter=false,
            final dpFixed_nominal=transferDataBaseDefinition.dpHeaSysPreValve_nominal,
            each final l=transferDataBaseDefinition.leakageOpening)
                                                    annotation (Placement(transformation(
                extent={{-10,-11},{10,11}},
                rotation=180,
                origin={-14,-45})));

          IBPSA.Fluid.MixingVolumes.MixingVolume vol(
            redeclare package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final mSenFac=1,
            final m_flow_nominal=sum(rad.m_flow_nominal),
            final m_flow_small=1E-4*abs(sum(rad.m_flow_nominal)),
            final allowFlowReversal=allowFlowReversal,
            final V(displayUnit="l") = transferDataBaseDefinition.vol,
            final use_C_flow=false,
            nPorts=1 + nParallelDem) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-56,-4})));
          IBPSA.Fluid.Movers.SpeedControlled_y     pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=sum(m_flow_nominal),
              final dp_nominal=1/sum({1/dp_nominal[i] for i in 1:nParallelDem}),
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-72,30})));

          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{34,-94},{54,-74}})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumRadData
            annotation (choicesAllMatching=true, Placement(transformation(extent={{58,78},{78,98}})));
          IBPSA.Fluid.Movers.SpeedControlled_y pum[nParallelDem](
            redeclare final package Medium = Medium,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final T_start=T_start,
            each final allowFlowReversal=allowFlowReversal,
            each final show_T=show_T,
            redeclare
              BESMod.Systems.RecordsCollection.Movers.AutomaticConfigurationData per(
              each final speed_rpm_nominal=pumRadData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal,
              final dp_nominal=dp_nominal,
              final rho=rho,
              each final V_flowCurve=pumRadData.V_flowCurve,
              each final dpCurve=pumRadData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            each final addPowerToMedium=pumRadData.addPowerToMedium,
            each final tau=pumRadData.tau,
            each final use_inputFilter=pumRadData.use_inputFilter,
            each final riseTime=pumRadData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=270,
                origin={42,22})));
          IBPSA.Fluid.FixedResistances.LosslessPipe pip[nParallelDem](
            redeclare package Medium = Medium,
            allowFlowReversal=false,
            m_flow_nominal=m_flow_nominal)
            annotation (Placement(transformation(extent={{-14,-18},{6,2}},rotation=90,
                origin={0,4})));
          Modelica.Blocks.Sources.Constant m_flow_open[nParallelDem](k=1) annotation (
              Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=180,
                origin={141,29})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold[nParallelDem](
              threshold=transferDataBaseDefinition.leakageOpening)
            annotation (Placement(transformation(extent={{-140,-4},{-126,10}},rotation=180,
                origin={8,62})));
          Modelica.Blocks.Sources.Constant m_flow_closed[nParallelDem](k=pum.m_flow_small
                 ./ pum.m_flow_nominal)
                                     annotation (Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=180,
                origin={141,89})));
          Modelica.Blocks.Logical.Switch switch1[nParallelDem] annotation (
              Placement(transformation(
                extent={{-24,-14},{-4,6}},
                rotation=180,
                origin={54,44})));
          Modelica.Blocks.Logical.Switch switch2 annotation (Placement(transformation(
                extent={{-16.8,-9.8},{-2.8,4.2}},
                rotation=270,
                origin={-62.2,51.2})));
          Modelica.Blocks.Sources.Constant m_flow_closed1(k=pump.m_flow_small/
                pump.m_flow_nominal)
            annotation (Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=270,
                origin={-95,81})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold1(threshold=
                transferDataBaseDefinition.leakageOpening) annotation (Placement(
                transformation(
                extent={{-140,-4},{-126,10}},
                rotation=270,
                origin={-68,-42})));
          Modelica.Blocks.Sources.Constant m_flow_open1(k=1) annotation (Placement(
                transformation(
                extent={{-9,-9},{9,9}},
                rotation=270,
                origin={-35,85})));
          IBPSA.Fluid.FixedResistances.LosslessPipe pip1[nParallelDem](
            redeclare package Medium = Medium, m_flow_nominal=m_flow_nominal)
            annotation (Placement(transformation(extent={{-14,-18},{6,2}},rotation=270,
                origin={-22,-22})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{50.92,-21.2},{
                  50.92,-24},{86,-24},{86,-40},{100,-40}},
                                                  color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{50.92,-16.8},{
                  86,-16.8},{86,40},{100,40}},             color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(res[i].port_a, vol.ports[i + 1]) annotation (Line(points={{-45,
                    23.5},{-45,36},{-56,36},{-56,6}},
                                                   color={0,127,255}));
            connect(val[i].port_b, portTra_out[1]) annotation (Line(points={{-24,-45},{-86,
                    -45},{-86,-42},{-100,-42}},   color={0,127,255}));
            connect(pip1[i].port_b, portTra_out[1]) annotation (Line(points={{-30,-28},{-30,
                  -44},{-86,-44},{-86,-42},{-100,-42}}, color={0,127,255}));
          end for;

          connect(portTra_in[1],pump.port_a)
            annotation (Line(points={{-100,38},{-92,38},{-92,30},{-82,30}},
                                                          color={0,127,255}));
          connect(pump.port_b, vol.ports[1]) annotation (Line(points={{-62,30},
                  {-56,30},{-56,6}},  color={0,127,255}));

          connect(val.y, traControlBus.opening) annotation (Line(points={{-14,-58.2},{-14,
                  -64},{4,-64},{4,-14},{-4,-14},{-4,86},{0,86},{0,100}},
                                         color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{54.2,-83.8},{54.2,-84},{72,-84},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(realToElecCon.PEleLoa, pump.P) annotation (Line(points={{32,-80},
                  {22,-80},{22,39},{-61,39}},color={0,0,127}));
          connect(pum.port_b, rad.port_a) annotation (Line(points={{42,12},{42,3},{43,3},
                  {43,-8}}, color={0,127,255}));
          connect(val.port_a, rad.port_b)
            annotation (Line(points={{-4,-45},{20,-45},{20,-40},{43,-40},{43,-30}},
                                                                   color={0,127,255}));
          connect(res.port_b, pum.port_a)
            annotation (Line(points={{-20,23.5},{42,23.5},{42,32}}, color={0,127,255}));
          connect(rad.port_b, pip.port_a) annotation (Line(points={{43,-30},{42,
                  -30},{42,-40},{8,-40},{8,-10}},
                                           color={0,127,255}));
          connect(pip.port_b, pum.port_a) annotation (Line(points={{8,10},{8,32},
                  {42,32}}, color={0,127,255}));
          connect(greaterThreshold.u, traControlBus.opening) annotation (Line(points={{149.4,
                  59},{0,59},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(switch1.u2, greaterThreshold.y) annotation (Line(points={{80,
                  48},{86,48},{86,59},{133.3,59}}, color={255,0,255}));
          connect(switch1.y, pum.y) annotation (Line(points={{57,48},{28,48},{
                  28,28},{24,28},{24,22},{30,22}}, color={0,0,127}));
          connect(m_flow_closed.y, switch1.u3) annotation (Line(points={{131.1,89},{84,89},
                  {84,62},{80,62},{80,56}},             color={0,0,127}));
          connect(m_flow_open.y, switch1.u1) annotation (Line(points={{131.1,29},
                  {114,29},{114,26},{80,26},{80,40}}, color={0,0,127}));
          connect(switch2.y, pump.y) annotation (Line(points={{-65,53.3},{-65,
                  56},{-72,56},{-72,42}}, color={0,0,127}));
          connect(m_flow_open1.y, switch2.u1) annotation (Line(points={{-35,
                  75.1},{-35,69.4},{-59.4,69.4}}, color={0,0,127}));
          connect(m_flow_closed1.y, switch2.u3) annotation (Line(points={{-95,
                  71.1},{-95,66},{-76,66},{-76,69.4},{-70.6,69.4}}, color={0,0,
                  127}));
          connect(greaterThreshold1.y, switch2.u2) annotation (Line(points={{
                  -65,83.3},{-65,76.35},{-65,76.35},{-65,69.4}}, color={255,0,
                  255}));
          connect(greaterThreshold1.u, traControlBus.opening[1]) annotation (
              Line(points={{-65,99.4},{-65,104},{-16,104},{-16,86},{0,86},{0,
                  100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(res.port_b, pip1.port_a) annotation (Line(points={{-20,23.5},{-20,22},
                  {-14,22},{-14,-2},{-30,-2},{-30,-8}}, color={0,127,255}));

        end RadiatorPressureBased_injection_likeThreeWayValve;

        model RadiatorPressureBased_noPump "Pressure Based transfer system"
          extends BaseClasses.PartialTransfer(final dp_nominal=rad.dp_nominal .+ val.dpValve_nominal .+ res.dp_nominal .+ val.dpFixed_nominal,
                                              final nParallelSup=1);

          replaceable parameter RecordsCollection.TransferDataBaseDefinition
            transferDataBaseDefinition constrainedby
            RecordsCollection.TransferDataBaseDefinition(
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final nZones=nParallelDem,
            final AFloor=ABui,
            final heiBui=hBui)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-62,-98},{-42,-78}})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));
          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal .- dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            final dp_nominal=transferDataBaseDefinition.dpRad_nominal,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator"
            annotation (Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={-13,-25})));

          IBPSA.Fluid.FixedResistances.PressureDrop res[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=transferDataBaseDefinition.dpHeaDistr_nominal,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-34.5,37.5})));
          IBPSA.Fluid.Actuators.Valves.TwoWayLinear val[nParallelDem](
            redeclare package Medium = Medium,
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
            final dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            each final use_inputFilter=false,
            final dpFixed_nominal=transferDataBaseDefinition.dpHeaSysPreValve_nominal,
            each final l=transferDataBaseDefinition.leakageOpening)
                                                    annotation (Placement(transformation(
                extent={{-10,-11},{10,11}},
                rotation=270,
                origin={-12,1})));

          IBPSA.Fluid.MixingVolumes.MixingVolume vol(
            redeclare package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final mSenFac=1,
            final m_flow_nominal=sum(rad.m_flow_nominal),
            final m_flow_small=1E-4*abs(sum(rad.m_flow_nominal)),
            final allowFlowReversal=allowFlowReversal,
            final V(displayUnit="l") = transferDataBaseDefinition.vol,
            final use_C_flow=false,
            nPorts=1+nParallelDem)                 annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-58,18})));

          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{28,-110},{48,-90}})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{-5.08,-27.2},
                  {40,-27.2},{40,-40},{100,-40}}, color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{-5.08,-22.8},
                  {-5.08,-26},{40,-26},{40,40},{100,40}},  color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(rad[i].port_b, portTra_out[1]) annotation (Line(points={{-13,-36},
                    {-13,-42},{-100,-42}},
                               color={0,127,255}));
            connect(res[i].port_a, vol.ports[i + 1]) annotation (Line(points={{-47,37.5},
                    {-56,37.5},{-56,28},{-58,28}}, color={0,127,255}));
          end for;

          connect(val.port_b, rad.port_a) annotation (Line(points={{-12,-9},{-12,-13.5},
                  {-13,-13.5},{-13,-14}}, color={0,127,255}));
          connect(res.port_b, val.port_a) annotation (Line(points={{-22,37.5},{
                  -12,37.5},{-12,11}},
                             color={0,127,255}));

          connect(val.y, traControlBus.opening) annotation (Line(points={{1.2,1},{8,1},{
                  8,74},{0,74},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(portTra_in[1],vol.ports[1])
            annotation (Line(points={{-100,38},{-62,38},{-62,28},{-58,28}}, color={0,127,255}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{48,-100},{56,-100},{56,-84},{72,-84},{72,-98}},
              color={0,0,0},
              thickness=1));
        end RadiatorPressureBased_noPump;

        model RadiatorPressureBased_injection_likeThreeWayValveBis
          "Pressure Based transfer system with mixing control"
          extends BaseClasses.PartialTransfer(final dp_nominal=rad.dp_nominal .+ val1.dpValve_nominal .+ res.dp_nominal .+ val1.dpFixed_nominal,
                                              final nParallelSup=1);

          replaceable parameter RecordsCollection.TransferDataBaseDefinition
            transferDataBaseDefinition(dpHeaSysValve_nominal=(dpRad_nominal .+
                dpHeaSysPreValve_nominal) ./ (1 .- valveAutho))
                                       constrainedby
            RecordsCollection.TransferDataBaseDefinition(
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final nZones=nParallelDem,
            final AFloor=ABui,
            final heiBui=hBui)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-62,-98},{-42,-78}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-112,-12},{-86,10}})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));
          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal .- dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            final dp_nominal=transferDataBaseDefinition.dpRad_nominal,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator"
            annotation (Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={43,-19})));

          IBPSA.Fluid.FixedResistances.PressureDrop res[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=transferDataBaseDefinition.dpHeaDistr_nominal,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-32.5,23.5})));

          IBPSA.Fluid.MixingVolumes.MixingVolume vol(
            redeclare package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final mSenFac=1,
            final m_flow_nominal=sum(rad.m_flow_nominal),
            final m_flow_small=1E-4*abs(sum(rad.m_flow_nominal)),
            final allowFlowReversal=allowFlowReversal,
            final V(displayUnit="l") = transferDataBaseDefinition.vol,
            final use_C_flow=false,
            nPorts=1 + nParallelDem) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-58,6})));
          IBPSA.Fluid.Movers.SpeedControlled_y     pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=sum(m_flow_nominal),
              final dp_nominal=1/sum({1/dp_nominal[i] for i in 1:nParallelDem}),
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-72,30})));

          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{34,-94},{54,-74}})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumRadData
            annotation (choicesAllMatching=true, Placement(transformation(extent={{58,78},{78,98}})));
          IBPSA.Fluid.Movers.SpeedControlled_y pum[nParallelDem](
            redeclare final package Medium = Medium,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final T_start=T_start,
            each final allowFlowReversal=allowFlowReversal,
            each final show_T=show_T,
            redeclare
              BESMod.Systems.RecordsCollection.Movers.AutomaticConfigurationData per(
              each final speed_rpm_nominal=pumRadData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal,
              final dp_nominal=dp_nominal,
              final rho=rho,
              each final V_flowCurve=pumRadData.V_flowCurve,
              each final dpCurve=pumRadData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            each final addPowerToMedium=pumRadData.addPowerToMedium,
            each final tau=pumRadData.tau,
            each final use_inputFilter=pumRadData.use_inputFilter,
            each final riseTime=pumRadData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=270,
                origin={42,22})));
          Modelica.Blocks.Sources.Constant m_flow_open[nParallelDem](k=1) annotation (
              Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=180,
                origin={141,29})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold[nParallelDem](
              threshold=transferDataBaseDefinition.leakageOpening)
            annotation (Placement(transformation(extent={{-140,-4},{-126,10}},rotation=180,
                origin={8,62})));
          Modelica.Blocks.Sources.Constant m_flow_closed[nParallelDem](k=pum.m_flow_small
                 ./ pum.m_flow_nominal)
                                     annotation (Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=180,
                origin={141,89})));
          Modelica.Blocks.Logical.Switch switch1[nParallelDem] annotation (
              Placement(transformation(
                extent={{-24,-14},{-4,6}},
                rotation=180,
                origin={54,44})));
          Modelica.Blocks.Logical.Switch switch2 annotation (Placement(transformation(
                extent={{-16.8,-9.8},{-2.8,4.2}},
                rotation=270,
                origin={-62.2,51.2})));
          Modelica.Blocks.Sources.Constant m_flow_closed1(k=pump.m_flow_small/pump.m_flow_nominal)
            annotation (Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=270,
                origin={-95,81})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold1(threshold=
                transferDataBaseDefinition.leakageOpening) annotation (Placement(
                transformation(
                extent={{-140,-4},{-126,10}},
                rotation=270,
                origin={-68,-42})));
          Modelica.Blocks.Sources.Constant m_flow_open1(k=1) annotation (Placement(
                transformation(
                extent={{-9,-9},{9,9}},
                rotation=270,
                origin={-35,85})));
          IBPSA.Fluid.Actuators.Valves.TwoWayPressureIndependent val1[nParallelDem](
              redeclare package Medium = Medium, m_flow_nominal=m_flow_nominal,
            dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal)
            annotation (Placement(transformation(
                extent={{-226,22},{-206,42}},
                rotation=180,
                origin={-234,-10})));
          IBPSA.Fluid.Actuators.Valves.TwoWayPressureIndependent val2[nParallelDem](
              redeclare package Medium = Medium, m_flow_nominal=m_flow_nominal,
            dpValve_nominal=transferDataBaseDefinition.dpHeaDistr_nominal ./ (1 .-
                transferDataBaseDefinition.valveAutho))
            annotation (Placement(transformation(
                extent={{-228,-20},{-208,0}},
                rotation=180,
                origin={-244,-14})));
          IBPSA.Fluid.FixedResistances.CheckValve cheVal[nParallelDem](
            redeclare package Medium = Medium,
            m_flow_nominal=m_flow_nominal,
            dpValve_nominal=3400) annotation (Placement(transformation(
                extent={{-6,-16},{14,4}},
                rotation=90,
                origin={4,-4})));
          IBPSA.Fluid.Actuators.Valves.TwoWayPressureIndependent val[nParallelDem](
            redeclare package Medium = Medium,
            allowFlowReversal=allowFlowReversal,
            m_flow_nominal=m_flow_nominal,
            show_T=show_T,
            from_dp=true,
            dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            use_inputFilter=false,
            dpFixed_nominal=transferDataBaseDefinition.dpHeaSysPreValve_nominal,

            l=transferDataBaseDefinition.leakageOpening)
            annotation (Placement(transformation(extent={{-30,-10},{-10,10}},rotation=270,
                origin={-44,-58})));
        protected
          Modelica.Blocks.Math.Feedback inv[nParallelDem]
            "Inversion of control signal" annotation (Placement(transformation(
                  extent={{-60,-36},{-48,-24}})));
          Modelica.Blocks.Sources.Constant uni[nParallelDem](final k=1)
            "Outputs one for bypass valve" annotation (Placement(transformation(
                  extent={{-80,-34},{-68,-22}})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{50.92,-21.2},{
                  50.92,-24},{86,-24},{86,-40},{100,-40}},
                                                  color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{50.92,-16.8},{
                  86,-16.8},{86,40},{100,40}},             color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(res[i].port_a, vol.ports[i + 1]) annotation (Line(points={{-45,23.5},
                    {-45,36},{-58,36},{-58,16}},   color={0,127,255}));
            connect(val1.y, traControlBus.opening) annotation (Line(points={{-18,-54},{-4,
                  -54},{-4,86},{0,86},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
            connect(val2[i].port_b, portTra_out[1]) annotation (Line(points={{-36,-4},{-44,
                  -4},{-44,-16},{-86,-16},{-86,-42},{-100,-42}}, color={0,127,255}));
            connect(val1[i].port_b, portTra_out[1]) annotation (Line(points={{-28,-42},{-64,
                  -42},{-64,-42},{-100,-42}}, color={0,127,255}));
            connect(pum[i].P, realToElecCon.PEleLoa) annotation (Line(points={{33,11},{22,
                  11},{22,-80},{32,-80}}, color={0,0,127}));
          end for;

          connect(portTra_in[1],pump.port_a)
            annotation (Line(points={{-100,38},{-92,38},{-92,30},{-82,30}},
                                                          color={0,127,255}));
          connect(pump.port_b, vol.ports[1]) annotation (Line(points={{-62,30},{-58,30},
                  {-58,16}},          color={0,127,255}));

          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{54.2,-83.8},{54.2,-84},{72,-84},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(realToElecCon.PEleLoa, pump.P) annotation (Line(points={{32,-80},
                  {22,-80},{22,39},{-61,39}},color={0,0,127}));
          connect(pum.port_b, rad.port_a) annotation (Line(points={{42,12},{42,3},{43,3},
                  {43,-8}}, color={0,127,255}));
          connect(res.port_b, pum.port_a)
            annotation (Line(points={{-20,23.5},{42,23.5},{42,32}}, color={0,127,255}));
          connect(greaterThreshold.u, traControlBus.opening) annotation (Line(points={{149.4,
                  59},{0,59},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(switch1.u2, greaterThreshold.y) annotation (Line(points={{80,
                  48},{86,48},{86,59},{133.3,59}}, color={255,0,255}));
          connect(switch1.y, pum.y) annotation (Line(points={{57,48},{28,48},{
                  28,28},{24,28},{24,22},{30,22}}, color={0,0,127}));
          connect(m_flow_closed.y, switch1.u3) annotation (Line(points={{131.1,89},{84,89},
                  {84,62},{80,62},{80,56}},             color={0,0,127}));
          connect(m_flow_open.y, switch1.u1) annotation (Line(points={{131.1,29},
                  {114,29},{114,26},{80,26},{80,40}}, color={0,0,127}));
          connect(switch2.y, pump.y) annotation (Line(points={{-65,53.3},{-65,
                  56},{-72,56},{-72,42}}, color={0,0,127}));
          connect(m_flow_open1.y, switch2.u1) annotation (Line(points={{-35,
                  75.1},{-35,69.4},{-59.4,69.4}}, color={0,0,127}));
          connect(m_flow_closed1.y, switch2.u3) annotation (Line(points={{-95,
                  71.1},{-95,66},{-76,66},{-76,69.4},{-70.6,69.4}}, color={0,0,
                  127}));
          connect(greaterThreshold1.y, switch2.u2) annotation (Line(points={{
                  -65,83.3},{-65,76.35},{-65,76.35},{-65,69.4}}, color={255,0,
                  255}));
          connect(greaterThreshold1.u, traControlBus.opening[1]) annotation (
              Line(points={{-65,99.4},{-65,104},{-16,104},{-16,86},{0,86},{0,
                  100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(uni.y, inv.u1) annotation (Line(points={{-67.4,-28},{-67.4,-30},{-58.8,
                  -30}},             color={0,0,127}));
          connect(inv.u2, traControlBus.opening) annotation (Line(points={{-54,-34.8},{-54,
                  -66},{-14,-66},{-14,-64},{4,-64},{4,-14},{-4,-14},{-4,86},{0,86},{0,100}},
                                           color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(rad.port_b, val1.port_a) annotation (Line(points={{43,-30},{20,-30},{20,
                  -42},{-8,-42}}, color={0,127,255}));
          connect(res.port_b, val2.port_a) annotation (Line(points={{-20,23.5},{-20,22},
                  {-10,22},{-10,-4},{-16,-4}}, color={0,127,255}));
          connect(inv.y, val2.y) annotation (Line(points={{-48.6,-30},{-32,-30},{-32,-22},
                  {-26,-22},{-26,-16}}, color={0,0,127}));
          connect(val1.y, traControlBus.opening) annotation (Line(points={{-18,-54},{-4,
                  -54},{-4,86},{0,86},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(cheVal.port_b, pum.port_a) annotation (Line(points={{10,10},{
                  10,22},{42,22},{42,32}}, color={0,127,255}));
          connect(rad.port_b, cheVal.port_a) annotation (Line(points={{43,-30},
                  {10,-30},{10,-10}}, color={0,127,255}));
        end RadiatorPressureBased_injection_likeThreeWayValveBis;

        model RadiatorPressureBased_injection_likeThreeWayValveTer
          "Pressure Based transfer system with mixing control"
          extends BaseClasses.PartialTransfer(final dp_nominal=rad.dp_nominal .+ val1.dpValve_nominal .+ res.dp_nominal .+ val1.dpFixed_nominal,
                                              final nParallelSup=1);

          replaceable parameter RecordsCollection.TransferDataBaseDefinition
            transferDataBaseDefinition(dpHeaSysValve_nominal=(dpRad_nominal .+
                dpHeaSysPreValve_nominal) ./ (1 .- valveAutho))
                                       constrainedby
            RecordsCollection.TransferDataBaseDefinition(
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final nZones=nParallelDem,
            final AFloor=ABui,
            final heiBui=hBui)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-62,-98},{-42,-78}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-112,-12},{-86,10}})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));
          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal .- dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            final dp_nominal=transferDataBaseDefinition.dpRad_nominal,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator"
            annotation (Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={43,-19})));

          IBPSA.Fluid.FixedResistances.PressureDrop res[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=transferDataBaseDefinition.dpHeaDistr_nominal,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-32.5,23.5})));

          IBPSA.Fluid.MixingVolumes.MixingVolume vol(
            redeclare package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final mSenFac=1,
            final m_flow_nominal=sum(rad.m_flow_nominal),
            final m_flow_small=1E-4*abs(sum(rad.m_flow_nominal)),
            final allowFlowReversal=allowFlowReversal,
            final V(displayUnit="l") = transferDataBaseDefinition.vol,
            final use_C_flow=false,
            nPorts=1 + nParallelDem) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-58,6})));
          IBPSA.Fluid.Movers.SpeedControlled_y     pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=sum(m_flow_nominal),
              final dp_nominal=1/sum({1/dp_nominal[i] for i in 1:nParallelDem}),
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-72,30})));

          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{34,-94},{54,-74}})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumRadData
            annotation (choicesAllMatching=true, Placement(transformation(extent={{58,78},{78,98}})));
          IBPSA.Fluid.Movers.SpeedControlled_y pum[nParallelDem](
            redeclare final package Medium = Medium,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final T_start=T_start,
            each final allowFlowReversal=allowFlowReversal,
            each final show_T=show_T,
            redeclare
              BESMod.Systems.RecordsCollection.Movers.AutomaticConfigurationData per(
              each final speed_rpm_nominal=pumRadData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal,
              final dp_nominal=dp_nominal,
              final rho=rho,
              each final V_flowCurve=pumRadData.V_flowCurve,
              each final dpCurve=pumRadData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            each final addPowerToMedium=pumRadData.addPowerToMedium,
            each final tau=pumRadData.tau,
            each final use_inputFilter=pumRadData.use_inputFilter,
            each final riseTime=pumRadData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=270,
                origin={42,22})));
          Modelica.Blocks.Sources.Constant m_flow_open[nParallelDem](k=1) annotation (
              Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=180,
                origin={141,29})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold[nParallelDem](
              threshold=transferDataBaseDefinition.leakageOpening)
            annotation (Placement(transformation(extent={{-140,-4},{-126,10}},rotation=180,
                origin={8,62})));
          Modelica.Blocks.Sources.Constant m_flow_closed[nParallelDem](k=0)
                                     annotation (Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=180,
                origin={141,89})));
          Modelica.Blocks.Logical.Switch switch1[nParallelDem] annotation (
              Placement(transformation(
                extent={{-24,-14},{-4,6}},
                rotation=180,
                origin={54,44})));
          Modelica.Blocks.Logical.Switch switch2 annotation (Placement(transformation(
                extent={{-16.8,-9.8},{-2.8,4.2}},
                rotation=270,
                origin={-62.2,51.2})));
          Modelica.Blocks.Sources.Constant m_flow_closed1(k=0)
            annotation (Placement(transformation(
                extent={{-9,-9},{9,9}},
                rotation=270,
                origin={-95,81})));
          Modelica.Blocks.Logical.GreaterThreshold greaterThreshold1(threshold=
                transferDataBaseDefinition.leakageOpening) annotation (Placement(
                transformation(
                extent={{-140,-4},{-126,10}},
                rotation=270,
                origin={-68,-42})));
          Modelica.Blocks.Sources.Constant m_flow_open1(k=1) annotation (Placement(
                transformation(
                extent={{-9,-9},{9,9}},
                rotation=270,
                origin={-35,85})));
          IBPSA.Fluid.Actuators.Valves.TwoWayPressureIndependent val1[nParallelDem](
              redeclare package Medium = Medium, m_flow_nominal=m_flow_nominal,
            dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal)
            annotation (Placement(transformation(
                extent={{-226,22},{-206,42}},
                rotation=180,
                origin={-234,-10})));
          IBPSA.Fluid.Actuators.Valves.TwoWayPressureIndependent val2[nParallelDem](
              redeclare package Medium = Medium, m_flow_nominal=m_flow_nominal,
            dpValve_nominal=transferDataBaseDefinition.dpHeaDistr_nominal ./ (1 .-
                transferDataBaseDefinition.valveAutho))
            annotation (Placement(transformation(
                extent={{-228,-20},{-208,0}},
                rotation=180,
                origin={-244,-14})));
          IBPSA.Fluid.FixedResistances.LosslessPipe pip[nParallelDem](
            redeclare package Medium = Medium,
            allowFlowReversal=false,
            m_flow_nominal=m_flow_nominal) annotation (Placement(transformation(
                extent={{-6,-12},{14,8}},
                rotation=90,
                origin={12,0})));
        protected
          Modelica.Blocks.Math.Feedback inv[nParallelDem]
            "Inversion of control signal" annotation (Placement(transformation(
                  extent={{-60,-36},{-48,-24}})));
          Modelica.Blocks.Sources.Constant uni[nParallelDem](final k=1)
            "Outputs one for bypass valve" annotation (Placement(transformation(
                  extent={{-80,-34},{-68,-22}})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{50.92,-21.2},{
                  50.92,-24},{86,-24},{86,-40},{100,-40}},
                                                  color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{50.92,-16.8},{
                  86,-16.8},{86,40},{100,40}},             color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(res[i].port_a, vol.ports[i + 1]) annotation (Line(points={{-45,23.5},
                    {-45,36},{-58,36},{-58,16}},   color={0,127,255}));
            connect(val1.y, traControlBus.opening) annotation (Line(points={{-18,-54},{-4,
                  -54},{-4,86},{0,86},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
            connect(val2[i].port_b, portTra_out[1]) annotation (Line(points={{-36,-4},{-44,
                  -4},{-44,-16},{-86,-16},{-86,-42},{-100,-42}}, color={0,127,255}));
            connect(val1[i].port_b, portTra_out[1]) annotation (Line(points={{-28,-42},{-64,
                  -42},{-64,-42},{-100,-42}}, color={0,127,255}));
            connect(pum[i].P, realToElecCon.PEleLoa)
            annotation (Line(points={{33,11},{33,-80},{32,-80}}, color={0,0,127}));
          end for;

          connect(portTra_in[1],pump.port_a)
            annotation (Line(points={{-100,38},{-92,38},{-92,30},{-82,30}},
                                                          color={0,127,255}));
          connect(pump.port_b, vol.ports[1]) annotation (Line(points={{-62,30},{-58,30},
                  {-58,16}},          color={0,127,255}));

          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{54.2,-83.8},{54.2,-84},{72,-84},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(realToElecCon.PEleLoa, pump.P) annotation (Line(points={{32,-80},
                  {22,-80},{22,39},{-61,39}},color={0,0,127}));
          connect(pum.port_b, rad.port_a) annotation (Line(points={{42,12},{42,3},{43,3},
                  {43,-8}}, color={0,127,255}));
          connect(res.port_b, pum.port_a)
            annotation (Line(points={{-20,23.5},{42,23.5},{42,32}}, color={0,127,255}));
          connect(greaterThreshold.u, traControlBus.opening) annotation (Line(points={{149.4,
                  59},{0,59},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(switch1.u2, greaterThreshold.y) annotation (Line(points={{80,
                  48},{86,48},{86,59},{133.3,59}}, color={255,0,255}));
          connect(switch1.y, pum.y) annotation (Line(points={{57,48},{28,48},{
                  28,28},{24,28},{24,22},{30,22}}, color={0,0,127}));
          connect(m_flow_closed.y, switch1.u3) annotation (Line(points={{131.1,89},{84,89},
                  {84,62},{80,62},{80,56}},             color={0,0,127}));
          connect(m_flow_open.y, switch1.u1) annotation (Line(points={{131.1,29},
                  {114,29},{114,26},{80,26},{80,40}}, color={0,0,127}));
          connect(switch2.y, pump.y) annotation (Line(points={{-65,53.3},{-65,
                  56},{-72,56},{-72,42}}, color={0,0,127}));
          connect(m_flow_open1.y, switch2.u1) annotation (Line(points={{-35,
                  75.1},{-35,69.4},{-59.4,69.4}}, color={0,0,127}));
          connect(m_flow_closed1.y, switch2.u3) annotation (Line(points={{-95,
                  71.1},{-95,66},{-76,66},{-76,69.4},{-70.6,69.4}}, color={0,0,
                  127}));
          connect(greaterThreshold1.y, switch2.u2) annotation (Line(points={{
                  -65,83.3},{-65,76.35},{-65,76.35},{-65,69.4}}, color={255,0,
                  255}));
          connect(greaterThreshold1.u, traControlBus.opening[1]) annotation (
              Line(points={{-65,99.4},{-65,104},{-16,104},{-16,86},{0,86},{0,
                  100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(uni.y, inv.u1) annotation (Line(points={{-67.4,-28},{-67.4,-30},{-58.8,
                  -30}},             color={0,0,127}));
          connect(inv.u2, traControlBus.opening) annotation (Line(points={{-54,-34.8},{-54,
                  -66},{-14,-66},{-14,-64},{4,-64},{4,-14},{-4,-14},{-4,86},{0,86},{0,100}},
                                           color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(rad.port_b, val1.port_a) annotation (Line(points={{43,-30},{14,-30},{14,
                  -42},{-8,-42}}, color={0,127,255}));
          connect(res.port_b, val2.port_a) annotation (Line(points={{-20,23.5},{-20,22},
                  {-10,22},{-10,-4},{-16,-4}}, color={0,127,255}));
          connect(inv.y, val2.y) annotation (Line(points={{-48.6,-30},{-32,-30},{-32,-22},
                  {-26,-22},{-26,-16}}, color={0,0,127}));
          connect(val1.y, traControlBus.opening) annotation (Line(points={{-18,-54},{-4,
                  -54},{-4,86},{0,86},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(pip.port_a, rad.port_b)
            annotation (Line(points={{14,-6},{14,-30},{43,-30}}, color={0,127,255}));
          connect(pip.port_b, pum.port_a) annotation (Line(points={{14,14},{14,22},{42,22},
                  {42,32}}, color={0,127,255}));

        end RadiatorPressureBased_injection_likeThreeWayValveTer;

        model RadiatorPressureBased_PICV
          "Pressure Based transfer system with a PICV"
          extends BaseClasses.PartialTransfer(final dp_nominal=rad.dp_nominal .+ val.dpValve_nominal .+ res.dp_nominal .+ val.dpFixed_nominal,
                                              final nParallelSup=1);

          replaceable parameter RecordsCollection.TransferDataBaseDefinition
            transferDataBaseDefinition constrainedby
            RecordsCollection.TransferDataBaseDefinition(
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final nZones=nParallelDem,
            final AFloor=ABui,
            final heiBui=hBui)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-62,-98},{-42,-78}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-98,78},{-72,100}})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));
          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal .- dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            final dp_nominal=transferDataBaseDefinition.dpRad_nominal,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator"
            annotation (Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={-1,-49})));

          IBPSA.Fluid.FixedResistances.PressureDrop res[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=transferDataBaseDefinition.dpHeaDistr_nominal,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-34.5,37.5})));

          IBPSA.Fluid.MixingVolumes.MixingVolume vol(
            redeclare package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final mSenFac=1,
            final m_flow_nominal=sum(rad.m_flow_nominal),
            final m_flow_small=1E-4*abs(sum(rad.m_flow_nominal)),
            final allowFlowReversal=allowFlowReversal,
            final V(displayUnit="l") = transferDataBaseDefinition.vol,
            final use_C_flow=false,
            nPorts=1 + nParallelDem) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-58,18})));
          IBPSA.Fluid.Movers.SpeedControlled_y     pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=sum(m_flow_nominal),
              final dp_nominal=1/sum({1/dp_nominal[i] for i in 1:nParallelDem}),
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-74,38})));

          Modelica.Blocks.Sources.Constant m_flow1(k=1)   annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-48,68})));

          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{34,-94},{54,-74}})));
          IBPSA.Fluid.Actuators.Valves.TwoWayPressureIndependent val[nParallelDem](
              redeclare package Medium = Medium,
            allowFlowReversal=allowFlowReversal, m_flow_nominal=m_flow_nominal,
            show_T=show_T,
            from_dp=true,
            dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            use_inputFilter=false,
            dpFixed_nominal=transferDataBaseDefinition.dpHeaSysPreValve_nominal,

            l=transferDataBaseDefinition.leakageOpening,
            l2=0.0001)
            annotation (Placement(transformation(extent={{-30,-10},{-10,10}},rotation=270,
                origin={2,-12})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{6.92,
                  -51.2},{6.92,-50},{84,-50},{84,-40},{100,-40}},
                                                  color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{6.92,
                  -46.8},{80,-46.8},{80,40},{100,40}},     color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(rad[i].port_b, portTra_out[1]) annotation (Line(points={{-1,-60},
                    {-1,-62},{-86,-62},{-86,-42},{-100,-42}},
                               color={0,127,255}));
            connect(res[i].port_a, vol.ports[i + 1]) annotation (Line(points={{-47,37.5},
                    {-56,37.5},{-56,28},{-58,28}}, color={0,127,255}));
          end for;

          connect(portTra_in[1],pump.port_a)
            annotation (Line(points={{-100,38},{-84,38}}, color={0,127,255}));
          connect(pump.port_b, vol.ports[1]) annotation (Line(points={{-64,38},{-62,38},
                  {-62,28},{-58,28}}, color={0,127,255}));

          connect(m_flow1.y,pump. y)
            annotation (Line(points={{-59,68},{-74,68},{-74,50}}, color={0,0,127}));
          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{54.2,-83.8},{54.2,-84},{72,-84},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(realToElecCon.PEleLoa, pump.P) annotation (Line(points={{32,-80},{
                  22,-80},{22,47},{-63,47}}, color={0,0,127}));
          connect(res.port_b, val.port_a) annotation (Line(points={{-22,37.5},{
                  -22,36},{2,36},{2,18}}, color={0,127,255}));
          connect(val.port_b, rad.port_a) annotation (Line(points={{2,-2},{-1,
                  -2},{-1,-38}}, color={0,127,255}));
          connect(val.y, traControlBus.opening) annotation (Line(points={{14,8},
                  {14,6},{24,6},{24,86},{0,86},{0,100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
        end RadiatorPressureBased_PICV;

        model RadiatorPressureBased_PICV_hydraulicSeparator
          "Pressure Based transfer system with a PICV and a hydraulic separator"
          extends BaseClasses.PartialTransfer(final dp_nominal=rad.dp_nominal .+ val.dpValve_nominal .+ res.dp_nominal .+ val.dpFixed_nominal,
                                              final nParallelSup=1);

          replaceable parameter RecordsCollection.TransferDataBaseDefinition
            transferDataBaseDefinition constrainedby
            RecordsCollection.TransferDataBaseDefinition(
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final nZones=nParallelDem,
            final AFloor=ABui,
            final heiBui=hBui)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-62,-98},{-42,-78}})));

          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            pumpData annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-98,78},{-72,100}})));

          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
            radParameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-100,-98},{-80,-78}})));
          IBPSA.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 rad[nParallelDem](
            each final allowFlowReversal=allowFlowReversal,
            final m_flow_nominal=m_flow_nominal,
            each final show_T=show_T,
            each final energyDynamics=energyDynamics,
            each final p_start=p_start,
            each final nEle=radParameters.nEle,
            each final fraRad=radParameters.fraRad,
            final Q_flow_nominal=Q_flow_nominal.*f_design,
            final T_a_nominal=TSup_nominal,
            final T_b_nominal=TSup_nominal .- dTTra_nominal,
            final TAir_nominal=TDem_nominal,
            final TRad_nominal=TDem_nominal,
            each final n=radParameters.n,
            each final deltaM=0.3,
            final dp_nominal=transferDataBaseDefinition.dpRad_nominal,
            redeclare package Medium = Medium,
            each final T_start=T_start) "Radiator"
            annotation (Placement(transformation(
                extent={{11,11},{-11,-11}},
                rotation=90,
                origin={-13,-25})));

          IBPSA.Fluid.FixedResistances.PressureDrop res[nParallelDem](
            redeclare package Medium = Medium,
            each final dp_nominal=transferDataBaseDefinition.dpHeaDistr_nominal,
            final m_flow_nominal=m_flow_nominal) "Hydraulic resistance of supply"
            annotation (Placement(transformation(
                extent={{-12.5,-13.5},{12.5,13.5}},
                rotation=0,
                origin={-0.5,37.5})));

          IBPSA.Fluid.MixingVolumes.MixingVolume vol(
            redeclare package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final mSenFac=1,
            final m_flow_nominal=sum(rad.m_flow_nominal),
            final m_flow_small=1E-4*abs(sum(rad.m_flow_nominal)),
            final allowFlowReversal=allowFlowReversal,
            final V(displayUnit="l") = transferDataBaseDefinition.vol,
            final use_C_flow=false,
            nPorts=1 + nParallelDem) annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-20,20})));
          IBPSA.Fluid.Movers.SpeedControlled_y     pump(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
                                                                                         per(
              final speed_rpm_nominal=pumpData.speed_rpm_nominal,
              final m_flow_nominal=sum(m_flow_nominal),
              final dp_nominal=1/sum({1/dp_nominal[i] for i in 1:nParallelDem}),
              final rho=rho,
              final V_flowCurve=pumpData.V_flowCurve,
              final dpCurve=pumpData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=pumpData.addPowerToMedium,
            final tau=pumpData.tau,
            final use_inputFilter=pumpData.use_inputFilter,
            final riseTime=pumpData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1)                                    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-48,36})));

          Modelica.Blocks.Sources.Constant m_flow1(k=1)   annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=180,
                origin={-20,74})));

          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{34,-94},{54,-74}})));
          IBPSA.Fluid.Actuators.Valves.TwoWayPressureIndependent val[nParallelDem](
              redeclare package Medium = Medium,
            allowFlowReversal=allowFlowReversal, m_flow_nominal=m_flow_nominal,
            show_T=show_T,
            from_dp=true,
            dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            use_inputFilter=false,
            dpFixed_nominal=transferDataBaseDefinition.dpHeaSysPreValve_nominal,
            l=transferDataBaseDefinition.leakageOpening,
            l2=0.0001)
            annotation (Placement(transformation(extent={{-30,-10},{-10,10}},rotation=270,
                origin={24,-14})));
          IBPSA.Fluid.Actuators.Valves.TwoWayPressureIndependent val1
                                                                    [nParallelDem](
            redeclare package Medium = Medium,
            allowFlowReversal=allowFlowReversal,
            m_flow_nominal=m_flow_nominal,
            show_T=show_T,
            from_dp=true,
            dpValve_nominal=transferDataBaseDefinition.dpHeaSysValve_nominal,
            use_inputFilter=false,
            dpFixed_nominal=transferDataBaseDefinition.dpHeaSysPreValve_nominal,
            l=transferDataBaseDefinition.leakageOpening,
            l2=0.0001)
            annotation (Placement(transformation(extent={{-30,-10},{-10,10}},rotation=270,
                origin={-58,-36})));
        protected
          Modelica.Blocks.Math.Feedback inv[nParallelDem]
            "Inversion of control signal" annotation (Placement(transformation(
                  extent={{-36,-66},{-24,-54}})));
          Modelica.Blocks.Sources.Constant uni[nParallelDem](final k=1)
            "Outputs one for bypass valve" annotation (Placement(transformation(
                  extent={{-64,-62},{-52,-50}})));
        equation
          connect(rad.heatPortRad, heatPortRad) annotation (Line(points={{-5.08,-27.2},
                  {40,-27.2},{40,-40},{100,-40}}, color={191,0,0}));
          connect(rad.heatPortCon, heatPortCon) annotation (Line(points={{-5.08,-22.8},
                  {-5.08,-26},{40,-26},{40,40},{100,40}},  color={191,0,0}));

          for i in 1:nParallelDem loop
            connect(rad[i].port_b, portTra_out[1]) annotation (Line(points={{-13,-36},
                    {-13,-42},{-100,-42}},
                               color={0,127,255}));
            connect(res[i].port_a, vol.ports[i + 1]) annotation (Line(points={{-13,37.5},
                    {-26,37.5},{-26,30},{-20,30}}, color={0,127,255}));
            connect(val1[i].port_b, portTra_out[1]) annotation (Line(points={{-58,-26},{-58,
                  -42},{-100,-42}}, color={0,127,255}));
            connect(val1[i].port_a, portTra_in[1]) annotation (Line(points={{-58,-6},{-58,
                  22},{-78,22},{-78,38},{-100,38}}, color={0,127,255}));
          end for;

          connect(pump.port_b, vol.ports[1]) annotation (Line(points={{-38,36},{-26,36},
                  {-26,30},{-20,30}}, color={0,127,255}));

          connect(m_flow1.y,pump. y)
            annotation (Line(points={{-31,74},{-48,74},{-48,48}}, color={0,0,127}));
          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{54.2,-83.8},{54.2,-84},{72,-84},{72,-98}},
              color={0,0,0},
              thickness=1));
          connect(realToElecCon.PEleLoa, pump.P) annotation (Line(points={{32,-80},{68,-80},
                  {68,-42},{50,-42},{50,36},{52,36},{52,45},{-37,45}},
                                             color={0,0,127}));
          connect(res.port_b, val.port_a)
            annotation (Line(points={{12,37.5},{12,36},{24,36},{24,16}},
                                                         color={0,127,255}));
          connect(val.port_b, rad.port_a) annotation (Line(points={{24,-4},{24,-6},{-13,
                  -6},{-13,-14}},
                              color={0,127,255}));
          connect(val.y, traControlBus.opening) annotation (Line(points={{36,6},{36,4},{
                  42,4},{42,86},{0,86},{0,100}},   color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(portTra_in[1], pump.port_a) annotation (Line(points={{-100,38},{-98,38},
                  {-98,36},{-58,36}}, color={0,127,255}));
          connect(inv.y, val1.y) annotation (Line(points={{-24.6,-60},{-20,-60},{-20,-40},
                  {-40,-40},{-40,-16},{-46,-16}}, color={0,0,127}));
          connect(uni.y, inv.u1) annotation (Line(points={{-51.4,-56},{-40,-56},{-40,-60},
                  {-34.8,-60}}, color={0,0,127}));
          connect(inv.u2, traControlBus.opening) annotation (Line(points={{-30,-64.8},{-30,
                  -70},{4,-70},{4,22},{16,22},{16,42},{42,42},{42,86},{0,86},{0,100}},
                color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));

        end RadiatorPressureBased_PICV_hydraulicSeparator;
      end Transfer;

      package Interfaces
        extends Modelica.Icons.InterfacesPackage;

        expandable connector GenerationControlBus
          "data bus with control signals for generation model"
          extends BESMod.Utilities.Icons.ControlBus;

          annotation (
          defaultComponentName = "sigBusGen",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end GenerationControlBus;

        expandable connector DistributionControlBus
          "data bus with control signals for generation model"
        extends BESMod.Utilities.Icons.ControlBus;

        annotation (
          defaultComponentName = "sigBusDistr",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end DistributionControlBus;

        expandable connector TransferControlBus
          "data bus with control signals for generation model"
          extends BESMod.Utilities.Icons.ControlBus;

        annotation (
          defaultComponentName = "traControlBus",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end TransferControlBus;

        expandable connector GenerationOutputs
          "Bus with ouputs of the generation system"
          extends BESMod.Utilities.Icons.KPIBus;

          annotation (
          defaultComponentName = "outBusGen",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end GenerationOutputs;

        expandable connector TransferOutputs "Bus with ouputs of the tramsfer system"
          extends BESMod.Utilities.Icons.KPIBus;

          annotation (
          defaultComponentName = "outBusTra",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end TransferOutputs;

        expandable connector DistributionOutputs
          "Bus with ouputs of the distribution system"
          extends BESMod.Utilities.Icons.KPIBus;

          annotation (
          defaultComponentName = "outBusDist",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end DistributionOutputs;

        expandable connector ControlOutputs "Bus with ouputs of the control system"
          extends BESMod.Utilities.Icons.KPIBus;

          annotation (
          defaultComponentName = "outBusCtrl",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end ControlOutputs;

        expandable connector SystemControlBus
          "Home energy management control bus to hydraulic subsystem"
          extends BESMod.Utilities.Icons.ControlBus;
          annotation (
          defaultComponentName = "sigBusHyd",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end SystemControlBus;
      end Interfaces;

      model HydraulicSystem "Build your custom hydraulic system"
        extends BaseClasses.PartialHydraulicSystem;

      end HydraulicSystem;

      package BaseClasses "Package with Partial models for hydraulic systems"
        extends Modelica.Icons.BasesPackage;
        partial model PartialHydraulicSystem
          "Complete hydraulic system model"
          extends BESMod.HugosProject.Systems.BaseClasses.PartialFluidSubsystem;
          parameter Boolean subsystemDisabled "To enable the icon if the subsystem is disabled" annotation (Dialog(tab="Graphics"));

          replaceable package MediumDHW = IBPSA.Media.Water constrainedby
            Modelica.Media.Interfaces.PartialMedium
            annotation (__Dymola_choicesAllMatching=true);
          Electrical.Interfaces.InternalElectricalPin internalElectricalPin
            annotation (Placement(transformation(extent={{160,-150},{180,-130}})));
          replaceable parameter
            BESMod.HugosProject.Systems.Hydraulical.RecordsCollection.HydraulicSystemBaseDataDefinition
            hydraulicSystemParameters constrainedby
            BESMod.HugosProject.Systems.Hydraulical.RecordsCollection.HydraulicSystemBaseDataDefinition
            annotation (choicesAllMatching=true, Placement(transformation(
                  extent={{-178,-136},{-158,-116}})));

          replaceable
            BESMod.HugosProject.Systems.Hydraulical.Generation.BaseClasses.PartialGeneration
            generation(dTTra_nominal=fill(1, generation.nParallelDem),
              dp_nominal=fill(0, generation.nParallelDem)) constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Generation.BaseClasses.PartialGeneration(
            final TDem_nominal=distribution.TSup_nominal,
            final Q_flow_nominal={sum(distribution.Q_flow_nominal)*generation.f_design[
                i] for i in 1:generation.nParallelDem},
            redeclare package Medium = Medium,
            final dpDem_nominal=distribution.dpSup_nominal,
            final energyDynamics=energyDynamics,
            final massDynamics=massDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final TOda_nominal=hydraulicSystemParameters.TOda_nominal,
            final X_start=X_start,
            final C_start=C_start,
            final TAmb=hydraulicSystemParameters.TAmb,
            final C_nominal=C_nominal,
            final mSenFac=mSenFac,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            final rho=rho,
            final cp=cp) annotation (choicesAllMatching=true, Placement(
                transformation(extent={{-140,-104},{-24,28}})));
          replaceable
            BESMod.HugosProject.Systems.Hydraulical.Control.BaseClasses.PartialControl
            control constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Control.BaseClasses.PartialControl(
            final generationParameters(
              final nParallelDem=generation.nParallelDem,
              final nParallelSup=generation.nParallelSup,
              final Q_flow_nominal=generation.Q_flow_nominal,
              final TOda_nominal=hydraulicSystemParameters.TOda_nominal,
              final TDem_nominal=generation.TDem_nominal,
              final TSup_nominal=generation.TSup_nominal,
              final dTTra_nominal=generation.dTTra_nominal,
              final m_flow_nominal=generation.m_flow_nominal,
              final dp_nominal=generation.dp_nominal,
              final dTLoss_nominal=generation.dTLoss_nominal,
              final f_design=generation.f_design,
              final QLoss_flow_nominal=generation.QLoss_flow_nominal),
            final distributionParameters(
              final nParallelDem=distribution.nParallelDem,
              final nParallelSup=distribution.nParallelSup,
              final Q_flow_nominal=distribution.Q_flow_nominal,
              final TDem_nominal=distribution.TDem_nominal,
              final TSup_nominal=distribution.TSup_nominal,
              final dTTra_nominal=distribution.dTTra_nominal,
              final m_flow_nominal=distribution.m_flow_nominal,
              final dp_nominal=distribution.dp_nominal,
              final dTLoss_nominal=distribution.dTLoss_nominal,
              final f_design=distribution.f_design,
              final TOda_nominal=hydraulicSystemParameters.TOda_nominal,
              final QLoss_flow_nominal=distribution.QLoss_flow_nominal,
              final mDHW_flow_nominal=distribution.mDHW_flow_nominal,
              final QDHW_flow_nominal=distribution.QDHW_flow_nominal,
              final TDHW_nominal=distribution.TDHW_nominal,
              final VDHWDay=distribution.VDHWDay,
              final TDHWCold_nominal=distribution.TDHWCold_nominal,
              final dTTraDHW_nominal=distribution.dTTraDHW_nominal),
            final transferParameters(
              final nParallelDem=transfer.nParallelDem,
              final nParallelSup=transfer.nParallelSup,
              final Q_flow_nominal=transfer.Q_flow_nominal,
              final TOda_nominal=hydraulicSystemParameters.TOda_nominal,
              final TDem_nominal=transfer.TDem_nominal,
              final TSup_nominal=transfer.TSup_nominal,
              final dTTra_nominal=transfer.dTTra_nominal,
              final m_flow_nominal=transfer.m_flow_nominal,
              final dp_nominal=transfer.dp_nominal,
              final dTLoss_nominal=transfer.dTLoss_nominal,
              final f_design=transfer.f_design,
              final QLoss_flow_nominal=transfer.QLoss_flow_nominal))
            annotation (choicesAllMatching=true, Placement(transformation(
                  extent={{-132,54},{154,122}})));
          replaceable
            BESMod.HugosProject.Systems.Hydraulical.Distribution.BaseClasses.PartialDistribution
            distribution(
            dTTra_nominal=fill(1, distribution.nParallelDem),
            m_flow_nominal=fill(0, distribution.nParallelDem),
            dTTraDHW_nominal=1,
            dpSup_nominal=fill(0, distribution.nParallelDem),
            dpDem_nominal=fill(0, distribution.nParallelDem)) constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Distribution.BaseClasses.PartialDistribution(
            redeclare package Medium = Medium,
            redeclare final package MediumDHW = MediumDHW,
            redeclare final package MediumGen = Medium,
            final energyDynamics=energyDynamics,
            final massDynamics=massDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final X_start=X_start,
            final C_start=C_start,
            final C_nominal=C_nominal,
            final mSenFac=mSenFac,
            final TAmb=hydraulicSystemParameters.TAmb,
            final Q_flow_nominal=transfer.Q_flow_nominal .* transfer.f_design,
            final TDem_nominal=transfer.TSup_nominal,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            final rho=rho,
            final cp=cp,
            final TOda_nominal=hydraulicSystemParameters.TOda_nominal,
            final mDem_flow_nominal=transfer.m_flow_nominal,
            final mSup_flow_nominal=generation.m_flow_nominal,
            final mDHW_flow_nominal=hydraulicSystemParameters.dhwParas.mDHW_flow_nominal,
            final QDHW_flow_nominal=hydraulicSystemParameters.dhwParas.QDHW_flow_nominal,
            final VDHWDay=hydraulicSystemParameters.dhwParas.VDHWDay,
            final TDHWCold_nominal=hydraulicSystemParameters.dhwParas.TDHWCold_nominal,
            final TDHW_nominal=hydraulicSystemParameters.dhwParas.TDHW_nominal)
            annotation (choicesAllMatching=true, Placement(transformation(
                  extent={{-12,-104},{90,28}})));

          replaceable
            BESMod.HugosProject.Systems.Hydraulical.Transfer.BaseClasses.PartialTransfer
            transfer(dp_nominal=fill(0, transfer.nParallelDem)) constrainedby
            BESMod.HugosProject.Systems.Hydraulical.Transfer.BaseClasses.PartialTransfer(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final massDynamics=massDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final X_start=X_start,
            final C_start=C_start,
            final AZone=hydraulicSystemParameters.AZone,
            final hZone=hydraulicSystemParameters.hZone,
            final ABui=hydraulicSystemParameters.ABui,
            final hBui=hydraulicSystemParameters.hBui,
            final dpSup_nominal=distribution.dpDem_nominal,
            final C_nominal=C_nominal,
            final mSenFac=mSenFac,
            final TOda_nominal=hydraulicSystemParameters.TOda_nominal,
            final nParallelDem=hydraulicSystemParameters.nZones,
            final TAmb=hydraulicSystemParameters.TAmb,
            final Q_flow_nominal=hydraulicSystemParameters.Q_flow_nominal,
            final TDem_nominal=hydraulicSystemParameters.TZone_nominal,
            final TSup_nominal=hydraulicSystemParameters.TSup_nominal,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            final rho=rho,
            final cp=cp) annotation (choicesAllMatching=true, Placement(
                transformation(extent={{112,-44},{180,28}})));
          IBPSA.BoundaryConditions.WeatherData.Bus
              weaBus "Weather data bus" annotation (Placement(transformation(extent={{-200,56},
                    {-158,100}}),        iconTransformation(extent={{-188,-10},{-168,10}})));
          BESMod.HugosProject.Systems.Interfaces.HydraulicOutputs outBusHyd
            annotation (Placement(transformation(extent={{-30,-166},{28,-118}})));

          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortCon[hydraulicSystemParameters.nZones]
            "Heat port for convective heat transfer with room air temperature"
            annotation (Placement(transformation(extent={{190,68},{210,88}}),
                iconTransformation(extent={{190,68},{210,88}})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortRad[hydraulicSystemParameters.nZones]
            "Heat port for radiative heat transfer with room radiation temperature"
            annotation (Placement(transformation(extent={{190,-10},{210,10}}),
                iconTransformation(extent={{190,-10},{210,10}})));
          Modelica.Fluid.Interfaces.FluidPort_b portDHW_out(redeclare final
              package Medium =
                       MediumDHW) "Outlet for the distribution to the DHW" annotation (
              Placement(transformation(extent={{190,-70},{210,-50}}),iconTransformation(
                  extent={{188,-76},{208,-56}})));
          Modelica.Fluid.Interfaces.FluidPort_a portDHW_in(redeclare final
              package Medium =
                       MediumDHW) "Inet for the distribution from the DHW" annotation (
              Placement(transformation(extent={{190,-130},{210,-110}}),
                                                                     iconTransformation(
                  extent={{188,-116},{208,-96}})));
          BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
            annotation (Placement(transformation(extent={{-72,116},{-30,162}}),
                iconTransformation(extent={{-106,116},{-56,164}})));
          BESMod.HugosProject.Systems.Interfaces.BuiMeaBus buiMeaBus
            annotation (Placement(transformation(extent={{110,122},{156,160}}),
                iconTransformation(extent={{68,120},{114,158}})));

          Interfaces.SystemControlBus sigBusHyd annotation (Placement(transformation(
                  extent={{12,120},{58,160}}), iconTransformation(extent={{12,120},{
                    58,160}})));
          Utilities.Electrical.MultiSumElec multiSumElec(nPorts=3) annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={132,-124})));
        equation
          connect(generation.portGen_out,distribution. portGen_in) annotation (Line(
                points={{-24,14.8},{-16,14.8},{-16,14},{-10,14},{-10,14.8},{-12,14.8}},
                                                                      color={0,127,255}));
          connect(generation.portGen_in,distribution. portGen_out) annotation (Line(
                points={{-24,-11.6},{-12,-11.6}},                           color={0,127,
                  255}));
          connect(transfer.portTra_out,distribution. portBui_in) annotation (Line(
                points={{112,-23.12},{112,-11.6},{90,-11.6}},
                                                         color={0,127,255}));
          connect(distribution.portBui_out,transfer. portTra_in) annotation (Line(
                points={{90,14.8},{112,14.8},{112,6.4}},color={0,127,255}));
          connect(control.sigBusGen,generation. sigBusGen) annotation (
              Line(
              points={{-79.5667,54.34},{-80,54.34},{-80,26.68},{-80.84,26.68}},
              color={215,215,215},
              thickness=0.5));
          connect(control.sigBusDistr,distribution. sigBusDistr)
            annotation (Line(
              points={{11.5958,54},{11.5958,38},{32,38},{32,28.66},{39,28.66}},
              color={215,215,215},
              thickness=0.5));
          connect(transfer.heatPortCon, heatPortCon) annotation (Line(points={{180,6.4},
                  {192,6.4},{192,78},{200,78}}, color={191,0,0}));
          connect(transfer.heatPortRad, heatPortRad) annotation (Line(points={{180,
                  -22.4},{200,-22.4},{200,0}},
                                        color={191,0,0}));
          connect(distribution.outBusDist, outBusHyd.storage) annotation (Line(
              points={{39,-104},{39,-142},{-1,-142}},
              color={135,135,135},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(generation.outBusGen, outBusHyd.generation) annotation (Line(
              points={{-82,-104},{-82,-142},{-1,-142}},
              color={135,135,135},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(transfer.outBusTra, outBusHyd.transfer) annotation (Line(
              points={{146,-45.44},{146,-68},{214,-68},{214,-142},{-1,-142}},
              color={135,135,135},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(control.outBusCtrl, outBusHyd.control) annotation (Line(
              points={{154,88},{214,88},{214,-142},{-1,-142}},
              color={135,135,135},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(weaBus,control. weaBus) annotation (Line(
              points={{-179,78},{-174,78},{-174,89.7},{-128.425,89.7}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(portDHW_out,distribution. portDHW_out) annotation (Line(points={{200,-60},
                  {100,-60},{100,-52},{96,-52},{96,-51.2},{90,-51.2}},
                                                     color={0,127,255}));
          connect(distribution.portDHW_in, portDHW_in) annotation (Line(points={{90,
                  -77.6},{98,-77.6},{98,-78},{192,-78},{192,-120},{200,-120}},
                                                      color={0,127,255}));
          connect(weaBus,generation. weaBus) annotation (Line(
              points={{-179,78},{-179,76},{-176,76},{-176,78},{-174,78},{-174,0},{
                  -138.84,0},{-138.84,1.6}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(control.sigBusTra,transfer. traControlBus) annotation (Line(
              points={{114.675,54},{116,54},{116,42},{146,42},{146,28}},
              color={215,215,215},
              thickness=0.5));
          connect(useProBus,control. useProBus) annotation (Line(
              points={{-51,139},{-51,132.87},{-56.3292,132.87},{-56.3292,122.68}},
              color={0,127,0},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(buiMeaBus,control. buiMeaBus) annotation (Line(
              points={{133,141},{50,141},{50,138},{49.7292,138},{49.7292,123.02}},
              color={255,128,0},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));

          connect(sigBusHyd,control. sigBusHyd) annotation (Line(
              points={{35,140},{-5.68333,140},{-5.68333,122.34}},
              color={215,215,215},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(multiSumElec.internalElectricalPinOut, internalElectricalPin)
            annotation (Line(
              points={{142,-124},{170,-124},{170,-140}},
              color={0,0,0},
              thickness=1));
          connect(transfer.internalElectricalPin, multiSumElec.internalElectricalPinIn[
            1]) annotation (Line(
              points={{170.48,-43.28},{170.48,-106},{110,-106},{110,-124.133},{
                  122.2,-124.133}},
              color={0,0,0},
              thickness=1));
          connect(distribution.internalElectricalPin, multiSumElec.internalElectricalPinIn[
            2]) annotation (Line(
              points={{74.7,-102.68},{74.7,-123.8},{122.2,-123.8}},
              color={0,0,0},
              thickness=1));
          connect(generation.internalElectricalPin, multiSumElec.internalElectricalPinIn[
            3]) annotation (Line(
              points={{-40.24,-102.68},{-40.24,-123.467},{122.2,-123.467}},
              color={0,0,0},
              thickness=1));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-180,-140},
                    {200,140}}), graphics={
                Rectangle(
                  extent={{-180,140},{200,-140}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-46,84},{-62,52},{-30,52},{-46,84}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{-20,84},{10,84}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{62,86},{66,86}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{10,100},{62,66},{62,100},{10,66},{10,100}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{36,82},{36,116}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{46,116},{26,116}},
                  color={0,0,0},
                  thickness=0.5),
                Rectangle(
                  extent={{68,102},{86,-20}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{92,102},{110,-20}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{116,102},{134,-20}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{140,102},{158,-20}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Rectangle(
                  extent={{164,102},{182,-20}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={0,0,0},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-72,100},{-20,66},{-20,100},{-72,66},{-72,100}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{-46,52},{-46,-66},{190,-66}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{-104,84},{-74,84}},
                  color={0,0,0},
                  thickness=0.5),
                Ellipse(
                  extent={{-104,114},{-166,52}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-150,112},{-104,84}},
                  color={0,0,0},
                  thickness=0.5),
                Line(
                  points={{-152,58},{-104,84}},
                  color={0,0,0},
                  thickness=0.5),     Text(
                  extent={{-96,-130},{108,-226}},
                  lineColor={0,0,0},
                  textString="%name%"),
              Ellipse(
                visible=subsystemDisabled,
                extent={{-74,80},{86,-80}},
                lineColor={215,215,215},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                visible=subsystemDisabled,
                extent={{-49,55},{61,-55}},
                lineColor={255,255,255},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                visible=subsystemDisabled,
                extent={{-60,14},{60,-14}},
                lineColor={255,0,0},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid,
                rotation=45,
                  origin={4,-2})}),
                                  Diagram(graphics,
                                          coordinateSystem(preserveAspectRatio=false,
                  extent={{-180,-140},{200,140}})));
        end PartialHydraulicSystem;
      end BaseClasses;

      package RecordsCollection "Record data for the options in this subsystem"
        extends Modelica.Icons.RecordsPackage;

        record HydraulicSystemBaseDataDefinition
          extends
            BESMod.HugosProject.Systems.RecordsCollection.SupplySystemBaseDataDefinition;
          parameter
            BESMod.HugosProject.Systems.Demand.DHW.RecordsCollection.DHWDesignParameters
            dhwParas annotation (Dialog(group="DHW"));
        end HydraulicSystemBaseDataDefinition;
      end RecordsCollection;
    end Hydraulical;

    package Ventilation "Subsystem for ventilation of thermal zone"
      extends BESMod.Utilities.Icons.SystemIcon;

      package Control
      extends BESMod.Utilities.Icons.ControlPackage;
        model NoControl "Dont control anything"
          extends BaseClasses.PartialControl;
        end NoControl;

        model SummerPIDByPass "Bypass the HEX in summer"
          extends BaseClasses.PartialControl;
          parameter Boolean use_bypass = true "=false to disable the bypass";

          Components.SummerByPass                     summerByPass
                                                if use_bypass
            annotation (Placement(transformation(extent={{-30,-14},{22,36}})));
          Modelica.Blocks.Sources.Constant constZero(k=0) if not use_bypass
            "Bypass is not used"
            annotation (Placement(transformation(extent={{-6,-54},{14,-34}})));

          Modelica.Blocks.Math.MinMax minMaxMea(final nu=distributionParameters.nParallelDem)
            annotation (Placement(transformation(extent={{-88,32},{-68,52}})));
          Modelica.Blocks.Sources.Constant constZero1(k=distributionParameters.TDem_nominal[
                1])
            "Bypass is not used"
            annotation (Placement(transformation(extent={{-82,-30},{-62,-10}})));
        equation
          connect(summerByPass.TOda, weaBus.TDryBul) annotation (Line(points={{-35.2,26},
                  {-44,26},{-44,68},{1,68},{1,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(constZero.y, sigBusGen.uByPass) annotation (Line(
              points={{15,-44},{60,-44},{60,-100}},
              color={0,0,127},
              pattern=LinePattern.Dash), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(summerByPass.y, sigBusGen.uByPass) annotation (Line(points={{24.6,11},
                  {60,11},{60,-100}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(minMaxMea.u, buiMeaBus.TZoneMea) annotation (Line(points={{-88,42},{-104,
                  42},{-104,79},{-102,79}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(minMaxMea.yMax, summerByPass.TMea) annotation (Line(points={{-67,48},{
                  -52,48},{-52,11},{-35.2,11}}, color={0,0,127}));
          connect(summerByPass.TZoneSet, constZero1.y) annotation (Line(points={{-35.2,
                  -4},{-34,-4},{-34,-20},{-61,-20}}, color={0,0,127}));
        end SummerPIDByPass;

        package Components "Package with additional models or components used for subsystems not present in any existing model library"
          model SummerByPass

            parameter Integer day_summer_start = 31 + 28 + 31 + 30 "Day the summertime starts. Default to 1th of May";
            parameter Integer day_summer_end = day_summer_start + 31 + 30 + 31 + 31 + 30
                                                                                        "Day the summertime ends. Default to 30th of September";
            parameter Real k=1 "Gain of controller";
            parameter Modelica.Units.SI.Time Ti=120 "Time constant of Integrator block";
            IBPSA.Controls.Continuous.LimPID conPIDHeatingCooling(
              final controllerType=Modelica.Blocks.Types.SimpleController.PI,
              final k=k,
              final Ti=Ti,
              final yMax=1,
              final yMin=0,
              final initType=Modelica.Blocks.Types.Init.InitialOutput,
              final y_start=0,
              final reverseActing=false)
              annotation (Placement(transformation(extent={{-2,-58},{18,-38}})));
            Modelica.Blocks.Logical.Switch        switch1
              annotation (Placement(transformation(extent={{46,10},{66,-10}})));
            Modelica.Blocks.Sources.Constant constClosed(k=0)
              annotation (Placement(transformation(extent={{0,30},{20,50}})));
            Modelica.Blocks.Sources.BooleanExpression isSummer(y=(time > 86400*
                  day_summer_start) and (time < 86400*day_summer_end))
              annotation (Placement(transformation(extent={{-74,16},{-44,-10}})));
            Modelica.Blocks.Logical.And and1
              annotation (Placement(transformation(extent={{-14,-10},{6,10}})));
            Modelica.Blocks.Logical.Less and2
              annotation (Placement(transformation(extent={{-64,24},{-44,44}})));
            Modelica.Blocks.Interfaces.RealOutput y "Connector of Real output signal"
              annotation (Placement(transformation(extent={{100,-10},{120,10}})));
            Modelica.Blocks.Interfaces.RealInput TMea(
              final quantity="ThermodynamicTemperature",
              final unit="K",
              displayUnit="degC") "Connector of first Real input signal"
              annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
            Modelica.Blocks.Interfaces.RealInput TOda(
              final quantity="ThermodynamicTemperature",
              final unit="K",
              displayUnit="degC") "Outdoor air temperature"
              annotation (Placement(transformation(extent={{-140,40},{-100,80}})));

            Modelica.Blocks.Interfaces.RealInput TZoneSet(
              final quantity="ThermodynamicTemperature",
              final unit="K",
              displayUnit="degC") "Connector of first Real input signal"
              annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
          equation
            connect(constClosed.y,switch1. u3)
              annotation (Line(points={{21,40},{26,40},{26,8},{44,8}}, color={0,0,127}));
            connect(conPIDHeatingCooling.y,switch1. u1) annotation (Line(points={{19,-48},
                    {40,-48},{40,-8},{44,-8}},   color={0,0,127}));
            connect(switch1.u2, and1.y)
              annotation (Line(points={{44,0},{7,0}}, color={255,0,255}));
            connect(isSummer.y, and1.u2) annotation (Line(points={{-42.5,3},{-34,3},{-34,-8},
                    {-16,-8}}, color={255,0,255}));
            connect(and2.y, and1.u1) annotation (Line(points={{-43,34},{-28,34},{-28,0},{
                    -16,0}},
                         color={255,0,255}));
            connect(switch1.y, y)
              annotation (Line(points={{67,0},{110,0}}, color={0,0,127}));
            connect(TMea, conPIDHeatingCooling.u_m) annotation (Line(points={{-120,0},{-78,
                    0},{-78,-66},{8,-66},{8,-60}}, color={0,0,127}));
            connect(TZoneSet, conPIDHeatingCooling.u_s) annotation (Line(points={{-120,
                    -60},{-44,-60},{-44,-48},{-4,-48}}, color={0,0,127}));
            connect(TOda, and2.u1) annotation (Line(points={{-120,60},{-76,60},{-76,34},{
                    -66,34}}, color={0,0,127}));
            connect(TMea, and2.u2) annotation (Line(points={{-120,0},{-88,0},{-88,26},{
                    -66,26}}, color={0,0,127}));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end SummerByPass;
        end Components;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

        end RecordsCollection;

        package BaseClasses
           extends Modelica.Icons.BasesPackage;
          partial model PartialControl
            extends BESMod.Utilities.Icons.ControlIcon;
            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.SubsystemControlBaseDataDefinition
              distributionParameters constrainedby
              BESMod.HugosProject.Systems.RecordsCollection.SubsystemControlBaseDataDefinition
              annotation (Placement(transformation(extent={{-94,-100},{-74,-80}})),
                choicesAllMatching=true);
            replaceable parameter
              BESMod.HugosProject.Systems.RecordsCollection.SubsystemControlBaseDataDefinition
              generationParameters constrainedby
              BESMod.HugosProject.Systems.RecordsCollection.SubsystemControlBaseDataDefinition
              annotation (Placement(transformation(extent={{30,-100},{50,-80}})),
                choicesAllMatching=true);
            Interfaces.ControlOutputs outBusCtrl
              annotation (Placement(transformation(extent={{90,-10},{110,10}})));
            Interfaces.GenerationControlBus sigBusGen
              annotation (Placement(transformation(extent={{50,-110},{70,-90}})));
            Interfaces.DistributionControlBus sigBusDistr
              annotation (Placement(transformation(extent={{-70,-108},{-50,-88}})));
            IBPSA.BoundaryConditions.WeatherData.Bus
                weaBus "Weather data bus" annotation (Placement(transformation(extent={{-20,76},
                      {22,120}}),          iconTransformation(extent={{-8,90},{12,
                      110}})));
            BESMod.HugosProject.Systems.Interfaces.BuiMeaBus buiMeaBus
              annotation (Placement(transformation(extent={{-116,66},{-88,92}}),
                  iconTransformation(extent={{-114,46},{-92,70}})));
            BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
              annotation (Placement(transformation(extent={{-120,-78},{-86,-42}}),
                  iconTransformation(extent={{-118,-72},{-92,-42}})));
            Interfaces.SystemControlBus sigBusVen annotation (Placement(transformation(
                    extent={{-124,-20},{-84,22}}), iconTransformation(extent={{-124,-20},
                      {-84,22}})));

            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialControl;
        end BaseClasses;
      end Control;

      package Distribution "Package with distribution models for ventilation based systems"
      extends BESMod.Utilities.Icons.SystemIcon;

        model SimpleDistribution "Most basic distribution model"
          extends BaseClasses.PartialDistribution(
            final dp_nominal=resSup.dp_nominal,
            final QLoss_flow_nominal=f_design .* Q_flow_nominal .- Q_flow_nominal,
            final f_design=fill(1, nParallelDem),
            final dTLoss_nominal=fill(0, nParallelDem),
            final dTTra_nominal=fill(0, nParallelDem),
            final nParallelSup=1);
          IBPSA.Fluid.FixedResistances.PressureDrop resSup[nParallelDem](
            redeclare final package Medium = Medium,
            each final dp_nominal=100,
            final m_flow_nominal=m_flow_nominal)
            "Hydraulic resistance of supply" annotation (Placement(transformation(
                extent={{-7.5,-10},{7.5,10}},
                rotation=180,
                origin={0.5,60})));
          IBPSA.Fluid.FixedResistances.PressureDrop resExh[nParallelDem](
            redeclare final package Medium = Medium,
            each final dp_nominal=100,
            final m_flow_nominal=m_flow_nominal)
            "Hydraulic resistance of exhaust" annotation (Placement(transformation(
                extent={{-7.5,-10},{7.5,10}},
                rotation=0,
                origin={0.5,-60})));
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{20,-100},{40,-80}})));
        equation
          connect(resExh.port_a, portExh_in)
            annotation (Line(points={{-7,-60},{-100,-60}}, color={0,127,255}));
          for i in 1:nParallelDem loop
            connect(resSup[i].port_a, portSupply_in[1]) annotation (Line(points={{8,60},{56,60},
                  {56,60},{100,60}}, color={0,127,255}));
            connect(resExh[i].port_b, portExh_out[1]) annotation (Line(points={{8,-60},{54,-60},
                  {54,-60},{100,-60}}, color={0,127,255}));
          end for;
          connect(resSup.port_b, portSupply_out)
            annotation (Line(points={{-7,60},{-100,60}}, color={0,127,255}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{40,-90},{56,-90},{56,-84},{70,-84},{70,-98}},
              color={0,0,0},
              thickness=1));
        end SimpleDistribution;

        package BaseClasses
          extends Modelica.Icons.BasesPackage;
          partial model PartialDistribution
            "Base distribution model for ventilation systems"
              extends BESMod.Utilities.Icons.DistributionIcon;

              extends
              BESMod.HugosProject.Systems.BaseClasses.PartialFluidSubsystemWithParameters;

            Modelica.Fluid.Interfaces.FluidPort_a portExh_in[nParallelDem](
                redeclare final package Medium = Medium)
              "Inlet for the demand of ventilation" annotation (Placement(transformation(
                    extent={{-110,-70},{-90,-50}}), iconTransformation(extent={{-110,-50},
                      {-90,-30}})));
            Modelica.Fluid.Interfaces.FluidPort_b portSupply_out[nParallelDem](
               redeclare final package Medium = Medium)
              "Outlet of the demand of Ventilation" annotation (Placement(transformation(
                    extent={{-110,50},{-90,70}}), iconTransformation(extent={{-110,30},{-90,
                      50}})));
            Modelica.Fluid.Interfaces.FluidPort_a portSupply_in[nParallelSup](redeclare
                final package Medium =
                         Medium)
              "Inlet for the demand of ventilation" annotation (Placement(transformation(
                    extent={{90,50},{110,70}}), iconTransformation(extent={{90,30},{110,50}})));
            Modelica.Fluid.Interfaces.FluidPort_b portExh_out[nParallelSup](redeclare
                final package Medium =
                         Medium)
              "Outlet of the demand of Ventilation" annotation (Placement(transformation(
                    extent={{90,-70},{110,-50}}), iconTransformation(extent={{90,-50},{110,
                      -30}})));
            Interfaces.DistributionOutputs
                                         outBusDist
              annotation (Placement(transformation(extent={{-14,-114},{14,-84}})));
            Interfaces.DistributionControlBus sigBusDistr
              annotation (Placement(transformation(extent={{-10,90},{10,110}})));
            Electrical.Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{60,-108},{80,-88}})));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialDistribution;
        end BaseClasses;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

        end RecordsCollection;
      end Distribution;

      package Generation "Package with generation models for ventilation based systems"
      extends BESMod.Utilities.Icons.SystemIcon;

        model ControlledDomesticVentilation
          extends
            BESMod.HugosProject.Systems.Ventilation.Generation.BaseClasses.PartialGeneration(
            dp_nominal={hex.dp1_nominal},
            dTTra_nominal={0},
            nParallelSup=1,
            nParallelDem=1,
            TSup_nominal=TDem_nominal);

          IBPSA.Fluid.HeatExchangers.ConstantEffectiveness hex(
            redeclare package Medium1 = Medium,
            redeclare package Medium2 = Medium,
            final allowFlowReversal1=allowFlowReversal,
            final allowFlowReversal2=allowFlowReversal,
            final m1_flow_nominal=m_flow_nominal[1],
            final m2_flow_nominal=m_flow_nominal[1],
            final dp1_nominal=parameters.dpHex_nominal,
            final dp2_nominal=parameters.dpHex_nominal,
            final eps=parameters.epsHex)
                     annotation (Placement(transformation(extent={{32,-44},{0,-16}})));
          IBPSA.Fluid.Sources.Boundary_pT bouSup(
            redeclare final package Medium = Medium,
            final use_p_in=true,
            final use_T_in=true,
            nPorts=1) annotation (Placement(transformation(
                extent={{-8,-8},{8,8}},
                rotation=180,
                origin={78,-22})));
          IBPSA.Fluid.Movers.SpeedControlled_y fanFlow(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              final speed_rpm_nominal=fanData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal[1],
              final dp_nominal=dpDem_nominal[1] + dp_nominal[1],
              final rho=rho,
              final V_flowCurve=fanData.V_flowCurve,
              final dpCurve=fanData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=fanData.addPowerToMedium,
            final tau=fanData.tau,
            final use_inputFilter=fanData.use_inputFilter,
            final riseTime=fanData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=180,
                origin={-76,42})));
          Modelica.Blocks.Sources.Constant yFan(k=1)
            "Transform Volume l to massflowrate" annotation (Placement(transformation(
                extent={{-7,-7},{7,7}},
                rotation=180,
                origin={-65,71})));
          IBPSA.Fluid.Sensors.TemperatureTwoPort TExhIn(
            final initType=tempSensorData.initType,
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_small=1E-4*m_flow_nominal[1],
            final T_start=T_start,
            final tau=tempSensorData.tau,
            final m_flow_nominal=m_flow_nominal[1],
            final transferHeat=tempSensorData.transferHeat,
            final TAmb=tempSensorData.TAmb,
            final tauHeaTra=tempSensorData.tauHeaTra)
            "Temperature at exhaust inlet" annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=0,
                origin={-42,-40})));
          IBPSA.Fluid.Sources.Boundary_pT bouExh(redeclare final package Medium =
                Medium, nPorts=1)
                        annotation (Placement(transformation(
                extent={{-5,-5},{5,5}},
                rotation=180,
                origin={73,-41})));

          IBPSA.Fluid.Movers.SpeedControlled_y fanRet(
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            redeclare
              BESMod.HugosProject.Systems.RecordsCollection.Movers.AutomaticConfigurationData
              per(
              final speed_rpm_nominal=fanData.speed_rpm_nominal,
              final m_flow_nominal=m_flow_nominal[1],
              final dp_nominal=dpDem_nominal [1]+ parameters.dpHex_nominal + 2*threeWayValveParas.dpValve_nominal,
              final rho=rho,
              final V_flowCurve=fanData.V_flowCurve,
              final dpCurve=fanData.dpCurve),
            final inputType=IBPSA.Fluid.Types.InputType.Continuous,
            final addPowerToMedium=fanData.addPowerToMedium,
            final tau=fanData.tau,
            final use_inputFilter=fanData.use_inputFilter,
            final riseTime=fanData.riseTimeInpFilter,
            final init=Modelica.Blocks.Types.Init.InitialOutput,
            final y_start=1) annotation (Placement(transformation(
                extent={{-10,10},{10,-10}},
                rotation=0,
                origin={-72,-40})));
          replaceable parameter
            BESMod.HugosProject.Systems.Ventilation.Generation.RecordsCollection.PartialHeatExchangerRecovery
            parameters annotation (choicesAllMatching=true, Placement(
                transformation(extent={{46,-98},{66,-78}})));
          IBPSA.Fluid.Sensors.TemperatureTwoPort TSup(
            final initType=tempSensorData.initType,
            redeclare final package Medium = Medium,
            final allowFlowReversal=allowFlowReversal,
            final m_flow_small=1E-4*m_flow_nominal[1],
            final T_start=T_start,
            final tau=tempSensorData.tau,
            final m_flow_nominal=m_flow_nominal[1],
            final transferHeat=tempSensorData.transferHeat,
            final TAmb=tempSensorData.TAmb,
            final tauHeaTra=tempSensorData.tauHeaTra)
            "Temperature at supply inlet" annotation (Placement(transformation(
                extent={{-9,8},{9,-8}},
                rotation=180,
                origin={-53,42})));

          replaceable IBPSA.Fluid.Actuators.BaseClasses.PartialThreeWayValve threeWayValve_b constrainedby
            IBPSA.Fluid.Actuators.BaseClasses.PartialThreeWayValve(
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final tau=threeWayValveParas.tau,
            final from_dp=threeWayValveParas.from_dp,
            final use_inputFilter=threeWayValveParas.use_inputFilter,
            final riseTime=threeWayValveParas.riseTime,
            final init=threeWayValveParas.init,
            final y_start=threeWayValveParas.y_start,
            final deltaM=threeWayValveParas.deltaM,
            final dpValve_nominal=threeWayValveParas.dpValve_nominal,
            final dpFixed_nominal=threeWayValveParas.dpFixed_nominal,
            final fraK=threeWayValveParas.fraK,
            redeclare final package Medium = Medium,
            final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
            final m_flow_nominal=m_flow_nominal[1]) annotation (choicesAllMatching=true,
              Placement(transformation(extent={{22,-64},{38,-80}})));
          replaceable IBPSA.Fluid.Actuators.BaseClasses.PartialThreeWayValve threeWayValve_a constrainedby
            IBPSA.Fluid.Actuators.BaseClasses.PartialThreeWayValve(
            final energyDynamics=energyDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final tau=threeWayValveParas.tau,
            final from_dp=threeWayValveParas.from_dp,
            final use_inputFilter=threeWayValveParas.use_inputFilter,
            final riseTime=threeWayValveParas.riseTime,
            final init=threeWayValveParas.init,
            final y_start=threeWayValveParas.y_start,
            final deltaM=threeWayValveParas.deltaM,
            final dpValve_nominal=threeWayValveParas.dpValve_nominal,
            final dpFixed_nominal=threeWayValveParas.dpFixed_nominal,
            final fraK=threeWayValveParas.fraK,
            redeclare final package Medium = Medium,
            final CvData=IBPSA.Fluid.Types.CvTypes.OpPoint,
            final m_flow_nominal=m_flow_nominal[1]) annotation (choicesAllMatching=true,
              Placement(transformation(
                extent={{-7,-7},{7,7}},
                rotation=180,
                origin={-11,-69})));
          replaceable parameter
            BESMod.HugosProject.Systems.RecordsCollection.Valves.ThreeWayValve threeWayValveParas
            constrainedby
            BESMod.HugosProject.Systems.RecordsCollection.Valves.ThreeWayValve(
              m_flow_nominal=m_flow_nominal[1], dp_nominal={dpDem_nominal[1],
                dpDem_nominal[1] + parameters.dpHex_nominal}) annotation (
              choicesAllMatching=true, Placement(transformation(extent={{-98,-98},
                    {-76,-74}})));
          replaceable
            BESMod.HugosProject.Systems.RecordsCollection.Movers.MoverBaseDataDefinition
            fanData annotation (Placement(transformation(extent={{-82,-8},{-62,
                    12}})), choicesAllMatching=true);
          replaceable
            BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.TemperatureSensorBaseDefinition
            tempSensorData annotation (Placement(transformation(extent={{76,78},
                    {96,98}})), choicesAllMatching=true);
          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
            annotation (Placement(transformation(extent={{36,-118},{56,-98}})));
          Modelica.Blocks.Math.Add add
            annotation (Placement(transformation(extent={{2,-114},{22,-94}})));
        equation
          connect(bouSup.p_in, weaBus.pAtm) annotation (Line(points={{87.6,-28.4},{112,
                  -28.4},{112,92},{41,92},{41,100}},           color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(bouSup.T_in, weaBus.TDryBul) annotation (Line(points={{87.6,-25.2},{
                  112,-25.2},{112,92},{41,92},{41,100}},            color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(fanFlow.port_b, portVent_in[1]) annotation (Line(points={{-86,42},{-100,42}},
                                       color={0,127,255}));
          connect(TExhIn.T,outBusGen.TExhIn)  annotation (Line(points={{-42,-51},{-42,-56},
                  {102,-56},{102,-1}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(fanFlow.P,outBusGen.PVentSup)  annotation (Line(points={{-87,51},{-87,
                  84},{102,84},{102,-1}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(portVent_out[1], fanRet.port_a)
            annotation (Line(points={{-100,-40},{-82,-40}}, color={0,127,255}));
          connect(TExhIn.port_a, fanRet.port_b)
            annotation (Line(points={{-52,-40},{-62,-40}}, color={0,127,255}));
          connect(fanRet.P,outBusGen.PelVentRet)  annotation (Line(points={{-61,-49},{
                  -62,-49},{-62,-50},{102,-50},{102,-1}},
                                            color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(yFan.y, fanFlow.y)
            annotation (Line(points={{-72.7,71},{-76,71},{-76,54}}, color={0,0,127}));
          connect(yFan.y, fanRet.y) annotation (Line(points={{-72.7,71},{-90,71},{-90,
                  -60},{-72,-60},{-72,-52}}, color={0,0,127}));

          connect(fanFlow.port_a, TSup.port_b)
            annotation (Line(points={{-66,42},{-62,42}}, color={0,127,255}));
          connect(TSup.T, sigBusGen.THROut) annotation (Line(points={{-53,50.8},{-53,66},
                  {-42,66},{-42,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(TSup.port_a, hex.port_b1) annotation (Line(points={{-44,42},{-18,42},{
                  -18,-21.6},{0,-21.6}}, color={0,127,255}));
          connect(bouExh.ports[1], threeWayValve_b.port_2) annotation (Line(points={{68,
                  -41},{62,-41},{62,-72},{38,-72}}, color={0,127,255}));
          connect(TExhIn.port_b, threeWayValve_a.port_2) annotation (Line(points={{-32,
                  -40},{-20,-40},{-20,-58},{-22,-58},{-22,-69},{-18,-69}}, color={0,127,
                  255}));
          connect(threeWayValve_a.port_3, hex.port_a2) annotation (Line(points={{-11,-62},
                  {-10,-62},{-10,-38.4},{0,-38.4}}, color={0,127,255}));
          connect(threeWayValve_a.y, sigBusGen.uByPass) annotation (Line(points={{-11,-77.4},
                  {-11,-84},{-42,-84},{-42,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(threeWayValve_b.y, sigBusGen.uByPass) annotation (Line(points={{30,
                  -81.6},{30,-86},{-42,-86},{-42,98}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(threeWayValve_b.port_3, hex.port_b2) annotation (Line(points={{30,-64},
                  {30,-48},{36,-48},{36,-38.4},{32,-38.4}}, color={0,127,255}));
          connect(threeWayValve_a.port_1, threeWayValve_b.port_1) annotation (Line(
                points={{-4,-69},{14,-69},{14,-72},{22,-72}}, color={0,127,255}));
          connect(hex.port_a1, bouSup.ports[1]) annotation (Line(points={{32,-21.6},{51,
                  -21.6},{51,-22},{70,-22}}, color={0,127,255}));
          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{56.2,-107.8},{61.1,-107.8},{61.1,-98},{70,-98}},
              color={0,0,0},
              thickness=1));

          connect(add.y, realToElecCon.PEleLoa)
            annotation (Line(points={{23,-104},{34,-104}}, color={0,0,127}));
          connect(fanRet.P, add.u2) annotation (Line(points={{-61,-49},{-58,-49},{-58,
                  -110},{0,-110}}, color={0,0,127}));
          connect(add.u1, fanFlow.P) annotation (Line(points={{0,-98},{-20,-98},{-20,
                  -96},{-87,-96},{-87,51}}, color={0,0,127}));
        end ControlledDomesticVentilation;

        model NoVentilation "Model without any ventilation"
          extends BaseClasses.PartialGeneration(
            final QLoss_flow_nominal={0},
            final f_design={1},
            final dTLoss_nominal={0},
            final m_flow_nominal={0},
            final TSup_nominal=TDem_nominal,
            final dp_nominal={0},
            final dTTra_nominal={0},
            final nParallelSup=1,
            final nParallelDem=1);
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{20,-100},{40,-80}})));
        equation
          connect(portVent_in, portVent_out) annotation (Line(points={{-100,42},{-80,42},
                  {-80,-40},{-100,-40}}, color={0,127,255}));
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{40,-90},{56,-90},{56,-84},{70,-84},{70,-98}},
              color={0,0,0},
              thickness=1));
        end NoVentilation;

        package BaseClasses
            extends Modelica.Icons.BasesPackage;

          partial model PartialGeneration
            "Base model for all ventilation generation systems"
            extends BESMod.Utilities.Icons.GenerationIcon;
            extends
              BESMod.HugosProject.Systems.BaseClasses.PartialFluidSubsystemWithParameters;
            parameter Modelica.Units.SI.PressureDifference dpDem_nominal[nParallelDem]
              "Nominal pressure loss of resistances in the demand system of the generation"
              annotation (Dialog(group=
                    "Design - Top Down: Parameters are given by the parent system"));

            Interfaces.GenerationOutputs outBusGen
              annotation (Placement(transformation(extent={{88,-16},{116,14}})));
            Modelica.Fluid.Interfaces.FluidPort_b portVent_out[nParallelDem](redeclare
                final package Medium = Medium) "Outlet of the demand of Ventilation"
              annotation (Placement(transformation(extent={{-110,-50},{-90,-30}}),
                  iconTransformation(extent={{-110,-50},{-90,-30}})));
            Modelica.Fluid.Interfaces.FluidPort_a portVent_in[nParallelDem](redeclare
                final package Medium = Medium) "Inlet for the demand of ventilation"
              annotation (Placement(transformation(extent={{-110,32},{-90,52}}),
                  iconTransformation(extent={{-110,32},{-90,52}})));

            IBPSA.BoundaryConditions.WeatherData.Bus
                weaBus "Weather data bus" annotation (Placement(transformation(extent={{20,78},
                      {62,122}}),          iconTransformation(extent={{-8,90},{12,
                      110}})));

            Interfaces.GenerationControlBus sigBusGen
              annotation (Placement(transformation(extent={{-52,88},{-32,108}})));
            Electrical.Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{60,-108},{80,-88}})));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialGeneration;
        end BaseClasses;

        package Tests
          extends Modelica.Icons.ExamplesPackage;

          model ControlledDomesticVentilation
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Ventilation.Generation.ControlledDomesticVentilation
                generation(
                redeclare
                  BESMod.HugosProject.Systems.Ventilation.Generation.RecordsCollection.DummyHeatExchangerRecovery
                  parameters(dpHex_nominal(displayUnit="Pa") = 100),
                redeclare
                  IBPSA.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear
                  threeWayValve_b,
                redeclare
                  IBPSA.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear
                  threeWayValve_a,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                  threeWayValveParas,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                  fanData,
                redeclare
                  BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                  tempSensorData));
            Interfaces.GenerationControlBus sigBusGen
              annotation (Placement(transformation(extent={{-4,54},{16,74}})));
          equation
            connect(sigBusGen, generation.sigBusGen) annotation (Line(
                points={{6,64},{6,46.51},{5.52,46.51},{5.52,29.02}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{-3,6},{-3,6}},
                horizontalAlignment=TextAlignment.Right));
          end ControlledDomesticVentilation;

          partial model PartialTest
            extends BESMod.HugosProject.Systems.BaseClasses.PartialBESExample;
            replaceable package Medium = IBPSA.Media.Air constrainedby
              Modelica.Media.Interfaces.PartialMedium
              annotation (choicesAllMatching=true);
            IBPSA.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(final filNam=
                  systemParameters.filNamWea)
              "Weather data reader"
              annotation (Placement(transformation(extent={{-100,34},{-42,100}})));
            replaceable BaseClasses.PartialGeneration generation constrainedby
              BaseClasses.PartialGeneration(
              redeclare package Medium = Medium,
              energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
              m_flow_nominal=fill(0.5*150*2.6/3600*1.225, generation.nParallelDem),
              Q_flow_nominal=fill(sum(systemParameters.QBui_flow_nominal), generation.nParallelDem),
              TOda_nominal=systemParameters.TOda_nominal,
              TDem_nominal=systemParameters.TSetZone_nominal,
              TAmb=systemParameters.TAmbVen,
              dpDem_nominal=fill(0, generation.nParallelDem))
                                             annotation (Placement(transformation(extent=
                      {{-20,-68},{68,30}})), choicesAllMatching=true);

            IBPSA.Fluid.MixingVolumes.MixingVolume vol[generation.nParallelDem](
              redeclare final package Medium = Medium,
              each final energyDynamics=generation.energyDynamics,
              each final massDynamics=generation.massDynamics,
              each final p_start=generation.p_start,
              final T_start=fixedTemperature.T,
              each final X_start=generation.X_start,
              each final C_start=generation.C_start,
              each final C_nominal=generation.C_nominal,
              each final mSenFac=generation.mSenFac,
              final m_flow_nominal=generation.m_flow_nominal,
              final m_flow_small=1E-4*abs(generation.m_flow_nominal),
              each final allowFlowReversal=generation.allowFlowReversal,
              each V=150*2.6,
              each final use_C_flow=false,
              each final nPorts=2)
                             annotation (Placement(transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=90,
                  origin={-52,-20})));
            Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperature[
              generation.nParallelDem](each final T(displayUnit="K") = systemParameters.THydSup_nominal[
                1])                   annotation (Placement(
                  transformation(
                  extent={{-10,-10},{10,10}},
                  rotation=0,
                  origin={-84,-44})));
          equation
            connect(weaDat.weaBus, generation.weaBus) annotation (Line(
                points={{-42,67},{-42,66},{-12,66},{-12,90},{24.88,90},{24.88,30}},
                color={255,204,51},
                thickness=0.5));
            connect(vol.heatPort,fixedTemperature. port)
                                                        annotation (Line(points={{-52,-30},
                    {-52,-44},{-74,-44}},           color={191,0,0}));
              for i in 1:generation.nParallelDem loop
                connect(vol[i].ports[1], generation.portVent_in[i]) annotation (Line(points={{-42,-21},
                        {-42,1.58},{-20,1.58}},       color={0,0,255}));

                connect(vol[i].ports[2], generation.portVent_out[i]) annotation (Line(points={{-42,-19},
                        {-42,-38.6},{-20,-38.6}},     color={0,0,255}));
              end for;

              annotation (experiment(StopTime=2592000, __Dymola_Algorithm="Dassl"));
          end PartialTest;
        end Tests;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

          partial record PartialHeatExchangerRecovery
            extends Modelica.Icons.Record;

            parameter Modelica.Units.SI.Efficiency epsHex "Heat exchanger effectiveness";
            parameter Modelica.Units.SI.PressureDifference dpHex_nominal
              "Nominal pressure drop on one HEX pipe";
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialHeatExchangerRecovery;

          record DummyHeatExchangerRecovery "DummyVentilation"
            extends PartialHeatExchangerRecovery(dpHex_nominal(displayUnit="Pa") = 100,
                                                                          epsHex=0.8);
          end DummyHeatExchangerRecovery;
        end RecordsCollection;
      end Generation;

      package Interfaces
        extends Modelica.Icons.InterfacesPackage;

        expandable connector GenerationControlBus
          "data bus with control signals for generation model"
          extends BESMod.Utilities.Icons.ControlBus;

          annotation (
          defaultComponentName = "sigBusGen",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end GenerationControlBus;

        expandable connector DistributionControlBus
          "data bus with control signals for generation model"
          extends BESMod.Utilities.Icons.ControlBus;

        annotation (
          defaultComponentName = "sigBusDistr",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end DistributionControlBus;

        expandable connector GenerationOutputs
          "Bus with ouputs of the generation system"
          extends BESMod.Utilities.Icons.KPIBus;

          annotation (
          defaultComponentName = "outBusGen",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end GenerationOutputs;

        expandable connector DistributionOutputs
          "Bus with ouputs of the distribution system"
          extends BESMod.Utilities.Icons.KPIBus;

          annotation (
          defaultComponentName = "outBusDist",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end DistributionOutputs;

        expandable connector ControlOutputs "Bus with ouputs of the control system"
          extends BESMod.Utilities.Icons.KPIBus;

          annotation (
          defaultComponentName = "outBusCtrl",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end ControlOutputs;

        expandable connector SystemControlBus
          "Home energy management control bus to ventilation subsystem"
          extends BESMod.Utilities.Icons.ControlBus;
          annotation (
          defaultComponentName = "sigBusVen",
          Icon(graphics,
               coordinateSystem(preserveAspectRatio=false)),
          Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));

        end SystemControlBus;
      end Interfaces;

      model VentilationSystem
        extends BaseClasses.PartialVentilationSystem;

      end VentilationSystem;

      model NoVentilation
        extends BaseClasses.PartialVentilationSystem(redeclare
            BESMod.HugosProject.Systems.Ventilation.Generation.NoVentilation generation,                                       redeclare
            BESMod.HugosProject.Systems.Ventilation.Distribution.SimpleDistribution
            distribution(m_flow_nominal={1}),                                                                                                                                                                                             redeclare
            BESMod.HugosProject.Systems.Ventilation.Control.NoControl control);
      end NoVentilation;

      package BaseClasses
        extends Modelica.Icons.BasesPackage;

        partial model PartialVentilationSystem
          extends BESMod.Utilities.Icons.VentilationIcon;
          extends BESMod.HugosProject.Systems.BaseClasses.PartialFluidSubsystem;
          parameter Boolean subsystemDisabled "To enable the icon if the subsystem is disabled" annotation (Dialog(tab="Graphics"));

          replaceable parameter RecordsCollection.SupplySystemBaseDataDefinition
            ventilationSystemParameters constrainedby
            RecordsCollection.SupplySystemBaseDataDefinition
            annotation (choicesAllMatching=true,
            Dialog(group="Design - Top Down: Parameters are given by the parent system"),
            Placement(transformation(extent={{-100,-98},{-80,-78}})));
          replaceable Generation.BaseClasses.PartialGeneration generation(
              dTTra_nominal=fill(1, generation.nParallelDem),
              m_flow_nominal=fill(1, generation.nParallelDem),
              dp_nominal=fill(0, generation.nParallelDem))
            constrainedby Generation.BaseClasses.PartialGeneration(
            Q_flow_nominal={sum(distribution.Q_flow_nominal .* distribution.f_design)},
            redeclare final package Medium = Medium,
            final energyDynamics=energyDynamics,
            final massDynamics=massDynamics,
            TOda_nominal=ventilationSystemParameters.TOda_nominal,
            final TDem_nominal=distribution.TSup_nominal,
            final TAmb=ventilationSystemParameters.TAmb,
            final p_start=p_start,
            final T_start=T_start,
            final X_start=X_start,
            final C_start=C_start,
            final C_nominal=C_nominal,
            final mSenFac=mSenFac,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            final rho=rho,
            final cp=cp,
            dpDem_nominal=distribution.dp_nominal)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{26,-56},
                    {80,-2}})));

          replaceable Distribution.BaseClasses.PartialDistribution distribution(
              dTTra_nominal=fill(1, distribution.nParallelDem),
              m_flow_nominal=fill(1, distribution.nParallelDem),
              dp_nominal=fill(0, distribution.nParallelDem))
            constrainedby Distribution.BaseClasses.PartialDistribution(
            redeclare package Medium = Medium,
            final nParallelDem=ventilationSystemParameters.nZones,
            final Q_flow_nominal=ventilationSystemParameters.Q_flow_nominal,
            TOda_nominal=ventilationSystemParameters.TOda_nominal,
            final TDem_nominal=ventilationSystemParameters.TZone_nominal,
            final TSup_nominal=ventilationSystemParameters.TSup_nominal,
            final TAmb=ventilationSystemParameters.TAmb,
            final energyDynamics=energyDynamics,
            final massDynamics=massDynamics,
            final p_start=p_start,
            final T_start=T_start,
            final X_start=X_start,
            final C_start=C_start,
            final C_nominal=C_nominal,
            final mSenFac=mSenFac,
            final allowFlowReversal=allowFlowReversal,
            final show_T=show_T,
            final rho=rho,
            final cp=cp)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-60,-52},{-16,0}})));

          replaceable Control.BaseClasses.PartialControl control constrainedby
            Control.BaseClasses.PartialControl(final generationParameters(
                final nParallelDem=generation.nParallelDem,
                final nParallelSup=generation.nParallelSup,
                final Q_flow_nominal=generation.Q_flow_nominal,
                final TOda_nominal=ventilationSystemParameters.TOda_nominal,
                final TDem_nominal=generation.TDem_nominal,
                final TSup_nominal=generation.TSup_nominal,
                final dTTra_nominal=generation.dTTra_nominal,
                final m_flow_nominal=generation.m_flow_nominal,
                final dp_nominal=generation.dp_nominal,
                final dTLoss_nominal=generation.dTLoss_nominal,
                final f_design=generation.f_design,
                final QLoss_flow_nominal=generation.QLoss_flow_nominal),
            final distributionParameters(
              final nParallelDem=distribution.nParallelDem,
              final nParallelSup=distribution.nParallelSup,
              final Q_flow_nominal=distribution.Q_flow_nominal,
              final TDem_nominal=distribution.TDem_nominal,
              final TSup_nominal=distribution.TSup_nominal,
              final dTTra_nominal=distribution.dTTra_nominal,
              final m_flow_nominal=distribution.m_flow_nominal,
              final dp_nominal=distribution.dp_nominal,
              final dTLoss_nominal=distribution.dTLoss_nominal,
              final f_design=distribution.f_design,
              final TOda_nominal=ventilationSystemParameters.TOda_nominal,
              final QLoss_flow_nominal=distribution.QLoss_flow_nominal))
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-26,22},{28,68}})));
          BESMod.HugosProject.Systems.Interfaces.VentilationOutputs outBusVen
            annotation (Placement(transformation(extent={{-10,-110},{10,-90}})));
          IBPSA.BoundaryConditions.WeatherData.Bus
              weaBus "Weather data bus" annotation (Placement(transformation(extent={{88,60},
                    {122,88}}),          iconTransformation(extent={{90,-10},{110,10}})));
          Modelica.Fluid.Interfaces.FluidPort_a portVent_in[
            ventilationSystemParameters.nZones](
              redeclare final package Medium = Medium)
            "Inlet for the demand of ventilation"
            annotation (Placement(transformation(extent={{-110,50},{-90,70}}),
                iconTransformation(extent={{-110,30},{-90,50}})));
          Modelica.Fluid.Interfaces.FluidPort_b portVent_out[
            ventilationSystemParameters.nZones](
              redeclare final package Medium = Medium)
            "Outlet of the demand of Ventilation"
            annotation (Placement(transformation(extent={{-110,-70},{-90,-50}}),
                iconTransformation(extent={{-110,-48},{-90,-28}})));

          BESMod.HugosProject.Systems.Interfaces.BuiMeaBus buiMeaBus
            annotation (Placement(transformation(extent={{-74,86},{-46,112}}),
                iconTransformation(extent={{38,88},{64,114}})));
          BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
            annotation (Placement(transformation(extent={{24,80},{60,120}}),
                iconTransformation(extent={{-78,86},{-50,116}})));

          Interfaces.SystemControlBus sigBusVen annotation (Placement(transformation(
                  extent={{-18,86},{18,114}}), iconTransformation(extent={{-18,86},{18,
                    114}})));
          Electrical.Interfaces.InternalElectricalPin internalElectricalPin
            annotation (Placement(transformation(extent={{60,-108},{80,-88}})));
          Utilities.Electrical.MultiSumElec multiSumElec(nPorts=2) annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={40,-98})));
        equation
          connect(weaBus, generation.weaBus) annotation (Line(
              points={{105,74},{53.54,74},{53.54,-2}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(generation.outBusGen, outBusVen.generation) annotation (Line(
              points={{80.54,-29.27},{104,-29.27},{104,-84},{0,-84},{0,-100}},
              color={135,135,135},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(generation.portVent_in, distribution.portSupply_in) annotation (
              Line(
                points={{26,-17.66},{2,-17.66},{2,-15.6},{-16,-15.6}},
                                                                   color={0,127,255}));
          connect(distribution.portExh_out, generation.portVent_out) annotation (Line(
                points={{-16,-36.4},{4,-36.4},{4,-39.8},{26,-39.8}},
                                                             color={0,127,255}));
          connect(distribution.portSupply_out, portVent_in) annotation (Line(points={{
                  -60,
                  -15.6},{-82,-15.6},{-82,60},{-100,60}},
                                                        color={0,127,255}));
          connect(distribution.portExh_in, portVent_out) annotation (Line(points={{-60,
                  -36.4},
                  {-82,-36.4},{-82,-60},{-100,-60}},
                                                   color={0,127,255}));
          connect(distribution.outBusDist, outBusVen.distribution) annotation (Line(
              points={{-38,-51.74},{-38,-84},{0,-84},{0,-100}},
              color={135,135,135},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(weaBus, control.weaBus) annotation (Line(
              points={{105,74},{1.54,74},{1.54,68}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(control.outBusCtrl, outBusVen.control) annotation (Line(
              points={{28,45},{54,45},{54,46},{104,46},{104,-84},{0,-84},{0,-100}},
              color={135,135,135},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(control.sigBusDistr, distribution.sigBusDistr) annotation (Line(
              points={{-15.2,22.46},{-25.6,22.46},{-25.6,0},{-38,0}},
              color={215,215,215},
              thickness=0.5));
          connect(control.sigBusGen, generation.sigBusGen) annotation (Line(
              points={{17.2,22},{16,22},{16,-2.54},{41.66,-2.54}},
              color={215,215,215},
              thickness=0.5));
          connect(control.useProBus, useProBus) annotation (Line(
              points={{-27.35,31.89},{-40,31.89},{-40,88},{42,88},{42,100}},
              color={0,127,0},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(control.buiMeaBus, buiMeaBus) annotation (Line(
              points={{-26.81,58.34},{-60,58.34},{-60,99}},
              color={255,128,0},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(sigBusVen, control.sigBusVen) annotation (Line(
              points={{0,100},{0,92},{-46,92},{-46,45.23},{-27.08,45.23}},
              color={215,215,215},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(multiSumElec.internalElectricalPinOut, internalElectricalPin)
            annotation (Line(
              points={{50,-98},{70,-98}},
              color={0,0,0},
              thickness=1));
          connect(generation.internalElectricalPin, multiSumElec.internalElectricalPinIn[
            1]) annotation (Line(
              points={{71.9,-55.46},{74,-55.46},{74,-78},{20,-78},{20,-98.05},{30.2,
                  -98.05}},
              color={0,0,0},
              thickness=1));
          connect(distribution.internalElectricalPin, multiSumElec.internalElectricalPinIn[
            2]) annotation (Line(
              points={{-22.6,-51.48},{-22.6,-78},{20,-78},{20,-97.55},{30.2,-97.55}},
              color={0,0,0},
              thickness=1));
          annotation (Icon(
              graphics,              coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end PartialVentilationSystem;
      end BaseClasses;
    end Ventilation;

    package Electrical "All systems for power generation, storage and distribution"
        extends BESMod.Utilities.Icons.SystemIcon;

      package Control "Control of subsystems and components of electrical package"
        extends Modelica.Icons.Package;

        model NoControl
          extends
            BESMod.HugosProject.Systems.Electrical.Control.BaseClasses.PartialControl;
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end NoControl;

        package BaseClasses "Base classes of electrical control package"
          partial model PartialControl "Partial electrical control model"
            Interfaces.GenerationControlBus generationControlBus annotation (Placement(
                  transformation(extent={{-182,-118},{-158,-78}}),
                                                                 iconTransformation(
                    extent={{-182,-118},{-158,-78}})));
            Interfaces.DistributionControlBus distributionControlBus annotation (
                Placement(transformation(extent={{0,-118},{22,-80}}),
                  iconTransformation(extent={{0,-118},{22,-80}})));
            Interfaces.ControlOutputs controlOutputs annotation (Placement(transformation(
                    extent={{228,-18},{250,20}}), iconTransformation(extent={{228,-18},{
                      250,20}})));
            Interfaces.TransferControlBus transferControlBus annotation (Placement(
                  transformation(extent={{166,-116},{188,-82}}), iconTransformation(
                    extent={{166,-116},{188,-82}})));
            BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
              annotation (Placement(transformation(extent={{-112,80},{-70,126}}),
                  iconTransformation(extent={{-138,80},{-88,124}})));
            BESMod.HugosProject.Systems.Interfaces.BuiMeaBus buiMeaBus
              annotation (Placement(transformation(extent={{70,84},{116,122}}),
                  iconTransformation(extent={{42,84},{88,122}})));
            IBPSA.BoundaryConditions.WeatherData.Bus
                weaBus "Weather data bus" annotation (Placement(transformation(extent={{-260,18},
                      {-218,62}}),         iconTransformation(extent={{-250,8},{-230,28}})));
            Interfaces.SystemControlBus systemControlBus annotation (Placement(
                  transformation(extent={{-20,80},{20,120}}), iconTransformation(extent={
                      {-20,80},{20,120}})));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-240,
                      -100},{240,100}}), graphics={
                  Rectangle(
                    extent={{-240,100},{240,-100}},
                    lineColor={0,0,0},
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid,
                    lineThickness=0.5), Text(
                    extent={{-88,-76},{116,-172}},
                    lineColor={0,0,0},
                    textString="%name%"),
                  Rectangle(
                    extent={{-228,70},{232,52}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-230,10},{230,-8}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-230,-48},{230,-66}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-84,80},{-36,44}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={175,175,175},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{124,18},{172,-18}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={175,175,175},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{-164,-40},{-116,-76}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={175,175,175},
                    fillPattern=FillPattern.Solid)}),                      Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false, extent={{-240,-100},{240,
                      100}})));
          end PartialControl;
        annotation (Icon(graphics={
                Rectangle(
                  lineColor={200,200,200},
                  fillColor={248,248,248},
                  fillPattern=FillPattern.HorizontalCylinder,
                  extent={{-100,-100},{100,100}},
                  radius=25.0),
                Rectangle(
                  lineColor={128,128,128},
                  extent={{-100,-100},{100,100}},
                  radius=25.0),
                Ellipse(
                  extent={{-30,-30},{30,30}},
                  lineColor={128,128,128},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end BaseClasses;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

        end RecordsCollection;
      annotation (Icon(graphics={
              Rectangle(
                extent={{-80,62},{84,60}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid), Rectangle(
                extent={{-58,72},{-28,50}},
                lineColor={0,0,0},
                fillColor={135,135,135},
                fillPattern=FillPattern.Solid,
                radius=5,
                lineThickness=0.5),
              Rectangle(
                extent={{-80,2},{84,0}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-80,-58},{84,-60}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid), Rectangle(
                extent={{32,12},{62,-10}},
                lineColor={0,0,0},
                fillColor={135,135,135},
                fillPattern=FillPattern.Solid,
                radius=5,
                lineThickness=0.5),             Rectangle(
                extent={{-12,-48},{18,-70}},
                lineColor={0,0,0},
                fillColor={135,135,135},
                fillPattern=FillPattern.Solid,
                radius=5,
                lineThickness=0.5)}));
      end Control;

      package Distribution "Subsystems and models for electrical distribution including storages"

        model BatterySystemSimple "Simple Battery model"
          extends
            BESMod.HugosProject.Systems.Electrical.Distribution.BaseClasses.PartialDistribution;

          parameter Real SOC_start_bat = 0.2 "Initial SOC of battery" annotation(Dialog(tab="Initialization"));

          Components.FixedInitialBatterySimple batterySimple(
            final batteryData=batteryParameters,
            nBat=nBat,
            final SOC_start=SOC_start_bat)
            annotation (Placement(transformation(extent={{-46,-42},{46,42}})));
          Utilities.Electrical.ElecConToReal elecConToReal(reverse=true)
                                                           annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={-70,34})));
          Utilities.Electrical.RealToElecCon realToElecCon(use_souGen=false)
                                                           annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={50,-30})));
          Utilities.Electrical.ElecConToReal elecConToReal2[nSubSys](each final reverse=
               true)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=-90,
                origin={72,24})));

          replaceable parameter BuildingSystems.Technologies.ElectricalStorages.Data.BaseClasses.ElectricBatteryGeneral
            batteryParameters constrainedby
            BuildingSystems.Technologies.ElectricalStorages.Data.BaseClasses.ElectricBatteryGeneral
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-68,-42},{-48,-22}})));
          parameter Integer nBat=1 "Number of batteries";
          Modelica.Blocks.Math.Sum sumOfLoads(nin=nSubSys)
            annotation (Placement(transformation(extent={{66,-8},{52,6}})));
        equation
          connect(batterySimple.SOC, OutputDistr.SOCBat) annotation (Line(points={{0,
                  22.68},{0,40},{100,40},{100,-100},{0,-100},{0,-98}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(realToElecCon.internalElectricalPin, externalElectricalPin)
            annotation (Line(
              points={{50.2,-40.2},{50.2,-65.1},{50,-65.1},{50,-98}},
              color={0,0,0},
              thickness=1));
          connect(batterySimple.PGrid, realToElecCon.PEleLoa) annotation (Line(points={
                  {24.84,16.8},{54,16.8},{54,-18}}, color={0,0,127}));
          connect(internalElectricalPin, elecConToReal2.internalElectricalPin)
            annotation (Line(
              points={{50,100},{50,66},{72.2,66},{72.2,33.8}},
              color={0,0,0},
              thickness=1));
          connect(elecConToReal2.PElecLoa, sumOfLoads.u)
            annotation (Line(points={{76,12},{76,-1},{67.4,-1}}, color={0,0,127}));
          connect(sumOfLoads.y, batterySimple.PLoad) annotation (Line(points={{51.3,-1},
                  {39.65,-1},{39.65,0},{23,0}}, color={0,0,127}));
          connect(internalElectricalPin[2], elecConToReal.internalElectricalPin)
            annotation (Line(
              points={{50,100},{48,100},{48,66},{-69.8,66},{-69.8,43.8}},
              color={0,0,0},
              thickness=1));
          connect(elecConToReal.PElecGen, batterySimple.PCharge)
            annotation (Line(points={{-74,22},{-74,0},{-23,0}}, color={0,0,127}));
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end BatterySystemSimple;

        model DirectlyToGrid "Direct grid connection"
          extends
            BESMod.HugosProject.Systems.Electrical.Distribution.BaseClasses.PartialDistribution;

          Utilities.Electrical.MultiSumElec multiSumElec(nPorts=nSubSys) annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={50,-2})));
        equation
          connect(internalElectricalPin, multiSumElec.internalElectricalPinIn)
            annotation (Line(
              points={{50,100},{50,14},{50.2,14},{50.2,7.8}},
              color={0,0,0},
              thickness=1));
          connect(multiSumElec.internalElectricalPinOut, externalElectricalPin)
            annotation (Line(
              points={{50,-12},{50,-98}},
              color={0,0,0},
              thickness=1));
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end DirectlyToGrid;

        package BaseClasses "Base classes with partial electrical distribution models"

          partial model PartialDistribution
            parameter Integer nSubSys(min=2)
              "Number of subsystems with electrical load / generation";
            Interfaces.DistributionOutputs OutputDistr annotation (Placement(
                  transformation(extent={{-10,-108},{10,-88}}), iconTransformation(extent=
                     {{-10,-108},{10,-88}})));
            Interfaces.DistributionControlBus sigBusDistr annotation (Placement(
                  transformation(extent={{-16,78},{18,112}}), iconTransformation(extent={{
                      -16,78},{18,112}})));
            Interfaces.InternalElectricalPin internalElectricalPin[nSubSys]
              annotation (Placement(transformation(extent={{40,90},{60,110}})));
            Interfaces.ExternalElectricalPin externalElectricalPin
              annotation (Placement(transformation(extent={{40,-108},{60,-88}})));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                                        Text(
                    extent={{-100,-74},{104,-170}},
                    lineColor={0,0,0},
                    textString="%name%"),
                  Rectangle(
                    extent={{-60,34},{66,-42}},
                    lineColor={0,0,0},
                    lineThickness=1,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Rectangle(
                    extent={{28,14},{40,-24}},
                    lineThickness=1,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid,
                    pattern=LinePattern.None),
                  Rectangle(
                    extent={{-6,19},{6,-19}},
                    lineThickness=1,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid,
                    origin={33,-6},
                    rotation=-90,
                    pattern=LinePattern.None),
                  Rectangle(
                    extent={{-6,19},{6,-19}},
                    lineThickness=1,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid,
                    origin={-25,-6},
                    rotation=-90,
                    pattern=LinePattern.None),
                  Rectangle(
                    extent={{-46,54},{-24,40}},
                    pattern=LinePattern.None,
                    lineThickness=1,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    lineColor={0,0,0}),
                  Rectangle(
                    extent={{24,54},{46,40}},
                    pattern=LinePattern.None,
                    lineThickness=1,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid,
                    lineColor={0,0,0})}),                                  Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialDistribution;
        annotation (Icon(graphics={
                Rectangle(
                  lineColor={200,200,200},
                  fillColor={248,248,248},
                  fillPattern=FillPattern.HorizontalCylinder,
                  extent={{-100,-100},{100,100}},
                  radius=25.0),
                Rectangle(
                  lineColor={128,128,128},
                  extent={{-100,-100},{100,100}},
                  radius=25.0),
                Ellipse(
                  extent={{-30,-30},{30,30}},
                  lineColor={128,128,128},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end BaseClasses;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

        end RecordsCollection;

        package Tests
          extends Modelica.Icons.ExamplesPackage;
          model BatterySystemSimple
            extends Modelica.Icons.Example;
            BESMod.HugosProject.Systems.Electrical.Distribution.BatterySystemSimple
              batterySystemSimple(nSubSys=2, redeclare
                BuildingSystems.Technologies.ElectricalStorages.Data.LithiumIon.LithiumIonTeslaPowerwall1
                batteryParameters) annotation (Placement(transformation(extent=
                      {{-32,-36},{40,38}})));
            Utilities.Electrical.RealToElecCon realToElecCon(use_souLoa=false)
              annotation (Placement(transformation(extent={{-44,50},{-24,70}})));
            Utilities.Electrical.RealToElecCon realToElecCon1(use_souGen=false)
              annotation (Placement(transformation(extent={{58,50},{38,70}})));
            Utilities.Electrical.ElecConToReal elecConToReal
              annotation (Placement(transformation(extent={{44,-76},{74,-46}})));
            Modelica.Blocks.Sources.Sine ElectricalLoad(
              amplitude=3000,
              f=1/86400,
              phase=1.5707963267949,
              offset=3000)
              annotation (Placement(transformation(extent={{98,48},{74,72}})));
            Modelica.Blocks.Sources.Sine PGeneration(
              amplitude=2000,
              f=1/86400,
              phase=4.7123889803847,
              offset=2000)
              annotation (Placement(transformation(extent={{-86,48},{-62,72}})));
            Modelica.Blocks.Interfaces.RealOutput SOC
              annotation (Placement(transformation(extent={{54,-98},{74,-78}})));
            Interfaces.DistributionOutputs OutputDistr1
              annotation (Placement(transformation(extent={{-6,-70},{14,-50}})));
            Modelica.Blocks.Interfaces.RealOutput PGrid "Electrical power"
              annotation (Placement(transformation(extent={{88,-72},{108,-52}})));
          equation
            connect(batterySystemSimple.externalElectricalPin, elecConToReal.internalElectricalPin)
              annotation (Line(
                points={{22,-35.26},{22,-60.7},{44.3,-60.7}},
                color={0,0,0},
                thickness=1));
            connect(batterySystemSimple.OutputDistr, OutputDistr1.SOCBat) annotation (
                Line(
                points={{4,-35.26},{4,-60}},
                color={255,204,51},
                thickness=0.5));
            connect(OutputDistr1.SOCBat.SOCBat, SOC) annotation (Line(
                points={{4,-60},{4,-88},{64,-88}},
                color={255,204,51},
                thickness=0.5), Text(
                string="%first",
                index=-1,
                extent={{-6,3},{-6,3}},
                horizontalAlignment=TextAlignment.Right));
            connect(elecConToReal.PElecLoa, PGrid)
              annotation (Line(points={{77,-55},{98,-55},{98,-62}},   color={0,0,127}));
            connect(realToElecCon1.internalElectricalPin, batterySystemSimple.internalElectricalPin[
              1]) annotation (Line(
                points={{37.8,60.2},{22,60.2},{22,36.15}},
                color={0,0,0},
                thickness=1));
            connect(realToElecCon.internalElectricalPin, batterySystemSimple.internalElectricalPin[
              2]) annotation (Line(
                points={{-23.8,60.2},{22,60.2},{22,39.85}},
                color={0,0,0},
                thickness=1));
            connect(PGeneration.y, realToElecCon.PEleGen) annotation (Line(points={{-60.8,
                    60},{-54,60},{-54,56},{-46,56}}, color={0,0,127}));
            connect(ElectricalLoad.y, realToElecCon1.PEleLoa) annotation (Line(points={{
                    72.8,60},{68,60},{68,64},{60,64}}, color={0,0,127}));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(
                StopTime=86400,
                Interval=900,
                __Dymola_Algorithm="Dassl"),
              __Dymola_experimentSetupOutput,
              __Dymola_experimentFlags(
                Advanced(
                  EvaluateAlsoTop=true,
                  GenerateVariableDependencies=false,
                  OutputModelicaCode=false),
                Evaluate=true,
                OutputCPUtime=false,
                OutputFlatModelica=false));
          end BatterySystemSimple;
        end Tests;

        package Components
          model FixedInitialBatterySimple
            "Add fixed initial conditions to BuildingSystems"
            // Give some dummy to avoid errors in BuildingSystems
            extends
              BuildingSystems.Technologies.ElectricalStorages.BatterySimple(
                redeclare
                BuildingSystems.Technologies.ElectricalStorages.Data.LithiumIon.LithiumIonAquion
                batteryData);
          initial equation

            EAva = c*SOC_start*E_nominal;
            EBou = (1.0-c)*SOC_start*E_nominal;
            E = E_nominal * SOC_start;
            E_charged = E_start;
            E_discharged = E_start;
          end FixedInitialBatterySimple;
        end Components;
      annotation (Icon(graphics={
              Rectangle(
                lineColor={200,200,200},
                fillColor={248,248,248},
                fillPattern=FillPattern.HorizontalCylinder,
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Rectangle(
                lineColor={128,128,128},
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Rectangle(
                lineColor={128,128,128},
                extent={{-100,-100},{100,100}},
                radius=25.0),
            Rectangle(extent={{-80,66},{-18,-42}}, lineColor={0,0,0}),
            Rectangle(extent={{24,66},{88,8}}, lineColor={0,0,0}),
            Rectangle(extent={{24,-24},{88,-82}}, lineColor={0,0,0}),
            Line(points={{-20,50},{24,50}}, color={0,0,0}),
            Line(points={{-20,24},{24,24}}, color={0,0,0}),
            Line(points={{74,-24},{74,8}}, color={0,0,0}),
            Line(points={{38,-24},{38,8}}, color={0,0,0})}));
      end Distribution;

      package Generation "Subsystems and models for electrical generation (e.g. PV system)"

        model PVSystemMultiSub
          "PV system with subsystems of different orientation and module type"
          extends
            BESMod.HugosProject.Systems.Electrical.Generation.BaseClasses.PartialGeneration(
              numGenUnits=1);

          AixLib.Electrical.PVSystem.PVSystem pVSystem[numGenUnits](
            final data=pVParameters,
            redeclare final model IVCharacteristics =
                AixLib.Electrical.PVSystem.BaseClasses.IVCharacteristics5pAnalytical,
            redeclare model CellTemperature = CellTemperature,
            final n_mod=n_mod,
            final til=til,
            final azi=azi,
            each final lat=lat,
            each final lon=lon,
            each final alt=alt,
            each final timZon=timZon,
            each final groRef=0.2,
            each final use_ParametersGlaz=false)
            annotation (Placement(transformation(extent={{-32,-30},{26,28}})));
          Modelica.Blocks.Math.Sum sumOfPower(nin=numGenUnits)
                                              "Sums up DC Output power" annotation (
              Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={50,20})));
          replaceable model CellTemperature =
              AixLib.Electrical.PVSystem.BaseClasses.PartialCellTemperature annotation (
             __Dymola_choicesAllMatching=true);
          Utilities.Electrical.RealToElecCon realToElecCon(use_souLoa=false)
            annotation (Placement(transformation(
                extent={{-10,-10},{10,10}},
                rotation=90,
                origin={50,58})));
          replaceable parameter AixLib.DataBase.SolarElectric.PVBaseDataDefinition pVParameters[numGenUnits]
          constrainedby AixLib.DataBase.SolarElectric.PVBaseDataDefinition
            annotation(choicesAllMatching=true,Placement(transformation(extent={{-82,-40},
                    {-62,-20}})));
          parameter Modelica.Units.SI.Angle lat "Location's Latitude" annotation (
              Dialog(group=
                  "Design - Top Down: Parameters are given by the parent system"));
          parameter Modelica.Units.SI.Angle lon "Location's Longitude" annotation (
              Dialog(group=
                  "Design - Top Down: Parameters are given by the parent system"));
          parameter Real alt "Site altitude in Meters, default= 1"
          annotation(Dialog(group="Design - Top Down: Parameters are given by the parent system"));
          parameter Modelica.Units.SI.Time timZon
            "Time zone. Should be equal with timZon in ReaderTMY3, if PVSystem and ReaderTMY3 are used together."
            annotation (Dialog(group=
                  "Design - Top Down: Parameters are given by the parent system"));
          parameter Real n_mod[numGenUnits]={f_design[i]*ARoof/pVParameters[i].A_mod for i in 1:numGenUnits} "Number of connected PV modules";
          parameter Modelica.Units.SI.Angle til[numGenUnits]=fill(20*Modelica.Constants.pi/180,numGenUnits) "Surface's tilt angle (0:flat)";
          parameter Modelica.Units.SI.Angle azi[numGenUnits]=fill(0*Modelica.Constants.pi/180,numGenUnits)  "Surface's azimut angle (0:South)";
          parameter Modelica.Units.SI.Area ARoof(min=0) "Roof area of building" annotation(Dialog(group="Design - Top Down: Parameters are given by the parent system"));

          Utilities.KPIs.InputKPICalculator inputKPICalculator(
            unit="W",
            integralUnit="J",
            calc_singleOnTime=false,
            calc_totalOnTime=false,
            calc_numSwi=false,
            calc_movAve=false,
            calc_intBelThres=false)
            annotation (Placement(transformation(extent={{56,-78},{76,-42}})));
        equation
          for i in 1:numGenUnits loop
            connect(pVSystem[i].weaBus, weaBus);
          end for;
          connect(sumOfPower.y, realToElecCon.PEleGen)
            annotation (Line(points={{50,31},{54,31},{54,46}}, color={0,0,127}));
          connect(realToElecCon.internalElectricalPin, internalElectricalPin)
            annotation (Line(
              points={{49.8,68.2},{49.8,82.1},{50,82.1},{50,98}},
              color={0,0,0},
              thickness=1));
          connect(pVSystem.DCOutputPower, sumOfPower.u)
            annotation (Line(points={{28.9,-1},{50,-1},{50,8}}, color={0,0,127}));
          connect(sumOfPower.y, inputKPICalculator.u) annotation (Line(points={{50,31},
                  {50,38},{68,38},{68,-34},{46,-34},{46,-60},{53.8,-60}}, color={0,0,
                  127}));
          connect(inputKPICalculator.KPIBus, outBusGen.WelPV) annotation (Line(
              points={{76.2,-60},{86,-60},{86,-99},{1.77636e-15,-99}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
           annotation(Dialog(group="Design - Bottom Up: Parameters are defined by the subsystem"),
                      Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end PVSystemMultiSub;

        model NoGeneration "Don't generation electricity"
          extends BaseClasses.PartialGeneration(final f_design=fill(0.8, numGenUnits),
                                                final numGenUnits=1);
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{10,60},{30,80}})));
        equation
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{30,70},{50,70},{50,98}},
              color={0,0,0},
              thickness=1));
        end NoGeneration;

        package BaseClasses

          partial model PartialGeneration
            "Basic model with interfaces for electrical generation package"

            parameter Integer numGenUnits(min=1) "Number of generation (e.g. PV module) units"
            annotation(Dialog(group="Design - Bottom Up: Parameters are defined by the subsystem"));
            parameter Real f_design[numGenUnits]=fill(0.8, numGenUnits) "Over-/undersizing factor relative to maximum capacity, e.g., roof area"
                                                                                                                                                annotation(Dialog(group="Design - Bottom Up: Parameters are defined by the subsystem"));
            IBPSA.BoundaryConditions.WeatherData.Bus weaBus annotation (Placement(
                  transformation(extent={{-120,44},{-80,84}}), iconTransformation(extent={{-110,66},
                      {-90,86}})));
            Interfaces.GenerationOutputs outBusGen annotation (Placement(transformation(
                    extent={{-14,-112},{14,-86}}), iconTransformation(extent={{-14,-112},
                      {14,-86}})));
            Interfaces.GenerationControlBus controlBusGen annotation (Placement(
                  transformation(extent={{-12,86},{14,110}}), iconTransformation(extent={
                      {-12,86},{14,110}})));
            Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{40,88},{60,108}})));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                                        Text(
                    extent={{-98,-82},{106,-178}},
                    lineColor={0,0,0},
                    textString="%name%"),
                  Ellipse(
                    extent={{-90,66},{-56,30}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={255,255,0},
                    fillPattern=FillPattern.Solid),
                            Line(
                    points={{-38,70},{-12,30},{12,82},{36,44},{44,42}},
                    color={0,0,0},
                    thickness=1,
                    smooth=Smooth.Bezier),
                  Text(
                    extent={{34,22},{120,-28}},
                    lineColor={0,0,0},
                    textString="P"),
                  Polygon(
                    points={{42,50},{42,34},{54,42},{42,50}},
                    lineColor={0,0,0},
                    lineThickness=1,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                            Line(
                    points={{-36,20},{-10,-20},{14,32},{38,-6},{46,-8}},
                    color={0,0,0},
                    thickness=1,
                    smooth=Smooth.Bezier),
                            Line(
                    points={{-32,-38},{-6,-78},{18,-26},{42,-64},{50,-66}},
                    color={0,0,0},
                    thickness=1,
                    smooth=Smooth.Bezier),
                  Polygon(
                    points={{-54,58},{-52,48},{-46,54},{-42,52},{-40,48},{-38,42},{-38,36},
                        {-46,26},{-76,18},{-92,26},{-98,32},{-98,42},{-96,46},{-86,46},{
                        -72,40},{-74,52},{-66,58},{-58,60},{-54,58}},
                    lineColor={0,0,0},
                    fillPattern=FillPattern.Sphere,
                    smooth=Smooth.Bezier,
                    fillColor={230,230,230},
                    lineThickness=0.5),
                  Line(
                    points={{-74,-56},{-76,-94},{-66,-94},{-70,-56},{-74,-56}},
                    color={0,0,0},
                    thickness=0.5,
                    smooth=Smooth.Bezier),
                  Ellipse(
                    extent={{-76,-48},{-68,-58}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={230,230,230},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-70,-58},{-50,-66},{-68,-54}},
                    color={0,0,0},
                    thickness=0.5,
                    smooth=Smooth.Bezier),
                  Line(
                    points={{-74,-48},{-72,-28},{-70,-48}},
                    color={0,0,0},
                    thickness=0.5,
                    smooth=Smooth.Bezier),
                  Line(
                    points={{-74,-58},{-92,-66},{-76,-54}},
                    color={0,0,0},
                    smooth=Smooth.Bezier,
                    thickness=0.5),
                  Rectangle(
                    extent={{-86,8},{-56,-26}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={28,108,200},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{-80,8},{-80,-26}},
                    color={255,255,255},
                    thickness=1),
                  Line(
                    points={{-74,8},{-74,-26}},
                    color={255,255,255},
                    thickness=1),
                  Line(
                    points={{-68,8},{-68,-26}},
                    color={255,255,255},
                    thickness=1),
                  Line(
                    points={{-62,8},{-62,-26}},
                    color={255,255,255},
                    thickness=1),
                  Line(
                    points={{-86,2},{-56,2}},
                    color={255,255,255},
                    thickness=1),
                  Line(
                    points={{-86,-4},{-56,-4}},
                    color={255,255,255},
                    thickness=1),
                  Line(
                    points={{-86,-12},{-56,-12}},
                    color={255,255,255},
                    thickness=1),
                  Line(
                    points={{-86,-20},{-56,-20}},
                    color={255,255,255},
                    thickness=1),
                  Polygon(
                    points={{46,0},{46,-16},{58,-8},{46,0}},
                    lineColor={0,0,0},
                    lineThickness=1,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid),
                  Polygon(
                    points={{50,-58},{50,-74},{62,-66},{50,-58}},
                    lineColor={0,0,0},
                    lineThickness=1,
                    fillColor={0,0,0},
                    fillPattern=FillPattern.Solid)}),                      Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialGeneration;
        annotation (Icon(graphics={
                Rectangle(
                  lineColor={200,200,200},
                  fillColor={248,248,248},
                  fillPattern=FillPattern.HorizontalCylinder,
                  extent={{-100,-100},{100,100}},
                  radius=25.0),
                Rectangle(
                  lineColor={128,128,128},
                  extent={{-100,-100},{100,100}},
                  radius=25.0),
                Ellipse(
                  extent={{-30,-30},{30,30}},
                  lineColor={128,128,128},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end BaseClasses;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

        end RecordsCollection;

        package Tests
          extends Modelica.Icons.ExamplesPackage;

          model PVSystemMultiSub
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Electrical.Generation.PVSystemMultiSub
                generation(
                redeclare model CellTemperature =
                    AixLib.Electrical.PVSystem.BaseClasses.CellTemperatureOpenRack,
                redeclare AixLib.DataBase.SolarElectric.SchuecoSPV170SME1
                  pVParameters,
                lat=weaDat.lat,
                lon=weaDat.lon,
                alt=1,
                timZon=weaDat.timZon,
                ARoof=50));

            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(
                StopTime=86400,
                Interval=900,
                __Dymola_Algorithm="Dassl"),
              __Dymola_experimentSetupOutput,
              __Dymola_experimentFlags(
                Advanced(
                  EvaluateAlsoTop=true,
                  GenerateVariableDependencies=false,
                  OutputModelicaCode=false),
                Evaluate=true,
                OutputCPUtime=false,
                OutputFlatModelica=false));
          end PVSystemMultiSub;

          model TestNoGeneration
            extends PartialTest(redeclare
                BESMod.HugosProject.Systems.Electrical.Generation.NoGeneration generation);

            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(
                StopTime=86400,
                Interval=900,
                __Dymola_Algorithm="Dassl"),
              __Dymola_experimentSetupOutput,
              __Dymola_experimentFlags(
                Advanced(
                  EvaluateAlsoTop=true,
                  GenerateVariableDependencies=false,
                  OutputModelicaCode=false),
                Evaluate=true,
                OutputCPUtime=false,
                OutputFlatModelica=false));
          end TestNoGeneration;

          partial model PartialTest
            extends Modelica.Icons.Example;
            replaceable
              BESMod.HugosProject.Systems.Electrical.Generation.BaseClasses.PartialGeneration
              generation constrainedby BaseClasses.PartialGeneration
              annotation (Placement(transformation(extent={{-42,-36},{42,44}})),
                choicesAllMatching=true);
            IBPSA.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam=
                  ModelicaServices.ExternalReferences.loadResource(
                  "modelica://BESMod/Resources/TRY2015_522361130393_Jahr_City_Potsdam.mos"))
              annotation (Placement(transformation(extent={{-100,58},{-62,100}})));
            Utilities.Electrical.ElecConToReal elecConToReal
              annotation (Placement(transformation(extent={{56,54},{92,98}})));
          equation
            connect(weaDat.weaBus, generation.weaBus) annotation (Line(
                points={{-62,79},{-58,79},{-58,34.4},{-42,34.4}},
                color={255,204,51},
                thickness=0.5));
            connect(generation.internalElectricalPin, elecConToReal.internalElectricalPin)
              annotation (Line(
                points={{21,43.2},{21,76.44},{56.36,76.44}},
                color={0,0,0},
                thickness=1));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(
                StopTime=86400,
                Interval=900,
                __Dymola_Algorithm="Dassl"),
              __Dymola_experimentSetupOutput,
              __Dymola_experimentFlags(
                Advanced(
                  EvaluateAlsoTop=true,
                  GenerateVariableDependencies=false,
                  OutputModelicaCode=false),
                Evaluate=true,
                OutputCPUtime=false,
                OutputFlatModelica=false));
          end PartialTest;
        end Tests;
      annotation (Icon(graphics={
              Rectangle(
                lineColor={200,200,200},
                fillColor={248,248,248},
                fillPattern=FillPattern.HorizontalCylinder,
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Rectangle(
                lineColor={128,128,128},
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Rectangle(
                lineColor={128,128,128},
                extent={{-100,-100},{100,100}},
                radius=25.0),
            Rectangle(extent={{-80,66},{-18,-42}}, lineColor={0,0,0}),
            Rectangle(extent={{24,66},{88,8}}, lineColor={0,0,0}),
            Rectangle(extent={{24,-24},{88,-82}}, lineColor={0,0,0}),
            Line(points={{-20,50},{24,50}}, color={0,0,0}),
            Line(points={{-20,24},{24,24}}, color={0,0,0}),
            Line(points={{74,-24},{74,8}}, color={0,0,0}),
            Line(points={{38,-24},{38,8}}, color={0,0,0})}));
      end Generation;

      package Transfer "Models for transfer system in electrical package"

        model NoElectricalTransfer "No transfer system"
          extends
            BESMod.HugosProject.Systems.Electrical.Transfer.BaseClasses.PartialTransfer;
          Utilities.Electrical.ZeroLoad zeroLoad
            annotation (Placement(transformation(extent={{16,64},{36,84}})));
        equation
          connect(zeroLoad.internalElectricalPin, internalElectricalPin) annotation (
              Line(
              points={{36,74},{48,74},{48,100}},
              color={0,0,0},
              thickness=1));
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end NoElectricalTransfer;

        package BaseClasses "Base classes for transfer electrical system"

          partial model PartialTransfer "Partial model for transfer subsystems"
             parameter Integer nParallelDem(min=1)
              "Number of parallel demand systems of this system";

            Interfaces.TransferOutputs transferOutputs annotation (Placement(
                  transformation(extent={{-16,-114},{16,-84}}), iconTransformation(extent=
                     {{-16,-114},{16,-84}})));
            Interfaces.TransferControlBus transferControlBus annotation (Placement(
                  transformation(extent={{-14,84},{14,112}}), iconTransformation(extent={
                      {-14,84},{14,112}})));
            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortCon[nParallelDem]
              "Heat port for convective heat transfer with room air temperature"
              annotation (Placement(transformation(extent={{90,28},{110,48}}),
                  iconTransformation(extent={{90,30},{110,50}})));
            Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortRad[nParallelDem]
              "Heat port for radiative heat transfer with room air temperature"
              annotation (Placement(transformation(extent={{90,-48},{110,-28}}),
                  iconTransformation(extent={{90,-18},{110,2}})));
            Interfaces.InternalElectricalPin internalElectricalPin
              annotation (Placement(transformation(extent={{38,90},{58,110}})));
            annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                    Rectangle(
                    extent={{-100,100},{100,-100}},
                    lineColor={0,0,0},
                    lineThickness=0.5,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                                        Text(
                    extent={{-100,-80},{104,-176}},
                    lineColor={0,0,0},
                    textString="%name%"),
                  Line(
                    points={{-58,92},{-98,34},{-72,34},{-86,-20},{-26,50},{-62,50},{-36,92},
                        {-58,92}},
                    color={0,0,0},
                    thickness=1),
                            Line(
                    points={{-30,30},{-28,-2},{-10,6},{-6,6},{-2,4}},
                    color={238,46,47},
                    thickness=1,
                    smooth=Smooth.Bezier),
                  Polygon(
                    points={{-18,-4},{-8,-10},{-8,-5.81411e-16},{-18,-4}},
                    lineColor={238,46,47},
                    lineThickness=1,
                    fillColor={238,46,47},
                    fillPattern=FillPattern.Solid,
                    origin={4,-8},
                    rotation=-90),
                  Rectangle(
                    extent={{18,-22},{88,-84}},
                    lineColor={0,0,0},
                    lineThickness=1,
                    fillColor={255,255,255},
                    fillPattern=FillPattern.Solid),
                  Line(
                    points={{18,-22},{52,20},{88,-22}},
                    color={0,0,0},
                    thickness=1),
                  Text(
                    extent={{10,-32},{92,-80}},
                    lineColor={238,46,47},
                    textString="Q̇")}),                                   Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end PartialTransfer;
        annotation (Icon(graphics={
                Rectangle(
                  lineColor={200,200,200},
                  fillColor={248,248,248},
                  fillPattern=FillPattern.HorizontalCylinder,
                  extent={{-100,-100},{100,100}},
                  radius=25.0),
                Rectangle(
                  lineColor={128,128,128},
                  extent={{-100,-100},{100,100}},
                  radius=25.0),
                Ellipse(
                  extent={{-30,-30},{30,30}},
                  lineColor={128,128,128},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end BaseClasses;

        package RecordsCollection "Record data for the options in this subsystem"
          extends Modelica.Icons.RecordsPackage;

        end RecordsCollection;

        package Tests
          extends Modelica.Icons.ExamplesPackage;

          model NoElectricalTransfer
            extends Modelica.Icons.Example;
            BESMod.HugosProject.Systems.Electrical.Transfer.NoElectricalTransfer
              noElectricalTransfer(nParallelDem=1) annotation (Placement(
                  transformation(extent={{-44,-32},{48,52}})));

            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=3600, __Dymola_Algorithm="Dassl"),
              __Dymola_experimentSetupOutput,
              __Dymola_experimentFlags(
                Advanced(
                  EvaluateAlsoTop=true,
                  GenerateVariableDependencies=false,
                  OutputModelicaCode=false),
                Evaluate=true,
                OutputCPUtime=false,
                OutputFlatModelica=false));
          end NoElectricalTransfer;

          partial model PartialTest
            extends Modelica.Icons.Example;
            replaceable
              BESMod.HugosProject.Systems.Electrical.Transfer.BaseClasses.PartialTransfer
              transfer constrainedby BaseClasses.PartialTransfer(nParallelDem=1)
              annotation (Placement(transformation(extent={{-44,-32},{48,52}})),
                choicesAllMatching=true);
            Modelica.Thermal.HeatTransfer.Sources.FixedTemperature fixedTemperature[1](each T=
                  293.15) annotation (Placement(transformation(extent={{88,-18},{68,2}})));
          equation
            connect(fixedTemperature.port, transfer.heatPortRad) annotation (
                Line(points={{68,-8},{60,-8},{60,6.64},{48,6.64}}, color={191,0,0}));
            connect(fixedTemperature.port, transfer.heatPortCon) annotation (Line(points=
                    {{68,-8},{60,-8},{60,26.8},{48,26.8}}, color={191,0,0}));
            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)),
              experiment(StopTime=3600, __Dymola_Algorithm="Dassl"),
              __Dymola_experimentSetupOutput,
              __Dymola_experimentFlags(
                Advanced(
                  EvaluateAlsoTop=true,
                  GenerateVariableDependencies=false,
                  OutputModelicaCode=false),
                Evaluate=true,
                OutputCPUtime=false,
                OutputFlatModelica=false));
          end PartialTest;
        end Tests;
      annotation (Icon(graphics={
              Rectangle(
                lineColor={200,200,200},
                fillColor={248,248,248},
                fillPattern=FillPattern.HorizontalCylinder,
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Rectangle(
                lineColor={128,128,128},
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Rectangle(
                lineColor={128,128,128},
                extent={{-100,-100},{100,100}},
                radius=25.0),
            Rectangle(extent={{-80,66},{-18,-42}}, lineColor={0,0,0}),
            Rectangle(extent={{24,66},{88,8}}, lineColor={0,0,0}),
            Rectangle(extent={{24,-24},{88,-82}}, lineColor={0,0,0}),
            Line(points={{-20,50},{24,50}}, color={0,0,0}),
            Line(points={{-20,24},{24,24}}, color={0,0,0}),
            Line(points={{74,-24},{74,8}}, color={0,0,0}),
            Line(points={{38,-24},{38,8}}, color={0,0,0})}));
      end Transfer;

      package Interfaces "Interfaces for electrical package"
        extends Modelica.Icons.InterfacesPackage;

        expandable connector GenerationControlBus
          "Control bus for inputs to electrical generation models"
          extends BESMod.Utilities.Icons.ControlBus;
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end GenerationControlBus;

        expandable connector DistributionControlBus
          extends BESMod.Utilities.Icons.ControlBus;
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end DistributionControlBus;

        expandable connector TransferControlBus
          extends BESMod.Utilities.Icons.ControlBus;
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end TransferControlBus;

        expandable connector GenerationOutputs "Bus for outputs of electrical generation models"
          extends BESMod.Utilities.Icons.KPIBus;
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end GenerationOutputs;

        expandable connector DistributionOutputs
          extends BESMod.Utilities.Icons.KPIBus;
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end DistributionOutputs;

        expandable connector TransferOutputs
          extends BESMod.Utilities.Icons.KPIBus;
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end TransferOutputs;

        expandable connector ControlOutputs "Control bus for controller outputs"
          extends BESMod.Utilities.Icons.KPIBus;
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end ControlOutputs;

        expandable connector SystemControlBus
          "System control bus for inputs to electrical models"
          extends BESMod.Utilities.Icons.ControlBus;
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end SystemControlBus;

        connector InternalElectricalPin
          "Simplified electrical pin for power flow only within the building energy system"
          extends
            BESMod.HugosProject.Systems.Electrical.Interfaces.BaseClasses.ElectricalPin;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fillColor={0,140,72},
                  fillPattern=FillPattern.Solid), Line(
                  points={{52,90},{-60,-10},{48,12},{-20,-86}},
                  color={0,0,0},
                  thickness=1,
                  arrow={Arrow.None,Arrow.Filled})}),
                                                    Diagram(graphics,
                                                            coordinateSystem(
                  preserveAspectRatio=false)));
        end InternalElectricalPin;

        connector ExternalElectricalPin
          "Simplified electrical pin for power flow only within the building energy system"
          extends
            BESMod.HugosProject.Systems.Electrical.Interfaces.BaseClasses.ElectricalPin;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  lineThickness=1,
                  fillColor={0,255,128},
                  fillPattern=FillPattern.Solid), Line(
                  points={{52,90},{-60,-10},{48,12},{-20,-86}},
                  color={0,0,0},
                  thickness=1,
                  arrow={Arrow.None,Arrow.Filled})}),
                                                    Diagram(graphics,
                                                            coordinateSystem(
                  preserveAspectRatio=false)));
        end ExternalElectricalPin;

        package BaseClasses

          partial connector ElectricalPin
            Modelica.Units.SI.Power PElecLoa
              "Electrical power flow; positive = power consumption; negative = power generation";
            Modelica.Units.SI.Power PElecGen
              "Electrical power flow; positive = power generation; negative = power consumption";

            annotation (Icon(graphics,
                             coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                  coordinateSystem(preserveAspectRatio=false)));
          end ElectricalPin;
        annotation (Icon(graphics={
                Rectangle(
                  lineColor={200,200,200},
                  fillColor={248,248,248},
                  fillPattern=FillPattern.HorizontalCylinder,
                  extent={{-100,-100},{100,100}},
                  radius=25.0),
                Rectangle(
                  lineColor={128,128,128},
                  extent={{-100,-100},{100,100}},
                  radius=25.0),
                Ellipse(
                  extent={{-30,-30},{30,30}},
                  lineColor={128,128,128},
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid)}));
        end BaseClasses;
      end Interfaces;

      model ElectricalSystem "Example of electrical system"
        extends
          BESMod.HugosProject.Systems.Electrical.BaseClasses.PartialElectricalSystem;
        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end ElectricalSystem;

      model DirectGridConnectionSystem
        "Direct grid connection only, no generation or transfer"
        extends BaseClasses.PartialElectricalSystem(
          redeclare final
            BESMod.HugosProject.Systems.Electrical.Generation.NoGeneration generation,
          redeclare final
            BESMod.HugosProject.Systems.Electrical.Control.NoControl control,
          redeclare final
            BESMod.HugosProject.Systems.Electrical.Transfer.NoElectricalTransfer
            transfer,
          redeclare final
            BESMod.HugosProject.Systems.Electrical.Distribution.DirectlyToGrid distribution);
      end DirectGridConnectionSystem;

      package BaseClasses "Package with base classes"

        partial model PartialElectricalSystem "Partial model for electrical system"
          parameter Integer nLoadsExtSubSys(min=1) = 4 "Number of external subsystems which result in electrical load / generation";
          parameter Boolean use_elecHeating=true "=false to disable electric heating";
          replaceable parameter RecordsCollection.ElectricalSystemBaseDataDefinition
            electricalSystemParameters constrainedby
            RecordsCollection.ElectricalSystemBaseDataDefinition annotation (Placement(
                transformation(extent={{-180,-100},{-160,-80}})), choicesAllMatching=true);

          replaceable Distribution.BaseClasses.PartialDistribution distribution
            constrainedby Distribution.BaseClasses.PartialDistribution(nSubSys=
                nLoadsExtSubSys + 2)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-40,
                    -102},{52,36}})));
          replaceable Generation.BaseClasses.PartialGeneration generation
            constrainedby
            BESMod.HugosProject.Systems.Electrical.Generation.BaseClasses.PartialGeneration
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-148,
                    -102},{-62,36}})));
          AixLib.BoundaryConditions.WeatherData.Bus weaBus annotation (Placement(
                transformation(extent={{-200,24},{-160,66}}), iconTransformation(extent=
                   {{-200,24},{-160,66}})));
          replaceable Transfer.BaseClasses.PartialTransfer transfer if use_elecHeating constrainedby
            Transfer.BaseClasses.PartialTransfer(final nParallelDem=
                electricalSystemParameters.nZones)
            annotation (choicesAllMatching=true, Placement(transformation(extent={{68,-102},
                    {144,36}})));
          replaceable Control.BaseClasses.PartialControl control constrainedby
            BESMod.HugosProject.Systems.Electrical.Control.BaseClasses.PartialControl
            annotation (choicesAllMatching=true, Placement(transformation(extent={{-146,
                    56},{142,106}})));
          Interfaces.InternalElectricalPin internalElectricalPin[nLoadsExtSubSys]
            annotation (Placement(transformation(extent={{-190,78},{-170,98}})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortCon[
            electricalSystemParameters.nZones] if use_elecHeating
            "Heat port for convective heat transfer with room air temperature"
            annotation (Placement(transformation(extent={{152,4},{172,24}}),
                iconTransformation(extent={{152,4},{172,24}})));
          Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a heatPortRad[
            electricalSystemParameters.nZones] if use_elecHeating
            "Heat port for radiative heat transfer with room air temperature"
            annotation (Placement(transformation(extent={{152,-70},{172,-50}})));
          BESMod.HugosProject.Systems.Interfaces.UseProBus useProBus
            annotation (Placement(transformation(extent={{-120,120},{-74,156}}),
                iconTransformation(extent={{-120,120},{-74,156}})));
          BESMod.HugosProject.Systems.Interfaces.BuiMeaBus buiMeaBus
            annotation (Placement(transformation(extent={{48,124},{92,156}}),
                iconTransformation(extent={{48,124},{92,156}})));
          BESMod.HugosProject.Systems.Interfaces.ElectricalOutputs outBusElect
            annotation (Placement(transformation(extent={{-22,-160},{24,-120}}),
                iconTransformation(extent={{-22,-160},{24,-120}})));
          Interfaces.ExternalElectricalPin externalElectricalPin1
            annotation (Placement(transformation(extent={{-182,-146},{-162,-126}})));
          Interfaces.SystemControlBus systemControlBus annotation (Placement(
                transformation(extent={{-26,122},{20,160}}), iconTransformation(extent={
                    {-26,122},{20,160}})));
        protected
            BESMod.Utilities.Electrical.ZeroLoad zeroTraLoad if not use_elecHeating "Internal helper";
        equation
          connect(generation.weaBus, weaBus) annotation (Line(
              points={{-148,19.44},{-162,19.44},{-162,42},{-180,42},{-180,45}},
              color={255,204,51},
              thickness=0.5));
          connect(control.generationControlBus, generation.controlBusGen) annotation (
              Line(
              points={{-104,56.5},{-104.57,56.5},{-104.57,34.62}},
              color={215,215,215},
              thickness=0.5));
          connect(control.distributionControlBus, distribution.sigBusDistr) annotation (
             Line(
              points={{4.6,56.25},{4.6,43.125},{6.46,43.125},{6.46,32.55}},
              color={215,215,215},
              thickness=0.5));

          connect(weaBus, control.weaBus) annotation (Line(
              points={{-180,45},{-180,42},{-162,42},{-162,86},{-146,86},{-146,85.5}},
              color={255,204,51},
              thickness=0.5), Text(
              string="%first",
              index=-1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(control.useProBus, useProBus) annotation (Line(
              points={{-69.8,106.5},{-69.8,123.25},{-97,123.25},{-97,138}},
              color={0,127,0},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(control.buiMeaBus, buiMeaBus) annotation (Line(
              points={{37,106.75},{37,124.375},{70,124.375},{70,140}},
              color={255,128,0},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(distribution.OutputDistr, outBusElect.distribution) annotation (Line(
              points={{6,-100.62},{4,-100.62},{4,-140},{1,-140}},
              color={175,175,175},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));

          connect(generation.outBusGen, outBusElect.generation) annotation (Line(
              points={{-105,-101.31},{-105,-140},{1,-140}},
              color={175,175,175},
              thickness=0.5));
          connect(distribution.externalElectricalPin, externalElectricalPin1)
            annotation (Line(
              points={{29,-100.62},{29,-123.31},{-172,-123.31},{-172,-136}},
              color={0,0,0},
              thickness=1));
          connect(control.systemControlBus, systemControlBus) annotation (Line(
              points={{-2,106},{-2,141},{-3,141}},
              color={215,215,215},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-3,6},{-3,6}},
              horizontalAlignment=TextAlignment.Right));
          connect(generation.internalElectricalPin, distribution.internalElectricalPin[2])
            annotation (Line(
              points={{-83.5,34.62},{-83.5,46},{29,46},{29,36}},
              color={0,0,0},
              thickness=1));
          for i in 1:nLoadsExtSubSys loop
           connect(internalElectricalPin[i], distribution.internalElectricalPin[2+i])
            annotation (Line(
              points={{-180,88},{-180,86},{-166,86},{-166,46},{30,46},{30,42},{29,42},{
                    29,36}},
              color={0,0,0},
              thickness=1));
          end for;
          if use_elecHeating then
            connect(heatPortCon, transfer.heatPortCon) annotation (Line(points={{162,14},{
                  162,-6},{144,-6},{144,-5.4}}, color={191,0,0}));
            connect(heatPortRad, transfer.heatPortRad) annotation (Line(points={{162,-60},
                  {164,-60},{164,-38.52},{144,-38.52}}, color={191,0,0}));
            connect(control.transferControlBus, transfer.transferControlBus) annotation (
              Line(
              points={{104.2,56.25},{104.2,45.125},{106,45.125},{106,34.62}},
              color={215,215,215},
              thickness=0.5));
            connect(transfer.transferOutputs, outBusElect.transfer) annotation (Line(
                points={{106,-101.31},{106,-140},{1,-140}},
                color={175,175,175},
                thickness=0.5), Text(
                string="%second",
                index=1,
                extent={{-3,-6},{-3,-6}},
                horizontalAlignment=TextAlignment.Right));
            connect(transfer.internalElectricalPin, distribution.internalElectricalPin[1])
            annotation (Line(
              points={{124.24,36},{124,36},{124,46},{29,46},{29,36}},
              color={0,0,0},
              thickness=1));
          else
            connect(zeroTraLoad.internalElectricalPin, distribution.internalElectricalPin[1]);
          end if;
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-180,-140},
                    {160,140}}), graphics={
                Rectangle(
                  extent={{-180,140},{162,-140}},
                  lineColor={0,0,0},
                  lineThickness=0.5,
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid),
                Line(
                  points={{-36,104}},
                  color={0,0,0},
                  thickness=1,
                  arrow={Arrow.None,Arrow.Filled}),
                Line(
                  points={{-20,96},{-60,-20},{2,-20},{-16,-100},{80,14},{4,12},{30,96},
                      {-20,96}},
                  color={0,0,0},
                  thickness=1),       Text(
                  extent={{-98,-134},{106,-230}},
                  lineColor={0,0,0},
                  textString="%name%")}),                                Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false, extent={{-180,-140},{160,140}})));
        end PartialElectricalSystem;
      annotation (Icon(graphics={
              Rectangle(
                lineColor={200,200,200},
                fillColor={248,248,248},
                fillPattern=FillPattern.HorizontalCylinder,
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Rectangle(
                lineColor={128,128,128},
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Ellipse(
                extent={{-30,-30},{30,30}},
                lineColor={128,128,128},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}));
      end BaseClasses;

      package RecordsCollection "Record data for the options in this subsystem"
        extends Modelica.Icons.RecordsPackage;

        record ElectricalSystemBaseDataDefinition
          extends
            BESMod.HugosProject.Systems.RecordsCollection.SupplySystemBaseDataDefinition;
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end ElectricalSystemBaseDataDefinition;
      end RecordsCollection;

      package Tests
        extends Modelica.Icons.ExamplesPackage;

        model ElectricalSystem
          extends Modelica.Icons.Example;
          BESMod.HugosProject.Systems.Electrical.ElectricalSystem pVBatterySystemNoTransfer(
            use_elecHeating=false,
            redeclare Transfer.NoElectricalTransfer transfer,
            redeclare Distribution.BatterySystemSimple distribution(redeclare
                BuildingSystems.Technologies.ElectricalStorages.Data.LithiumIon.LithiumIonTeslaPowerwall1
                batteryParameters),
            redeclare Generation.PVSystemMultiSub generation(
              redeclare model CellTemperature =
                  AixLib.Electrical.PVSystem.BaseClasses.CellTemperatureMountingContactToGround,
              redeclare AixLib.DataBase.SolarElectric.SchuecoSPV170SME1
                pVParameters,
              lat=weaDat.lat,
              lon=weaDat.lon,
              alt=weaDat.alt,
              timZon=3600,
              ARoof=50),
            nLoadsExtSubSys=1,
            redeclare Control.NoControl control)
            annotation (Placement(transformation(extent={{-38,-34},{54,42}})));

          Modelica.Blocks.Sources.Sine LoadFromResidualBES(
            amplitude=3000,
            f=1/86400,
            offset=3000)
            annotation (Placement(transformation(extent={{-98,24},{-78,44}})));
          Utilities.Electrical.RealToElecCon realToElecCon
            annotation (Placement(transformation(extent={{-70,24},{-50,44}})));
          IBPSA.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(filNam=
                ModelicaServices.ExternalReferences.loadResource(
                "modelica://BESMod/Resources/TRY2015_522361130393_Jahr_City_Potsdam.mos"))
            annotation (Placement(transformation(extent={{-100,68},{-72,96}})));
          Utilities.Electrical.ElecConToReal elecConToReal(reverse=true)
            annotation (Placement(transformation(extent={{-30,-80},{-6,-54}})));
          Modelica.Blocks.Interfaces.RealOutput PElecFromGrid "Electrical power"
            annotation (Placement(transformation(extent={{20,-76},{40,-56}})));
        equation
          connect(LoadFromResidualBES.y, realToElecCon.PEleLoa)
            annotation (Line(points={{-77,34},{-74,34},{-74,38},{-72,38}},
                                                           color={0,0,127}));
          connect(weaDat.weaBus, pVBatterySystemNoTransfer.weaBus) annotation (Line(
              points={{-72,82},{-64,82},{-64,84},{-56,84},{-56,16.2143},{-38,16.2143}},
              color={255,204,51},
              thickness=0.5));

          connect(pVBatterySystemNoTransfer.externalElectricalPin1, elecConToReal.internalElectricalPin)
            annotation (Line(
              points={{-35.8353,-32.9143},{-35.8353,-66.74},{-29.76,-66.74}},
              color={0,0,0},
              thickness=1));
          connect(elecConToReal.PElecLoa, PElecFromGrid)
            annotation (Line(points={{-3.6,-61.8},{30,-61.8},{30,-66}},
                                                                     color={0,0,127}));
          connect(realToElecCon.internalElectricalPin, pVBatterySystemNoTransfer.internalElectricalPin[
            1]) annotation (Line(
              points={{-49.8,34.2},{-43.9,34.2},{-43.9,27.8857},{-38,27.8857}},
              color={0,0,0},
              thickness=1));
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)),
            experiment(
              StopTime=86400,
              Interval=900,
              __Dymola_Algorithm="Dassl"),
            __Dymola_experimentSetupOutput,
            __Dymola_experimentFlags(
              Advanced(
                EvaluateAlsoTop=true,
                GenerateVariableDependencies=false,
                OutputModelicaCode=false),
              Evaluate=true,
              OutputCPUtime=false,
              OutputFlatModelica=false));
        end ElectricalSystem;
      end Tests;
    end Electrical;

    package Interfaces
    extends Modelica.Icons.InterfacesPackage;

      expandable connector BuiMeaBus "data bus with user profiles"
        extends BESMod.Utilities.Icons.BuiMeaBus;
        annotation (
        defaultComponentName = "buiMeaBus",
        Icon(graphics,
             coordinateSystem(preserveAspectRatio=false)),
        Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));

      end BuiMeaBus;

      expandable connector ControlOutputs
        "Bus with ouputs of the control system"
        extends BESMod.Utilities.Icons.KPIBus;

        annotation (
        defaultComponentName = "outBusCtrl",
        Icon(graphics,
             coordinateSystem(preserveAspectRatio=false)),
        Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));

      end ControlOutputs;

      expandable connector DemandOutputs "Bus with ouputs of the demand system"
        extends BESMod.Utilities.Icons.KPIBus;

        annotation (
        defaultComponentName = "outBusDem",
        Icon(graphics,
             coordinateSystem(preserveAspectRatio=false)),
        Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));

      end DemandOutputs;

      expandable connector DHWOutputs "Bus with ouputs of the DHW system"
        extends BESMod.Utilities.Icons.KPIBus;
        annotation (
        defaultComponentName = "outBusDem",
        Icon(graphics,
             coordinateSystem(preserveAspectRatio=false)),
        Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));

      end DHWOutputs;

      expandable connector HEMSBus "Home energy management bus"
        extends BESMod.Utilities.Icons.ControlBus;
        annotation (
        defaultComponentName = "buiMeaBus",
        Icon(graphics,
             coordinateSystem(preserveAspectRatio=false)),
        Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));

      end HEMSBus;

      expandable connector HydraulicOutputs
        "Bus with ouputs of the hydraulic system"
        extends BESMod.Utilities.Icons.KPIBus;

        annotation (
        defaultComponentName = "outBusHyd",
        Icon(graphics,
             coordinateSystem(preserveAspectRatio=false)),
        Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));

      end HydraulicOutputs;

      expandable connector SystemOutputs "Bus with ouputs of the overall system"
        extends BESMod.Utilities.Icons.KPIBus;

        annotation (
        defaultComponentName = "outBusGen",
        Icon(graphics,
             coordinateSystem(preserveAspectRatio=false)),
        Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
      end SystemOutputs;

      expandable connector UseProBus "data bus with user profiles"
        extends BESMod.Utilities.Icons.UseProBus;

      annotation (
        defaultComponentName = "useProBus",
        Icon(graphics,
             coordinateSystem(preserveAspectRatio=false)),
        Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));

      end UseProBus;

      expandable connector VentilationOutputs
        "Bus with ouputs of the ventilation system"
        extends BESMod.Utilities.Icons.KPIBus;

        annotation (
        defaultComponentName = "outBusVen",
        Icon(graphics,
             coordinateSystem(preserveAspectRatio=false)),
        Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));

      end VentilationOutputs;

      expandable connector ElectricalOutputs
        "Bus with ouputs of the electrical system"
        extends BESMod.Utilities.Icons.KPIBus;

        annotation (
        defaultComponentName = "outBusHyd",
        Icon(graphics,
             coordinateSystem(preserveAspectRatio=false)),
        Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));

      end ElectricalOutputs;
    end Interfaces;

    package RecordsCollection "Record data for the options in this subsystem"
      extends Modelica.Icons.RecordsPackage;

      record SystemParametersBaseDataDefinition
        "Parameters globally used on all systems"
        extends Modelica.Icons.Record;

        // Heat demand levels
        parameter Integer nZones=1 "Number of zones to transfer heat to"  annotation(Dialog(group="Heat demand"));
        parameter Modelica.Units.SI.HeatFlowRate QBui_flow_nominal[nZones]=fill(
            9710.1, nZones)
          "Nominal heating load at outdoor air temperature of each zone"
          annotation (Dialog(group="Heat demand"));
        parameter Modelica.Units.SI.HeatFlowRate QDHW_flow_nomial "DHW heat demand"
          annotation (Dialog(group="Heat demand"));

        // Temperature Levels
        parameter Modelica.Units.SI.Temperature TOda_nominal(
          min=233.15,
          max=373.15,
          start=273.15) "Nominal outdoor air temperature"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TSetZone_nominal[nZones]=fill(293.15,
            nZones) "Nominal set temerature of zones"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.Temperature THydSup_nominal[nZones](
          each min=233.15,
          each max=373.15,
          each start=313.15)
          "Hydraulic supply temperature at nominal condition in the transfer system"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TVenSup_nominal[nZones](
          each min=233.15,
          each max=373.15,
          each start=293.15) = TSetZone_nominal
          "Ventilation supply temperature at nominal condition"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TEleSup_nominal[nZones](
          each min=233.15,
          each max=373.15,
          each start=293.15) = TSetZone_nominal
          "Electrical supply temperature at nominal condition"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.Temperature TSetDHW=323.15
          "Constant DHW demand temperature for design"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TDHWWaterCold=283.15
          "Cold water temperature (new water)"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.Temperature TAmbHyd=min(TSetZone_nominal)
          "Ambient temperature of hydraulic system"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TAmbVen=min(TSetZone_nominal)
          "Ambient temperature of ventilation system"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TAmbEle=min(TSetZone_nominal)
          "Ambient temperature of electrical system"
          annotation (Dialog(group="Temperature levels"));
        // Boundary conditions
        parameter String filNamWea
          "Name of weather data file"
          annotation (Dialog(group="Weather data"));

        // Subsystems
        parameter Boolean use_hydraulic=true "=false to disable hydraulic subsystem" annotation(Dialog(group="System layout"));
        parameter Boolean use_ventilation=true "=false to disable ventilation subsystem" annotation(Dialog(group="System layout"));
        parameter Boolean use_dhw=use_hydraulic "=false to disable DHW subsystem" annotation(Dialog(group="System layout", enable=use_hydraulic));
        parameter Boolean use_elecHeating=true "= false to disable heating using the electric system" annotation(Dialog(group="System layout", enable=use_hydraulic));
        annotation (defaultComponentName = "baseParameterAssumptions", Icon(graphics,
                                                                            coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end SystemParametersBaseDataDefinition;

      record ExampleSystemParameters
        extends Systems.RecordsCollection.SystemParametersBaseDataDefinition(
          QDHW_flow_nomial=3000,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/TRY2015_522361130393_Jahr_City_Potsdam.mos"),
          THydSup_nominal={328.15},
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=true,
          TOda_nominal=261.15);

      end ExampleSystemParameters;

      record SubsystemControlBaseDataDefinition
        "Record used to include data of each subsystem into the control of the subsystem"
        extends Modelica.Icons.Record;
        parameter Integer nParallelDem(min=1)
          "Number of parallel demand systems of this system"                                annotation (Dialog(group=
                "System Design"));
        parameter Integer nParallelSup(min=1)
          "Number of parallel supply systems of this system"                                annotation (Dialog(group=
                "System Design"));

        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal[nParallelDem]
          "Nominal heat flow rate" annotation (Dialog(group="System Design"));
        parameter Modelica.Units.SI.Temperature TOda_nominal
          "Nominal outdoor air temperature" annotation (Dialog(group="System Design"));

        parameter Modelica.Units.SI.Temperature TDem_nominal[nParallelDem]
          "Nominal demand temperature" annotation (Dialog(group="System Design"));
        parameter Modelica.Units.SI.Temperature TSup_nominal[nParallelSup]
          "Nominal supply temperature" annotation (Dialog(group="System Design"));
        parameter Modelica.Units.SI.TemperatureDifference dTTra_nominal[nParallelDem]
          "Nominal temperature difference for heat transfer"
          annotation (Dialog(group="System Design"));
        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal[nParallelDem]
          "Nominal mass flow rate" annotation (Dialog(group="System Design"));
        parameter Modelica.Units.SI.PressureDifference dp_nominal[nParallelDem]
          "Nominal pressure difference at m_flow_nominal"
          annotation (Dialog(group="System Design"));
        parameter Modelica.Units.SI.TemperatureDifference dTLoss_nominal[nParallelDem]=
           fill(0, nParallelDem) "Nominal temperature difference due to heat losses"
          annotation (Dialog(group="System Design"));
        parameter Real f_design[nParallelDem]=fill(1, nParallelDem)
          "Factor for oversizing due to heat losses"
          annotation (Dialog(group="System Design"));
        parameter Modelica.Units.SI.HeatFlowRate QLoss_flow_nominal[nParallelDem]=
            f_design .* Q_flow_nominal .- Q_flow_nominal
          "Nominal heat flow rate due to heat losses"
          annotation (Dialog(group="System Design"));
        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end SubsystemControlBaseDataDefinition;

      record SupplySystemBaseDataDefinition
        extends Modelica.Icons.Record;

        parameter Integer nZones(min=1) "Number of zones supplied by hydraulic system" annotation (Dialog(group="Building"));
        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal[nZones]
          "Nominal heat demand of each zone" annotation (Dialog(group="Building"));
        parameter Modelica.Units.SI.Temperature TOda_nominal
          "Nominal outdoor air temperature"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.Temperature TSup_nominal[nZones]
          "Nominal supply temperature" annotation (Dialog(group="Temperatur levels"));
        parameter Modelica.Units.SI.Temperature TZone_nominal[nZones]
          "Nominal supply temperature" annotation (Dialog(group="Temperatur levels"));
        parameter Modelica.Units.SI.Temperature TAmb
          "Ambient temperature of system. Used to calculate default heat loss."
          annotation (Dialog(group="Temperatur levels"));
        parameter Modelica.Units.SI.Area AZone[nZones] "Area of zones/rooms"
          annotation (Dialog(group="Building"));
        parameter Modelica.Units.SI.Height hZone[nZones] "Height of zones"
          annotation (Dialog(group="Building"));
        parameter Modelica.Units.SI.Area ABui "Ground area of building"
          annotation (Dialog(group="Building"));
        parameter Modelica.Units.SI.Height hBui "Height of building"
          annotation (Dialog(group="Building"));
        parameter Modelica.Units.SI.Area ARoo "Roof area of building"
          annotation (Dialog(group="Geometry"));

      end SupplySystemBaseDataDefinition;

      package ParameterStudy "Records to perform parameter studies"
      extends Modelica.Icons.RecordsPackage;

        record NoStudy "Don't study anything"
          extends ParameterStudyBaseDefinition;
        end NoStudy;

        partial record ParameterStudyBaseDefinition
          "Partial record for all parameters which may be changed during an analysis or optimization"
          extends Modelica.Icons.Record;
          // Important: Add annotation(Evaluate=false) to all parameter defined in here!
          annotation (Evaluate=false, defaultComponentName = "baseParameterAssumptions", Icon(graphics,
                                                                                              coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)),
            Documentation(info="<html>
<p><span style=\"font-family: Courier New; color: #006400;\">Important:&nbsp;Add&nbsp;annotation(Evaluate=false)&nbsp;to&nbsp;all&nbsp;parameter&nbsp;defined&nbsp;in&nbsp;here!</span></p>
</html>"));
        end ParameterStudyBaseDefinition;
      end ParameterStudy;

      package Movers "Record data for movers"
        extends Modelica.Icons.RecordsPackage;
        record AutomaticConfigurationData
          "Automatic configuration for BES Library"
          extends AixLib.Fluid.Movers.Data.Generic(
            final motorEfficiency(V_flow={0}, eta={0.7}),
            final hydraulicEfficiency(V_flow={0}, eta={0.7}),
            final speeds_rpm={speed_rpm_nominal},
            final constantSpeed_rpm=speed_rpm_nominal,
            final speeds=speeds_rpm/speed_rpm_nominal,
            final constantSpeed=constantSpeed_rpm/speed_rpm_nominal,
            final speed_nominal=1,
            final motorCooledByFluid=false,
            final use_powerCharacteristic=false,
            final pressure(V_flow={V_flowCurve[i] * m_flow_nominal / rho for i in 1:size(V_flowCurve, 1)},
                           dp={dpCurve[i] * dp_nominal for i in 1:size(dpCurve, 1)}));
          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
            "Nominal mass flow rate";
          parameter Modelica.Units.SI.PressureDifference dp_nominal
            "Nominal pressure difference";
          parameter Modelica.Units.SI.Density rho "Density of fluid in use";
           parameter Real V_flowCurve[:]={0,0.99,1.1,1.01}   "Relative V_flow curve to be used";
           parameter Real dpCurve[:]={1.01,1,0.99,0}      "Relative dp curve to be used";
        end AutomaticConfigurationData;

        partial record MoverBaseDataDefinition
          extends Modelica.Icons.Record;
          parameter Real V_flowCurve[:]     "Relative V_flow curve to be used";
          parameter Real dpCurve[:]      "Relative dp curve to be used";
          parameter Modelica.Units.NonSI.AngularVelocity_rpm speed_rpm_nominal
            "Nominal rotational speed for flow characteristic";
           parameter Boolean addPowerToMedium
            "Set to false to avoid any power (=heat and flow work) being added to medium (may give simpler equations)";
          parameter Boolean use_inputFilter
            "= true, if speed is filtered with a 2nd order CriticalDamping filter";
          parameter Modelica.Units.SI.Time riseTimeInpFilter
            "Rise time of the filter (time to reach 99.6 % of the speed)";
          parameter Modelica.Units.SI.Time tau
            "Time constant of fluid volume for nominal flow, used if energy or mass balance is dynamic";

          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end MoverBaseDataDefinition;

        record DefaultMover
          extends MoverBaseDataDefinition(
            tau=1,
            riseTimeInpFilter=30,
            use_inputFilter=false,
            addPowerToMedium=false,
            speed_rpm_nominal=1500,
            dpCurve={1.01,1,0.99,0},
            V_flowCurve={0,0.99,1,1.01});
        end DefaultMover;
      end Movers;

      package TemperatureSensors
        extends Modelica.Icons.RecordsPackage;
        partial record TemperatureSensorBaseDefinition
          extends Modelica.Icons.Record;

          parameter Modelica.Units.SI.Time tau
            "Time constant at nominal flow rate (use tau=0 for steady-state sensor, but see user guide for potential problems)";
          parameter Modelica.Blocks.Types.Init initType
            "Type of initialization (InitialState and InitialOutput are identical)";
          parameter Boolean transferHeat
            "if true, temperature T converges towards TAmb when no flow";

          parameter Modelica.Units.SI.Time tauHeaTra
            "Time constant for heat transfer, default 20 minutes";
          parameter Modelica.Units.SI.Temperature TAmb
            "Fixed ambient temperature for heat transfer";

        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
        end TemperatureSensorBaseDefinition;

        record DefaultSensor
          extends TemperatureSensorBaseDefinition(
            TAmb=293.15,
            tauHeaTra=1200,
            transferHeat=false,
            initType=Modelica.Blocks.Types.Init.InitialState,
            tau=1);
        end DefaultSensor;
      end TemperatureSensors;

      package Valves
        extends Modelica.Icons.RecordsPackage;
        partial record ThreeWayValve
          extends Modelica.Icons.Record;

          parameter Modelica.Units.SI.MassFlowRate m_flow_nominal
            "Nominal mass flow rate";

          parameter Modelica.Units.SI.PressureDifference dp_nominal[2](displayUnit="Pa")
            "Nominal pressure drop of connected resistances without the valve";

          parameter Modelica.Units.SI.PressureDifference dpValve_nominal=max(dp_nominal)
              /(1 - valveAutho)
            "Nominal pressure drop of fully open valve, used if CvData=IBPSA.Fluid.Types.CvTypes.OpPoint";
          parameter Modelica.Units.SI.PressureDifference dpFixed_nominal[2]=max(
              dp_nominal) .- (dp_nominal)
            "Nominal pressure drop of pipes and other equipment in flow legs at port_1 and port_3";
          parameter Real deltaM
            "Fraction of nominal flow rate where linearization starts, if y=1";
          parameter Real delta0
            "Range of significant deviation from equal percentage law";
          parameter Real R "Rangeability, R=50...100 typically";
          parameter Real l[2] "Valve leakage, l=Kv(y=0)/Kv(y=1)";
          parameter Real fraK
            "Fraction Kv(port_3&rarr;port_2)/Kv(port_1&rarr;port_2)";
          parameter Real valveAutho(unit="1")                   "Assumed valve authority (typical value: 0.5)";

          parameter Modelica.Units.SI.Time tau
            "Time constant at nominal flow for dynamic energy and momentum balance";
          parameter Boolean use_inputFilter
            "= true, if opening is filtered with a 2nd order CriticalDamping filter";
          parameter Modelica.Units.SI.Time riseTime
            "Rise time of the filter (time to reach 99.6 % of an opening step)";
          parameter Integer order=2 "Order of filter";
          parameter Modelica.Blocks.Types.Init init
            "Type of initialization (no init/steady state/initial state/initial output)";
          parameter Real y_start "Initial value of output";

          parameter Boolean from_dp
            "= true, use m_flow = f(dp) else dp = f(m_flow)";
          annotation (Icon(graphics,
                           coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
                coordinateSystem(preserveAspectRatio=false)));
        end ThreeWayValve;

        record DefaultThreeWayValve
          extends ThreeWayValve(
            dpFixed_nominal(displayUnit="Pa"),
            dpValve_nominal(displayUnit="Pa"),
            from_dp=true,
            y_start=1,
            valveAutho=0.5,
            init=Modelica.Blocks.Types.Init.InitialOutput,
            order=2,
            riseTime=120,
            use_inputFilter=false,
            tau=10,
            fraK=1,
            l={0.0001,0.0001},
            R=50,
            delta0=0.01,
            deltaM=0.02);
        end DefaultThreeWayValve;
      end Valves;

      record SystemParametersBaseDataDefinition_nightLowering
        "Parameters globally used on all systems with night lowering"
        extends Modelica.Icons.Record;

        // Heat demand levels
        parameter Integer nZones=1 "Number of zones to transfer heat to"  annotation(Dialog(group="Heat demand"));
        parameter Modelica.Units.SI.HeatFlowRate QBui_flow_nominal[nZones]=fill(
            9710.1, nZones)
          "Nominal heating load at outdoor air temperature of each zone"
          annotation (Dialog(group="Heat demand"));
        parameter Modelica.Units.SI.HeatFlowRate QDHW_flow_nomial "DHW heat demand"
          annotation (Dialog(group="Heat demand"));

        // Temperature Levels
        parameter Modelica.Units.SI.Temperature TOda_nominal(
          min=233.15,
          max=373.15,
          start=273.15) "Nominal outdoor air temperature"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.TemperatureDifference dT_night[nZones]=fill(2,nZones)
        "Nominal night lowering if the set temperature"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TSetZone_nominal[nZones]=fill(293.15,
            nZones) "Nominal set temerature of zones"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.NonSI.Time_hour hMorning[nZones]=fill(7,nZones)
        "time of the day from which Tset=TSetZone_nominal"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.Temperature THydSup_nominal[nZones](
          each min=233.15,
          each max=373.15,
          each start=313.15)
          "Hydraulic supply temperature at nominal condition in the transfer system"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TVenSup_nominal[nZones](
          each min=233.15,
          each max=373.15,
          each start=293.15) = TSetZone_nominal
          "Ventilation supply temperature at nominal condition"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TEleSup_nominal[nZones](
          each min=233.15,
          each max=373.15,
          each start=293.15) = TSetZone_nominal
          "Electrical supply temperature at nominal condition"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.Temperature TSetDHW=323.15
          "Constant DHW demand temperature for design"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TDHWWaterCold=283.15
          "Cold water temperature (new water)"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.Temperature TAmbHyd=min(TSetZone_nominal)
          "Ambient temperature of hydraulic system"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TAmbVen=min(TSetZone_nominal)
          "Ambient temperature of ventilation system"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TAmbEle=min(TSetZone_nominal)
          "Ambient temperature of electrical system"
          annotation (Dialog(group="Temperature levels"));
        // Boundary conditions
        parameter String filNamWea
          "Name of weather data file"
          annotation (Dialog(group="Weather data"));

        // Subsystems
        parameter Boolean use_hydraulic=true "=false to disable hydraulic subsystem" annotation(Dialog(group="System layout"));
        parameter Boolean use_ventilation=true "=false to disable ventilation subsystem" annotation(Dialog(group="System layout"));
        parameter Boolean use_dhw=use_hydraulic "=false to disable DHW subsystem" annotation(Dialog(group="System layout", enable=use_hydraulic));
        parameter Boolean use_elecHeating=true "= false to disable heating using the electric system" annotation(Dialog(group="System layout", enable=use_hydraulic));
        annotation (defaultComponentName = "baseParameterAssumptions", Icon(graphics,
                                                                            coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end SystemParametersBaseDataDefinition_nightLowering;

      record SystemParametersBaseDataDefinition_nightLowering_ramp
        "Parameters globally used on all systems with night lowering"
        extends Modelica.Icons.Record;

        // Heat demand levels
        parameter Integer nZones=1 "Number of zones to transfer heat to"  annotation(Dialog(group="Heat demand"));
        parameter Modelica.Units.SI.HeatFlowRate QBui_flow_nominal[nZones]=fill(
            9710.1, nZones)
          "Nominal heating load at outdoor air temperature of each zone"
          annotation (Dialog(group="Heat demand"));
        parameter Modelica.Units.SI.HeatFlowRate QDHW_flow_nomial "DHW heat demand"
          annotation (Dialog(group="Heat demand"));

        // Temperature Levels
        parameter Modelica.Units.SI.Temperature TOda_nominal(
          min=233.15,
          max=373.15,
          start=273.15) "Nominal outdoor air temperature"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.TemperatureDifference dT_night[nZones]=fill(2,nZones)
        "Nominal night lowering if the set temperature"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TSetZone_nominal[nZones]=fill(293.15,
            nZones) "Nominal set temerature of zones"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.NonSI.Time_hour hMorning[nZones]=fill(7,nZones)
        "time of the day from which Tset=TSetZone_nominal"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.NonSI.Time_hour timeRamp[nZones]=fill(1,nZones)
        "duration of the ramp"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.Temperature THydSup_nominal[nZones](
          each min=233.15,
          each max=373.15,
          each start=313.15)
          "Hydraulic supply temperature at nominal condition in the transfer system"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TVenSup_nominal[nZones](
          each min=233.15,
          each max=373.15,
          each start=293.15) = TSetZone_nominal
          "Ventilation supply temperature at nominal condition"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TEleSup_nominal[nZones](
          each min=233.15,
          each max=373.15,
          each start=293.15) = TSetZone_nominal
          "Electrical supply temperature at nominal condition"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.Temperature TSetDHW=323.15
          "Constant DHW demand temperature for design"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TDHWWaterCold=283.15
          "Cold water temperature (new water)"
          annotation (Dialog(group="Temperature levels"));

        parameter Modelica.Units.SI.Temperature TAmbHyd=min(TSetZone_nominal)
          "Ambient temperature of hydraulic system"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TAmbVen=min(TSetZone_nominal)
          "Ambient temperature of ventilation system"
          annotation (Dialog(group="Temperature levels"));
        parameter Modelica.Units.SI.Temperature TAmbEle=min(TSetZone_nominal)
          "Ambient temperature of electrical system"
          annotation (Dialog(group="Temperature levels"));
        // Boundary conditions
        parameter String filNamWea
          "Name of weather data file"
          annotation (Dialog(group="Weather data"));

        // Subsystems
        parameter Boolean use_hydraulic=true "=false to disable hydraulic subsystem" annotation(Dialog(group="System layout"));
        parameter Boolean use_ventilation=true "=false to disable ventilation subsystem" annotation(Dialog(group="System layout"));
        parameter Boolean use_dhw=use_hydraulic "=false to disable DHW subsystem" annotation(Dialog(group="System layout", enable=use_hydraulic));
        parameter Boolean use_elecHeating=true "= false to disable heating using the electric system" annotation(Dialog(group="System layout", enable=use_hydraulic));
        annotation (defaultComponentName = "baseParameterAssumptions", Icon(graphics,
                                                                            coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end SystemParametersBaseDataDefinition_nightLowering_ramp;
    end RecordsCollection;

    package BaseClasses "Package for partial models used for HPS"
        extends Modelica.Icons.BasesPackage;

      partial model PartialBESExample "Partial example model"
        extends Modelica.Icons.Example;

        BESMod.HugosProject.Systems.RecordsCollection.ExampleSystemParameters systemParameters
          "Parameters relevant for the whole energy system"
          annotation (Placement(transformation(extent={{76,-96},{96,-76}})));
        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)),experiment(StopTime=86400, __Dymola_Algorithm="Dassl"));
      end PartialBESExample;

      partial model PartialBuildingEnergySystem "Partial BES"

        extends Modelica.Icons.Example;
        // Replaceable packages
        replaceable package MediumHyd = IBPSA.Media.Water constrainedby
          Modelica.Media.Interfaces.PartialMedium annotation (
            __Dymola_choicesAllMatching=true);
        replaceable package MediumZone = IBPSA.Media.Air constrainedby
          Modelica.Media.Interfaces.PartialMedium annotation (choices(
              choice(redeclare package Medium = IBPSA.Media.Air "Moist air"),
              choice(redeclare package Medium = IBPSA.Media.Water "Water"),
              choice(redeclare package Medium =
                  IBPSA.Media.Antifreeze.PropyleneGlycolWater (
                    property_T=293.15,
                    X_a=0.40)
                    "Propylene glycol water, 40% mass fraction")));
        replaceable package MediumDHW = IBPSA.Media.Water constrainedby
          Modelica.Media.Interfaces.PartialMedium
          annotation (__Dymola_choicesAllMatching=true);
        // Parameters
        replaceable parameter
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition
          systemParameters constrainedby
          RecordsCollection.SystemParametersBaseDataDefinition(QDHW_flow_nomial=
             userProfiles.mDHW_flow_nominal*(systemParameters.TSetDHW -
              systemParameters.TDHWWaterCold)*4184)
          "Parameters relevant for the whole energy system" annotation (
            choicesAllMatching=true, Placement(transformation(extent={{-280,-24},
                  {-228,40}})));
        replaceable parameter RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition
          parameterStudy "Parameters changed in the study / analysis" annotation (
            choicesAllMatching=true, Placement(transformation(extent={{-280,-108},{-228,
                  -42}})));

        // Subsystems
        replaceable
          BESMod.HugosProject.Systems.Demand.Building.BaseClasses.PartialDemand
          building constrainedby
          BESMod.HugosProject.Systems.Demand.Building.BaseClasses.PartialDemand(
          redeclare final package MediumZone = MediumZone,
          final nZones=systemParameters.nZones,
          final TSetZone_nominal=systemParameters.TSetZone_nominal,
          final use_hydraulic=systemParameters.use_hydraulic,
          final use_ventilation=systemParameters.use_ventilation) annotation (
            choicesAllMatching=true, Placement(transformation(extent={{-10,0},{
                  74,86}})));
        replaceable
          BESMod.HugosProject.Systems.UserProfiles.BaseClasses.PartialUserProfiles
          userProfiles constrainedby
          UserProfiles.BaseClasses.PartialUserProfiles(
          final nZones=systemParameters.nZones,
          final TSetZone_nominal=systemParameters.TSetZone_nominal,
          final TSetDHW=systemParameters.TSetDHW,
          final TDHWWaterCold=systemParameters.TDHWWaterCold)
          "Replacable model to specify your user profiles" annotation (
            choicesAllMatching=true, Placement(transformation(extent={{-280,128},
                  {-226,178}})));
        replaceable
          BESMod.HugosProject.Systems.Demand.DHW.BaseClasses.PartialDHW DHW
          if systemParameters.use_hydraulic constrainedby
          Demand.DHW.BaseClasses.PartialDHW(
          redeclare final package Medium = MediumDHW,
          final parameters(
            final mDHW_flow_nominal=userProfiles.mDHW_flow_nominal,
            final QDHW_flow_nominal=systemParameters.QDHW_flow_nomial,
            final TDHW_nominal=systemParameters.TSetDHW,
            final TDHWCold_nominal=systemParameters.TDHWWaterCold,
            final VDHWDay=userProfiles.VolDHWDay),
          final subsystemDisabled=not systemParameters.use_dhw) annotation (
            choicesAllMatching=true, Placement(transformation(extent={{-8,-108},
                  {74,-32}})));
        replaceable Electrical.BaseClasses.PartialElectricalSystem electrical
          constrainedby Electrical.BaseClasses.PartialElectricalSystem(
          final nLoadsExtSubSys=4,
          final use_elecHeating=systemParameters.use_elecHeating,
          redeclare final
            BESMod.HugosProject.Systems.Electrical.RecordsCollection.ElectricalSystemBaseDataDefinition
            electricalSystemParameters(
            final nZones=systemParameters.nZones,
            final Q_flow_nominal=systemParameters.QBui_flow_nominal,
            final TOda_nominal=systemParameters.TOda_nominal,
            final TSup_nominal=systemParameters.TEleSup_nominal,
            final TZone_nominal=systemParameters.TSetZone_nominal,
            final TAmb=systemParameters.TAmbEle,
            final AZone=building.AZone,
            final hZone=building.hZone,
            final ABui=building.ABui,
            final ARoo=building.ARoo,
            final hBui=building.hBui))                                 annotation (Placement(
              transformation(extent={{-192,40},{-40,128}})), choicesAllMatching=true);
        replaceable
          BESMod.HugosProject.Systems.Hydraulical.BaseClasses.PartialHydraulicSystem
          hydraulic if systemParameters.use_hydraulic constrainedby
          Hydraulical.BaseClasses.PartialHydraulicSystem(
          redeclare package Medium = MediumHyd,
          final subsystemDisabled=not systemParameters.use_hydraulic,
          redeclare final package MediumDHW = MediumDHW,
          redeclare final
            BESMod.HugosProject.Systems.Hydraulical.RecordsCollection.HydraulicSystemBaseDataDefinition
            hydraulicSystemParameters(
            final nZones=systemParameters.nZones,
            final Q_flow_nominal=systemParameters.QBui_flow_nominal,
            final TOda_nominal=systemParameters.TOda_nominal,
            final TSup_nominal=systemParameters.THydSup_nominal,
            final TZone_nominal=systemParameters.TSetZone_nominal,
            final TAmb=systemParameters.TAmbHyd,
            final AZone=building.AZone,
            final hZone=building.hZone,
            final ABui=building.ABui,
            final ARoo=building.ARoo,
            final hBui=building.hBui,
            final dhwParas=DHW.parameters)) annotation (choicesAllMatching=true,
            Placement(transformation(extent={{-192,-90},{-40,0}})));
        replaceable
          BESMod.HugosProject.Systems.Ventilation.BaseClasses.PartialVentilationSystem
          ventilation if systemParameters.use_ventilation constrainedby
          Ventilation.BaseClasses.PartialVentilationSystem(
          redeclare final package Medium = MediumZone,
          final subsystemDisabled=not systemParameters.use_ventilation,
          redeclare
            BESMod.HugosProject.Systems.RecordsCollection.SupplySystemBaseDataDefinition
            ventilationSystemParameters(
            final nZones=systemParameters.nZones,
            final Q_flow_nominal=systemParameters.QBui_flow_nominal,
            final TOda_nominal=systemParameters.TOda_nominal,
            final TSup_nominal=systemParameters.TVenSup_nominal,
            final TZone_nominal=systemParameters.TSetZone_nominal,
            final TAmb=systemParameters.TAmbVen,
            final AZone=building.AZone,
            final hZone=building.hZone,
            final ABui=building.ABui,
            final ARoo=building.ARoo,
            final hBui=building.hBui)) annotation (choicesAllMatching=true,
            Placement(transformation(extent={{120,-4},{212,86}})));

        // Outputs
        BESMod.HugosProject.Systems.Interfaces.SystemOutputs outputs
          annotation (Placement(transformation(extent={{252,-30},{318,30}})));
        IBPSA.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(final filNam=
              systemParameters.filNamWea)
          "Weather data reader"
          annotation (Placement(transformation(extent={{-282,52},{-224,118}})));

        replaceable Control.BaseClasses.PartialControl control constrainedby
          Control.BaseClasses.PartialControl annotation (Placement(transformation(
                extent={{-8,116},{76,182}})), choicesAllMatching=true);

        Electrical.Interfaces.ExternalElectricalPin electricalGrid annotation (
            Placement(transformation(extent={{270,40},{300,76}}), iconTransformation(
                extent={{270,40},{300,76}})));
      protected
        BESMod.Utilities.Electrical.ZeroLoad hydraulicZeroElecLoad if not systemParameters.use_hydraulic "Internal helper";
        BESMod.Utilities.Electrical.ZeroLoad ventilationZeroElecLoad if not systemParameters.use_ventilation "Internal helper";
        BESMod.Utilities.Electrical.ZeroLoad dhwZeroElecLoad if not systemParameters.use_dhw "Internal helper";

      equation
        connect(building.weaBus, weaDat.weaBus) annotation (Line(
            points={{7.64,86.86},{6,86.86},{6,100},{-22,100},{-22,138},{-204,138},{
                -204,84},{-216,84},{-216,85},{-224,85}},
            color={255,204,51},
            thickness=0.5));
        connect(building.outBusDem, outputs.building) annotation (Line(
            points={{73.16,42.14},{94,42.14},{94,-24},{246,-24},{246,0},{285,0}},
            color={175,175,175},
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(userProfiles.useProBus,building. useProBus) annotation (Line(
            points={{-227.125,152.792},{-204,152.792},{-204,138},{-22,138},{-22,100},
                {55.1,100},{55.1,86}},
            color={0,127,0},
            thickness=0.5));

        if systemParameters.use_hydraulic then
          connect(building.buiMeaBus, hydraulic.buiMeaBus) annotation (Line(
            points={{32,85.57},{32,100},{-28,100},{-28,16},{-83.6,16},{-83.6,
                -0.321429}},
            color={255,128,0},
            thickness=0.5));
          connect(weaDat.weaBus, hydraulic.weaBus) annotation (Line(
              points={{-224,85},{-224,84},{-204,84},{-204,-46},{-198,-46},{-198,-45},
                  {-191.2,-45}},
              color={255,204,51},
              thickness=0.5));
          connect(hydraulic.outBusHyd, outputs.hydraulic) annotation (Line(
              points={{-120.4,-90.6429},{-120.4,-90},{-120,-90},{-120,-124},{246,-124},
                  {246,0},{285,0}},
              color={175,175,175},
              thickness=0.5), Text(
              string="%second",
              index=1,
              extent={{-3,-6},{-3,-6}},
              horizontalAlignment=TextAlignment.Right));
          connect(hydraulic.heatPortRad,building.heatPortRad) annotation (Line(
                points={{-40,-45},{-18,-45},{-18,17.2},{-10,17.2}},        color={191,
                  0,0}));
          connect(hydraulic.heatPortCon,building.heatPortCon) annotation (Line(
                points={{-40,-19.9286},{-40,-14},{-22,-14},{-22,68.8},{-10,68.8}},
                                                                                color=
                 {191,0,0}));
          connect(userProfiles.useProBus, hydraulic.useProBus) annotation (Line(
            points={{-227.125,152.792},{-204,152.792},{-204,16},{-152.4,16},{-152.4,
                  7.10543e-15}},
            color={0,127,0},
            thickness=0.5));
          connect(control.sigBusHyd, hydraulic.sigBusHyd) annotation (Line(
            points={{0.82,115.67},{0.82,100},{-28,100},{-28,16},{-106,16},{-106,
                7.10543e-15}},
            color={215,215,215},
            thickness=0.5));
          if systemParameters.use_dhw then
            connect(DHW.outBusDHW, outputs.DHW) annotation (Line(
            points={{74,-70},{246,-70},{246,0},{285,0}},
            color={175,175,175},
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
            connect(userProfiles.useProBus, DHW.useProBus) annotation (Line(
            points={{-227.125,152.792},{-204,152.792},{-204,16},{-28,16},{-28,-24},{
                    55.55,-24},{55.55,-32}},
            color={0,127,0},
            thickness=0.5));
            connect(hydraulic.portDHW_out, DHW.port_a) annotation (Line(points={{-40.8,
                    -66.2143},{-18,-66.2143},{-18,-47.2},{-8,-47.2}},
                                                                    color={0,127,255}));
            connect(hydraulic.portDHW_in, DHW.port_b) annotation (Line(points={{-40.8,
                    -79.0714},{-40.8,-74},{-18,-74},{-18,-92.8},{-8,-92.8}},
                                                                    color={0,127,255}));
            connect(DHW.internalElectricalPin, electrical.internalElectricalPin[3])
        annotation (Line(
          points={{61.7,-107.24},{61.7,-124},{-204,-124},{-204,111.657},{-192,111.657}},
          color={0,0,0},
          thickness=1));
          else
            connect(hydraulicZeroElecLoad.internalElectricalPin, electrical.internalElectricalPin[1]);
          end if;
          connect(electrical.internalElectricalPin[1], hydraulic.internalElectricalPin)
        annotation (Line(
          points={{-192,111.657},{-204,111.657},{-204,-124},{-52,-124},{-52,-90}},
          color={0,0,0},
          thickness=1));
        else
          connect(dhwZeroElecLoad.internalElectricalPin, electrical.internalElectricalPin[3]);
          connect(hydraulicZeroElecLoad.internalElectricalPin, electrical.internalElectricalPin[1]);
        end if;

        if systemParameters.use_ventilation then
          connect(building.portVent_in, ventilation.portVent_in) annotation (Line(
              points={{74,59.34},{74,58},{106,58},{106,59},{120,59}},color={0,127,255}));
          connect(building.portVent_out, ventilation.portVent_out) annotation (Line(
              points={{74,25.8},{74,24},{106,24},{106,23.9},{120,23.9}},
                                                                color={0,127,255}));
          connect(ventilation.outBusVen, outputs.ventilation) annotation (Line(
            points={{166,-4},{166,-24},{246,-24},{246,0},{285,0}},
            color={175,175,175},
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{-6,3},{-6,3}},
            horizontalAlignment=TextAlignment.Right));
          connect(weaDat.weaBus, ventilation.weaBus) annotation (Line(
            points={{-224,85},{-224,86},{-204,86},{-204,138},{-22,138},{-22,100},{220,
                  100},{220,41},{212,41}},
            color={255,204,51},
            thickness=0.5));
          connect(userProfiles.useProBus, ventilation.useProBus) annotation (Line(
            points={{-227.125,152.792},{-204,152.792},{-204,138},{-22,138},{-22,100},
                  {136.56,100},{136.56,86.45}},
            color={0,127,0},
            thickness=0.5));
          connect(building.buiMeaBus, ventilation.buiMeaBus) annotation (Line(
            points={{32,85.57},{32,100},{189.46,100},{189.46,86.45}},
            color={255,128,0},
            thickness=0.5));
          connect(control.sigBusVen, ventilation.sigBusVen) annotation (Line(
            points={{67.6,116},{67.6,100},{166,100},{166,86}},
            color={215,215,215},
            thickness=0.5));
          connect(ventilation.internalElectricalPin, electrical.internalElectricalPin[2])
        annotation (Line(
          points={{198.2,-3.1},{198.2,-24},{246,-24},{246,-124},{-204,-124},{-204,
                  111.657},{-192,111.657}},
          color={0,0,0},
          thickness=1));
        else
          connect(ventilationZeroElecLoad.internalElectricalPin, electrical.internalElectricalPin[2]);
        end if;

        connect(building.internalElectricalPin, electrical.internalElectricalPin[4])
          annotation (Line(
            points={{61.4,1.72},{61.4,-24},{246,-24},{246,-124},{-204,-124},{-204,
                111.657},{-192,111.657}},
            color={0,0,0},
            thickness=1));
        if  systemParameters.use_elecHeating then
          connect(electrical.heatPortCon, building.heatPortCon) annotation (Line(points={{
                  -39.1059,88.4},{-22,88.4},{-22,68.8},{-10,68.8}},color={191,0,0}));
          connect(electrical.heatPortRad, building.heatPortRad) annotation (Line(points={{
                  -39.1059,65.1429},{-18,65.1429},{-18,18},{-14,18},{-14,17.2},{-10,
                  17.2}},
              color={191,0,0}));
        end if;
        connect(control.outBusCtrl, outputs.control) annotation (Line(
            points={{76.42,149},{94,149},{94,-24},{246,-24},{246,0},{285,0}},
            color={175,175,175},
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(userProfiles.useProBus, electrical.useProBus) annotation (Line(
            points={{-227.125,152.792},{-204,152.792},{-204,138},{-154.894,138},{
                -154.894,127.371}},
            color={0,127,0},
            thickness=0.5));
        connect(electrical.buiMeaBus, building.buiMeaBus) annotation (Line(
            points={{-80.2353,128},{-82,128},{-82,138},{-22,138},{-22,100},{32,100},{
                32,85.57}},
            color={255,128,0},
            thickness=0.5));
        connect(electrical.outBusElect, outputs.electrical) annotation (Line(
            points={{-111.082,40},{-112,40},{-112,16},{-28,16},{-28,-24},{246,-24},{
                246,0},{285,0}},
            color={175,175,175},
            thickness=0.5), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(electrical.weaBus, weaDat.weaBus) annotation (Line(
            points={{-192,98.1429},{-198,98.1429},{-198,98},{-204,98},{-204,85},{-224,
                85}},
            color={255,204,51},
            thickness=0.5));
        connect(control.sigBusEle, electrical.systemControlBus) annotation (Line(
            points={{-8,149},{-8,150},{-22,150},{-22,138},{-114,138},{-114,128.314},{
                -112.871,128.314}},
            color={215,215,215},
            thickness=0.5));

        connect(electricalGrid, electrical.externalElectricalPin1) annotation (Line(
            points={{285,58},{246,58},{246,-124},{-204,-124},{-204,34},{-188.424,34},
                {-188.424,41.2571}},
            color={0,0,0},
            thickness=1));
        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false, extent={{-280,-120},
                  {280,180}})), Diagram(graphics,
                                        coordinateSystem(preserveAspectRatio=false,
                extent={{-280,-120},{280,180}})));
      end PartialBuildingEnergySystem;

      model PartialFluidSubsystem
        "Model for a partial subsystem based on the IBPSA fluid core"
        extends IBPSA.Fluid.Interfaces.LumpedVolumeDeclarations;

        parameter Boolean allowFlowReversal=true
          "= false to simplify equations, assuming, but not enforcing, no flow reversal"
          annotation (Dialog(tab="Assumptions"));
        parameter Boolean show_T=false
          "= true, if actual temperature at port is computed"
          annotation (Dialog(tab="Advanced", group="Diagnostics"));
        parameter Modelica.Units.SI.Density rho=Medium.density(sta_nominal)
          "Density of medium / fluid in heat distribution system"
          annotation (Dialog(tab="Assumptions", group="General"));
        parameter Modelica.Units.SI.SpecificHeatCapacity cp=
            Medium.specificHeatCapacityCp(sta_nominal)
          "Specific heat capacaity of medium / fluid in heat distribution system"
          annotation (Dialog(tab="Assumptions", group="General"));

      protected
        parameter Medium.ThermodynamicState sta_nominal=Medium.setState_pTX(
            T=Medium.T_default, p=Medium.p_default, X=Medium.X_default) "Nominal / default state of medium";
        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end PartialFluidSubsystem;

      model PartialSubsystemParameters "Model for a partial subsystem"

        parameter Integer nParallelDem(min=1)
          "Number of parallel demand systems of this system"                                annotation (Dialog(group=
                "Design - Bottom Up: Parameters are defined by the subsystem"));
        parameter Integer nParallelSup(min=1)
          "Number of parallel supply systems of this system"                                annotation (Dialog(group=
                "Design - Bottom Up: Parameters are defined by the subsystem"));
        parameter Modelica.Units.SI.Temperature TSup_nominal[nParallelSup]
          "Nominal supply temperature" annotation (Dialog(group=
                "Design - Bottom Up: Parameters are defined by the subsystem"));
        parameter Modelica.Units.SI.TemperatureDifference dTTra_nominal[nParallelDem]
          "Nominal temperature difference for heat transfer" annotation (Dialog(group=
               "Design - Bottom Up: Parameters are defined by the subsystem"));
        parameter Modelica.Units.SI.MassFlowRate m_flow_nominal[nParallelDem](each
            min=Modelica.Constants.eps) "Nominal mass flow rate" annotation (Dialog(
              group="Design - Bottom Up: Parameters are defined by the subsystem"));
        parameter Modelica.Units.SI.PressureDifference dp_nominal[nParallelDem]
          "Nominal pressure difference at m_flow_nominal" annotation (Dialog(group=
                "Design - Bottom Up: Parameters are defined by the subsystem"));
        parameter Modelica.Units.SI.TemperatureDifference dTLoss_nominal[nParallelDem]=
           fill(0, nParallelDem) "Nominal temperature difference due to heat losses"
          annotation (Dialog(group=
                "Design - Bottom Up: Parameters are defined by the subsystem"));
        parameter Real f_design[nParallelDem]=fill(1, nParallelDem)
          "Factor for oversizing due to heat losses"
          annotation (Dialog(group="Design - Bottom Up: Parameters are defined by the subsystem"));
        parameter Modelica.Units.SI.HeatFlowRate QLoss_flow_nominal[nParallelDem]=
            f_design .* Q_flow_nominal .- Q_flow_nominal
          "Nominal heat flow rate due to heat losses" annotation (Dialog(group=
                "Design - Bottom Up: Parameters are defined by the subsystem"));

        parameter Modelica.Units.SI.HeatFlowRate Q_flow_nominal[nParallelDem]
          "Nominal heat flow rate" annotation (Dialog(group=
                "Design - Top Down: Parameters are given by the parent system"));
        parameter Modelica.Units.SI.Temperature TOda_nominal
          "Nominal outdoor air temperature" annotation (Dialog(group=
                "Design - Top Down: Parameters are given by the parent system"));
        parameter Modelica.Units.SI.Temperature TDem_nominal[nParallelDem]
          "Nominal demand temperature" annotation (Dialog(group=
                "Design - Top Down: Parameters are given by the parent system"));
        parameter Modelica.Units.SI.Temperature TAmb
          "Ambient temperature of system. Used to calculate default heat loss."
          annotation (Dialog(group=
                "Design - Top Down: Parameters are given by the parent system"));

        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end PartialSubsystemParameters;

      model PartialFluidSubsystemWithParameters
        extends PartialFluidSubsystem;
        extends PartialSubsystemParameters;
      end PartialFluidSubsystemWithParameters;
    end BaseClasses;
    annotation (Icon(graphics={
          Rectangle(
            lineColor={128,128,128},
            extent={{-100.0,-100.0},{100.0,100.0}},
            radius=25.0),
        Rectangle(extent={{-80,66},{-18,-42}}, lineColor={0,0,0}),
        Rectangle(extent={{24,66},{88,8}}, lineColor={0,0,0}),
        Rectangle(extent={{24,-24},{88,-82}}, lineColor={0,0,0}),
        Line(points={{-20,50},{24,50}}, color={0,0,0}),
        Line(points={{-20,24},{24,24}}, color={0,0,0}),
        Line(points={{74,-24},{74,8}}, color={0,0,0}),
        Line(points={{38,-24},{38,8}}, color={0,0,0})}));
  end Systems;

  package Utilities "Useful models for this library"
  extends Modelica.Icons.UtilitiesPackage;
    package KPIs "Package with models for KPI calculation"

      model CountOnTime
        Modelica.Blocks.Sources.IntegerConstant integerConstant(final k=1)
          annotation (Placement(transformation(extent={{-48,26},{-32,42}})));
        Modelica.Blocks.MathInteger.TriggeredAdd triggeredAdd(final use_reset=false,
            final y_start=0)
          "To count on-off cycles"
          annotation (Placement(transformation(extent={{-16,24},{0,42}})));
        Modelica.Blocks.Interfaces.BooleanInput u
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.IntegerOutput numSwi "Integer output signal"
          annotation (Placement(transformation(extent={{100,70},{120,90}})));
        Modelica.Blocks.Logical.Switch switch1
          annotation (Placement(transformation(extent={{40,-60},{60,-40}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{6,-36},{26,-16}})));
        Modelica.Blocks.Sources.Constant const1(k=0)
          annotation (Placement(transformation(extent={{6,-78},{26,-58}})));
        Modelica.Blocks.Interfaces.RealOutput onTime
          "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-60},{120,-40}})));
        Modelica.Blocks.Continuous.Integrator integrator3
          annotation (Placement(transformation(extent={{76,-56},{88,-44}})));
      equation
        connect(integerConstant.y, triggeredAdd.u) annotation (Line(points={{-31.2,34},
                {-23.6,34},{-23.6,33},{-19.2,33}}, color={255,127,0}));
        connect(triggeredAdd.trigger, u) annotation (Line(points={{-12.8,22.2},{-12.8,
                0},{-120,0}}, color={255,0,255}));
        connect(triggeredAdd.y, numSwi) annotation (Line(points={{1.6,33},{39.8,33},{39.8,
                80},{110,80}}, color={255,127,0}));
        connect(u, switch1.u2) annotation (Line(points={{-120,0},{-14,0},{-14,-50},{38,
                -50}}, color={255,0,255}));
        connect(switch1.u1, const.y) annotation (Line(points={{38,-42},{32,-42},{32,-26},
                {27,-26}}, color={0,0,127}));
        connect(const1.y, switch1.u3) annotation (Line(points={{27,-68},{34,-68},{34,-58},
                {38,-58}}, color={0,0,127}));
        connect(switch1.y, integrator3.u)
          annotation (Line(points={{61,-50},{74.8,-50}}, color={0,0,127}));
        connect(onTime, integrator3.y)
          annotation (Line(points={{110,-50},{88.6,-50}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid), Text(
                extent={{-62,52},{66,-68}},
                lineColor={0,0,0},
                textString="%name")}), Diagram(graphics,
                                               coordinateSystem(preserveAspectRatio=false)),
          Documentation(info="<html>
</html>"));
      end CountOnTime;

      model CountTimeDiscomfort
        Modelica.Blocks.Logical.Switch switch1
          annotation (Placement(transformation(extent={{40,-10},{60,10}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{6,14},{26,34}})));
        Modelica.Blocks.Sources.Constant const1(k=0)
          annotation (Placement(transformation(extent={{6,-28},{26,-8}})));
        Modelica.Blocks.Interfaces.RealOutput discomfortTime
          "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Continuous.Integrator integrator3(use_reset=true)
          annotation (Placement(transformation(extent={{76,-6},{88,6}})));
        Modelica.Blocks.Interfaces.RealInput T "Connector of Real input signal"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Logical.LessThreshold
                                       switch2(threshold=TRoomSet)
          annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));
        parameter Modelica.Media.Interfaces.Types.Temperature TRoomSet=293.15
          "Room set temperature";
        Modelica.Blocks.Logical.Not not1
          annotation (Placement(transformation(extent={{8,-70},{28,-50}})));
      equation
        connect(switch1.u1, const.y) annotation (Line(points={{38,8},{32,8},{32,24},{
                27,24}},   color={0,0,127}));
        connect(const1.y, switch1.u3) annotation (Line(points={{27,-18},{34,-18},{34,
                -8},{38,-8}},
                           color={0,0,127}));
        connect(switch1.y, integrator3.u)
          annotation (Line(points={{61,0},{74.8,0}},     color={0,0,127}));
        connect(discomfortTime, integrator3.y)
          annotation (Line(points={{110,0},{88.6,0}}, color={0,0,127}));
        connect(T, switch2.u)
          annotation (Line(points={{-120,0},{-52,0}}, color={0,0,127}));
        connect(switch2.y, switch1.u2)
          annotation (Line(points={{-29,0},{38,0}}, color={255,0,255}));
        connect(not1.y, integrator3.reset) annotation (Line(points={{29,-60},{90,-60},
                {90,-7.2},{85.6,-7.2}}, color={255,0,255}));
        connect(switch2.y, not1.u) annotation (Line(points={{-29,0},{-22,0},{-22,-60},
                {6,-60}}, color={255,0,255}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid), Text(
                extent={{-62,52},{66,-68}},
                lineColor={0,0,0},
                textString="%name")}), Diagram(graphics,
                                               coordinateSystem(preserveAspectRatio=false)),
          Documentation(info="<html>
<p>Calculate the time discomfort is present. Useful to check if discomfort values are high due to frequent small deviations or some long, possibly big deviations. The latter may indicate the system is undersized for the given demand.</p>
</html>"));
      end CountTimeDiscomfort;

      model ComfortCalculator "Cacluate the discomort in K*s"

        parameter Modelica.Units.SI.Temperature TComBou
          "Comfort boundary temperature";
        parameter Boolean for_heating = true "=false to calculate comfort during cooling period (summer). = true for heating";

        Modelica.Blocks.Nonlinear.Limiter lim(final uMax=Modelica.Constants.inf,
            final uMin=0)
          annotation (Placement(transformation(extent={{8,-14},{28,6}})));
        Modelica.Blocks.Continuous.Integrator intDisCom(
          final k=1,
          final use_reset=false,
          final initType=Modelica.Blocks.Types.Init.InitialOutput,
          final y_start=0)
          annotation (Placement(transformation(extent={{44,-14},{64,6}})));
        Modelica.Blocks.Math.Add add(final k1=if for_heating then -1 else 1,
            final k2=if for_heating then 1 else -1)
          annotation (Placement(transformation(extent={{-26,-16},{-6,4}})));
        Modelica.Blocks.Sources.Constant const(k=TComBou)
          annotation (Placement(transformation(extent={{-66,-30},{-46,-10}})));
        Modelica.Blocks.Interfaces.RealOutput dTComSec(unit="K.s")
                                                       "K*s discomfort"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput TZone(unit="K")
                                                   "Connector of Real input signal 1"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));

      equation
        connect(add.u2, const.y) annotation (Line(points={{-28,-12},{-38,-12},{-38,-20},
                {-45,-20}}, color={0,0,127}));
        connect(intDisCom.y, dTComSec) annotation (Line(points={{65,-4},{88,-4},{88,0},
                {110,0}}, color={0,0,127}));
        connect(lim.y, intDisCom.u)
          annotation (Line(points={{29,-4},{42,-4}}, color={0,0,127}));
        connect(add.u1, TZone)
          annotation (Line(points={{-28,0},{-120,0}}, color={0,0,127}));
        connect(add.y, lim.u)
          annotation (Line(points={{-5,-6},{0,-6},{0,-4},{6,-4}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid), Text(
                extent={{-62,52},{66,-68}},
                lineColor={0,0,0},
                textString="%name")}),                                 Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)),
          Documentation(info="<html>
<p>Calculate the comfort during either heating or cooling period. Based on EN 15251, which defines a 2 K bandwith around a set temperature of 22 &deg;C.</p>
</html>"));
      end ComfortCalculator;

      model InternalKPICalculator
        "KPIs for internal variables. Add via Attributes -> y=someVar"
        extends BaseClasses.PartialKPICalculator;

        Modelica.Blocks.Interfaces.RealInput y "Value of Real input";

        Modelica.Blocks.Sources.RealExpression internal_u(y=y) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-112,0})));
      equation
        connect(internalU.u, internal_u.y)
          annotation (Line(points={{-90,0},{-101,0}}, color={0,0,127}));
        annotation (Documentation(info="<html>
<p>If no input is given, specify &quot;y=...&quot; as a modifier.</p>
</html>"));
      end InternalKPICalculator;

      model InputKPICalculator "Calculate for given input"
        extends BaseClasses.PartialKPICalculator;
        Modelica.Blocks.Interfaces.RealInput u(unit=unit)
                                               "Connector of Real input signal"
          annotation (Placement(transformation(extent={{-142,-20},{-102,20}})));
      equation
        connect(internalU.u, u)
          annotation (Line(points={{-90,0},{-122,0}}, color={0,0,127}));
        annotation (Documentation(info="<html>
<p>Calculate a set of KPIs for the given Real input signal</p>
</html>"));
      end InputKPICalculator;

      package BaseClasses "For partial models"
        extends Modelica.Icons.BasesPackage;
        partial model PartialKPICalculator "Partial KPI Calculator"

          parameter String unit "Unit of signal";
          parameter String integralUnit "Unit of integral of signal";
          parameter Real thresholdOn=Modelica.Constants.eps * 100
            "If u is greater or equal to this treshhold the device is considered on.";
          parameter Real thresholdOff=Modelica.Constants.eps
            "If u is lower or equal to this treshhold, the device is considered off.";
          parameter Boolean calc_singleOnTime=true
                                              "True to calc singleOnTime";
          parameter Boolean calc_integral=true
                                          "True to calc integral";
          parameter Boolean calc_totalOnTime=true
                                             "True to calc totalOnTime";
          parameter Boolean calc_numSwi=true
                                        "True to calc number of device on-switches";
          parameter Boolean calc_movAve=true
                                        "True to calc moving average";
          parameter Boolean calc_intBelThres=true
                                        "True to calc integral below threshold, e.g. for discomfort";
          parameter Modelica.Units.SI.Time aveTime=24*3600
            "Time span for moving average" annotation (Dialog(enable=calc_movAve));
          Modelica.Blocks.Logical.Switch switch1 if calc_singleOnTime
            annotation (Placement(transformation(extent={{40,-10},{60,10}})));
          Modelica.Blocks.Sources.Constant const(k=1) if calc_singleOnTime
            annotation (Placement(transformation(extent={{6,14},{26,34}})));
          Modelica.Blocks.Sources.Constant const1(k=0) if calc_singleOnTime
            annotation (Placement(transformation(extent={{6,-28},{26,-8}})));
          Modelica.Blocks.Continuous.Integrator integrator3(use_reset=true, y(unit="s"))
         if calc_singleOnTime
            annotation (Placement(transformation(extent={{76,-6},{88,6}})));
          Modelica.Blocks.Logical.Hysteresis isOn(
            final uLow=thresholdOff,
            final uHigh=thresholdOn,
            final pre_y_start=false) if calc_numSwi or calc_singleOnTime or calc_totalOnTime
            annotation (Placement(transformation(extent={{-50,-10},{-30,10}})));

          Modelica.Blocks.Logical.Not not1 if calc_singleOnTime
            annotation (Placement(transformation(extent={{8,-70},{28,-50}})));
          Modelica.Blocks.Sources.IntegerConstant integerConstant(final k=1)
         if calc_numSwi
            annotation (Placement(transformation(extent={{-48,136},{-32,152}})));
          Modelica.Blocks.MathInteger.TriggeredAdd triggeredAdd(final use_reset=false,
              final y_start=0) if calc_numSwi
            "To count on-off cycles"
            annotation (Placement(transformation(extent={{-16,134},{0,152}})));
          Modelica.Blocks.Logical.Switch switch3 if calc_totalOnTime
            annotation (Placement(transformation(extent={{40,78},{60,98}})));
          Modelica.Blocks.Sources.Constant const2(k=1) if calc_totalOnTime
            annotation (Placement(transformation(extent={{6,102},{26,122}})));
          Modelica.Blocks.Sources.Constant const3(k=0) if calc_totalOnTime
            annotation (Placement(transformation(extent={{6,60},{26,80}})));
          Modelica.Blocks.Continuous.Integrator integrator1(y(unit="s"))
                                                            if calc_totalOnTime
            annotation (Placement(transformation(extent={{76,82},{88,94}})));

          Modelica.Blocks.Continuous.Integrator integrator2(use_reset=false,
            y_start=Modelica.Constants.eps, y(unit=integralUnit))
         if calc_integral
            annotation (Placement(transformation(extent={{72,-90},{84,-78}})));
          Icons.KPIBus KPIBus
            annotation (Placement(transformation(extent={{92,-10},{112,10}})));

          Modelica.Blocks.Routing.RealPassThrough internalU(y(unit=unit))
                                                            annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=0,
                origin={-78,0})));
          AixLib.Utilities.Math.MovingAverage movingAverage(aveTime=aveTime, y(unit=
                  unit))
         if calc_movAve
            annotation (Placement(transformation(extent={{-34,-168},{-14,-148}})));

          Modelica.Blocks.Continuous.Integrator integratorDiscomfort(final k=1,
                                                                     use_reset=false,
            y(unit=integralUnit))
         if calc_intBelThres
            annotation (Placement(transformation(extent={{70,-28},{82,-16}})));
          Modelica.Blocks.Sources.Constant const4(k=thresholdOn)
         if calc_intBelThres
            annotation (Placement(transformation(extent={{-46,-54},{-26,-34}})));
          Modelica.Blocks.Math.Add         add(final k1=-1, final k2=+1)
                                                             if calc_intBelThres
            annotation (Placement(transformation(extent={{28,-48},{48,-28}})));
          Modelica.Blocks.Nonlinear.Limiter limiter(final uMax=Modelica.Constants.inf,
              final uMin=0) if calc_intBelThres
            annotation (Placement(transformation(extent={{54,-44},{66,-32}})));
        equation
          connect(switch1.u1, const.y) annotation (Line(points={{38,8},{32,8},{32,24},{
                  27,24}},   color={0,0,127}));
          connect(const1.y, switch1.u3) annotation (Line(points={{27,-18},{34,-18},{34,
                  -8},{38,-8}},
                             color={0,0,127}));
          connect(switch1.y, integrator3.u)
            annotation (Line(points={{61,0},{74.8,0}},     color={0,0,127}));
          connect(isOn.y, switch1.u2)
            annotation (Line(points={{-29,0},{38,0}}, color={255,0,255}));
          connect(not1.y, integrator3.reset) annotation (Line(points={{29,-60},{86,-60},
                  {86,-7.2},{85.6,-7.2}}, color={255,0,255}));
          connect(isOn.y, not1.u) annotation (Line(points={{-29,0},{-22,0},{-22,-60},{6,
                  -60}}, color={255,0,255}));
          connect(integerConstant.y,triggeredAdd. u) annotation (Line(points={{-31.2,144},
                  {-23.6,144},{-23.6,143},{-19.2,143}},
                                                     color={255,127,0}));
          connect(switch3.u1, const2.y) annotation (Line(points={{38,96},{32,96},{32,112},
                  {27,112}}, color={0,0,127}));
          connect(const3.y,switch3. u3) annotation (Line(points={{27,70},{34,70},{34,80},
                  {38,80}},  color={0,0,127}));
          connect(switch3.y,integrator1. u)
            annotation (Line(points={{61,88},{74.8,88}},   color={0,0,127}));
          connect(integrator2.y, KPIBus.integral) annotation (Line(points={{84.6,-84},{102,
                  -84},{102,0}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(triggeredAdd.y, KPIBus.numSwi) annotation (Line(points={{1.6,143},{102,
                  143},{102,0}}, color={255,127,0}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(isOn.y, switch3.u2) annotation (Line(points={{-29,0},{-18,0},{-18,88},
                  {38,88}}, color={255,0,255}));
          connect(isOn.y, triggeredAdd.trigger) annotation (Line(points={{-29,0},{-12.8,
                  0},{-12.8,132.2}}, color={255,0,255}));
          connect(integrator3.y, KPIBus.singleOnTime) annotation (Line(points={{88.6,0},
                  {102,0}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(integrator1.y, KPIBus.totalOnTime) annotation (Line(points={{88.6,88},
                  {90,88},{90,0},{102,0}},             color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(isOn.u, internalU.y)
            annotation (Line(points={{-52,0},{-67,0}}, color={0,0,127}));
          connect(internalU.y, integrator2.u)
            annotation (Line(points={{-67,0},{-62,0},{-62,-84},{70.8,-84}},
                                                                    color={0,0,127}));
          connect(internalU.y, KPIBus.value) annotation (Line(points={{-67,0},{-62,0},{-62,
                  -132},{102,-132},{102,0}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{-6,3},{-6,3}},
              horizontalAlignment=TextAlignment.Right));
          connect(internalU.y, movingAverage.u) annotation (Line(points={{-67,0},{-64,0},
                  {-64,2},{-62,2},{-62,-158},{-36,-158}}, color={0,0,127}));
          connect(movingAverage.y, KPIBus.movAve) annotation (Line(points={{-13,-158},{102,
                  -158},{102,0}}, color={0,0,127}), Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          connect(internalU.y, add.u1) annotation (Line(points={{-67,0},{-62,0},{
                  -62,-32},{26,-32}},           color={0,0,127}));
          connect(add.u2, const4.y)
            annotation (Line(points={{26,-44},{-25,-44}}, color={0,0,127}));
          connect(add.y, limiter.u)
            annotation (Line(points={{49,-38},{52.8,-38}}, color={0,0,127}));
          connect(limiter.y, integratorDiscomfort.u) annotation (Line(points={{66.6,-38},
                  {68.8,-38},{68.8,-22}}, color={0,0,127}));
          connect(integratorDiscomfort.y, KPIBus.IntBelowThreshold) annotation (Line(
                points={{82.6,-22},{90,-22},{90,-24},{102,-24},{102,0}}, color={0,0,127}),
              Text(
              string="%second",
              index=1,
              extent={{6,3},{6,3}},
              horizontalAlignment=TextAlignment.Left));
          annotation (Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-180},
                    {100,180}}),                                        graphics={
                  Rectangle(
                  extent={{-100,100},{100,-100}},
                  lineColor={0,0,0},
                  fillColor={215,215,215},
                  fillPattern=FillPattern.Solid), Text(
                  extent={{-62,52},{66,-68}},
                  lineColor={0,0,0},
                  textString="%name")}), Diagram(graphics,
                                                 coordinateSystem(preserveAspectRatio=false, extent={
                    {-100,-180},{100,180}})),
            Documentation(info="<html>
<p>Calculates a list of KPIs. Each KPI may be turned on or off. As integrators and Integer conversions are used, disabling KPIs may improve simulation speed. Nevertheless, most KPIs will be handy to understand and explain the BES behaviour better.</p>
<h4>Options</h4>
<ul>
<li>Calculate how long a device is turned in total (totalOnTime) and how long it&apos;s on for each on-cycle (singleOnTime)</li>
<li>Calculate how many times it is turned on (numSwi)</li>
<li>The integral</li>
<li>The moving average, useful for e.g. temperatures or COPs</li>
<li>The integral below a given threshold. This may be useful to estimate discomfort, seperate cooling and heating loads etc. (intBelowThreshold)</li>
</ul>
</html>"));
        end PartialKPICalculator;
      end BaseClasses;

      model ComfortCalculator_TSet_notConstant
        "Cacluate the discomort in K*s"

        parameter Modelica.Units.SI.Temperature TComBou;
        parameter Modelica.Units.SI.TemperatureDifference dT_night;
        parameter Modelica.Units.NonSI.Time_hour hMorning;
        parameter Modelica.Units.NonSI.Time_hour timeRamp;

        parameter Boolean for_heating = true "=false to calculate comfort during cooling period (summer). = true for heating";

        Modelica.Blocks.Nonlinear.Limiter lim(final uMax=Modelica.Constants.inf,
            final uMin=0)
          annotation (Placement(transformation(extent={{8,-14},{28,6}})));
        Modelica.Blocks.Continuous.Integrator intDisCom(
          final k=1,
          final use_reset=false,
          final initType=Modelica.Blocks.Types.Init.InitialOutput,
          final y_start=0)
          annotation (Placement(transformation(extent={{44,-14},{64,6}})));
        Modelica.Blocks.Math.Add add(final k1=if for_heating then -1 else 1,
            final k2=if for_heating then 1 else -1)
          annotation (Placement(transformation(extent={{-26,-16},{-6,4}})));
        Modelica.Blocks.Interfaces.RealOutput dTComSec(unit="K.s")
                                                       "K*s discomfort"
          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
        Modelica.Blocks.Interfaces.RealInput TZone(unit="K")
                                                   "Connector of Real input signal 1"
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));

        Modelica.Blocks.Sources.Trapezoid trapezoid(
          amplitude=dT_night,
          rising=timeRamp*60*60,
          width=(24 - hMorning)*60*60,
          falling=0,
          period=24*60*60,
          offset=TComBou - dT_night,
          startTime=(hMorning - timeRamp)*60*60)
          annotation (Placement(transformation(extent={{-66,-32},{-44,-10}})));
      equation
        connect(intDisCom.y, dTComSec) annotation (Line(points={{65,-4},{88,-4},{88,0},
                {110,0}}, color={0,0,127}));
        connect(lim.y, intDisCom.u)
          annotation (Line(points={{29,-4},{42,-4}}, color={0,0,127}));
        connect(add.u1, TZone)
          annotation (Line(points={{-28,0},{-120,0}}, color={0,0,127}));
        connect(add.y, lim.u)
          annotation (Line(points={{-5,-6},{0,-6},{0,-4},{6,-4}}, color={0,0,127}));
        connect(trapezoid.y, add.u2) annotation (Line(points={{-42.9,-21},{-34,-21},{-34,
                -12},{-28,-12}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                fillColor={215,215,215},
                fillPattern=FillPattern.Solid), Text(
                extent={{-62,52},{66,-68}},
                lineColor={0,0,0},
                textString="%name")}),                                 Diagram(
              coordinateSystem(preserveAspectRatio=false)),
          Documentation(info="<html>
<p>Calculate the comfort during either heating or cooling period. Based on EN 15251, which defines a 2 K bandwith around a set temperature of 22 &deg;C.</p>
</html>"));
      end ComfortCalculator_TSet_notConstant;
    annotation (Documentation(info="<html>
<p>Key Perfomance Indicators (KPIs) are useful to assess the demands, efficiency, comforts etc. of a BES. Defining all KPIs on the system level is tedious and error prone. Thus, each subsystem may calculate relevant KPIs using models in this package.</p>
</html>"));
    end KPIs;

    package Icons "Package with Icons used in BESMod"

      partial package SystemIcon

        annotation (Icon(graphics={
              Rectangle(
                lineColor={200,200,200},
                fillColor={248,248,248},
                fillPattern=FillPattern.HorizontalCylinder,
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Rectangle(
                lineColor={128,128,128},
                extent={{-100,-100},{100,100}},
                radius=25.0),
              Rectangle(
                lineColor={128,128,128},
                extent={{-100,-100},{100,100}},
                radius=25.0),
            Rectangle(extent={{-80,66},{-18,-42}}, lineColor={0,0,0}),
            Rectangle(extent={{24,66},{88,8}}, lineColor={0,0,0}),
            Rectangle(extent={{24,-24},{88,-82}}, lineColor={0,0,0}),
            Line(points={{-20,50},{24,50}}, color={0,0,0}),
            Line(points={{-20,24},{24,24}}, color={0,0,0}),
            Line(points={{74,-24},{74,8}}, color={0,0,0}),
            Line(points={{38,-24},{38,8}}, color={0,0,0})}));
      end SystemIcon;

      partial model BuildingIcon
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Polygon(
                points={{-80,54},{80,54},{0,94},{-80,54}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-48,44},{-10,18}},
                lineColor={0,0,0},
                lineThickness=0.5),
              Rectangle(
                extent={{-60,54},{60,-86}},
                lineColor={0,0,0},
                lineThickness=0.5),
              Rectangle(
                extent={{8,-20},{50,-86}},
                lineColor={0,0,0},
                lineThickness=0.5), Text(
                extent={{-102,-72},{102,-168}},
                lineColor={0,0,0},
                textString="%name%")}),
                                      Diagram(graphics,
                                              coordinateSystem(preserveAspectRatio=false)));
      end BuildingIcon;

      partial model VentilationIcon
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Ellipse(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-12,12},{12,-12}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-18,8},{18,96}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-18,-44},{18,44}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={46,-26},
                rotation=60),
              Ellipse(
                extent={{-18,-44},{18,44}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid,
                origin={-42,-26},
                rotation=-60),      Text(
                extent={{-100,-74},{104,-170}},
                lineColor={0,0,0},
                textString="%name%")}),Diagram(graphics,
                                               coordinateSystem(preserveAspectRatio=false)));
      end VentilationIcon;

      partial model ControlIcon
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-96,68},{96,52}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-96,8},{96,-8}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-96,-52},{96,-68}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-76,78},{-28,42}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={175,175,175},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{38,18},{86,-18}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={175,175,175},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-24,-44},{24,-80}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={175,175,175},
                fillPattern=FillPattern.Solid),
                                    Text(
                extent={{-100,-74},{104,-170}},
                lineColor={0,0,0},
                textString="%name%")}),Diagram(graphics,
                                               coordinateSystem(preserveAspectRatio=false)));
      end ControlIcon;

      partial model GenerationIcon
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
                                    Text(
                extent={{-100,-78},{104,-174}},
                lineColor={0,0,0},
                textString="%name%"),
                        Line(
                points={{-66,60},{-32,10},{8,70},{38,30},{48,30}},
                color={238,46,47},
                thickness=3,
                smooth=Smooth.Bezier),
              Polygon(
                points={{46,44},{46,16},{66,30},{46,44}},
                lineColor={238,46,47},
                lineThickness=1,
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),
              Polygon(
                points={{46,0},{46,-28},{66,-14},{46,0}},
                lineColor={238,46,47},
                lineThickness=1,
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),
                        Line(
                points={{-66,16},{-32,-34},{8,26},{38,-14},{48,-14}},
                color={238,46,47},
                thickness=3,
                smooth=Smooth.Bezier),
              Polygon(
                points={{46,-42},{46,-70},{66,-56},{46,-42}},
                lineColor={238,46,47},
                lineThickness=1,
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),
                        Line(
                points={{-66,-26},{-32,-76},{8,-16},{38,-56},{48,-56}},
                color={238,46,47},
                thickness=3,
                smooth=Smooth.Bezier),
              Text(
                extent={{42,24},{124,-24}},
                lineColor={238,46,47},
                textString="Q̇"),
              Text(
                extent={{-126,26},{-40,-24}},
                lineColor={0,0,0},
                textString="P")}),     Diagram(graphics,
                                               coordinateSystem(preserveAspectRatio=false)));
      end GenerationIcon;

      partial model TransferIcon
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{72,40},{90,-82}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{48,40},{66,-82}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{24,40},{42,-82}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{0,40},{18,-82}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-24,40},{-6,-82}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-88,40},{-36,6},{-36,40},{-88,6},{-88,40}},
                color={0,0,0},
                thickness=0.5),
              Line(
                points={{-62,22},{-62,56}},
                color={0,0,0},
                thickness=0.5),
              Line(
                points={{-52,56},{-72,56}},
                color={0,0,0},
                thickness=0.5),     Text(
                extent={{-100,-76},{104,-172}},
                lineColor={0,0,0},
                textString="%name%")}),Diagram(graphics,
                                               coordinateSystem(preserveAspectRatio=false)));
      end TransferIcon;

      partial model StorageIcon
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(
                points={{-74,22},{-22,-12},{-22,22},{-74,-12},{-74,22}},
                color={0,0,0},
                thickness=0.5),
              Line(
                points={{-48,6},{-64,-26},{-32,-26},{-48,6}},
                color={0,0,0},
                thickness=0.5),
              Rectangle(
                extent={{6,68},{88,22}},
                lineThickness=0.5,
                pattern=LinePattern.None,
                lineColor={0,0,0},
                fillColor={255,0,0},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{6,22},{88,-24}},
                lineThickness=0.5,
                fillColor={255,213,2},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None,
                lineColor={0,0,0}),
              Rectangle(
                extent={{6,-24},{88,-70}},
                lineThickness=0.5,
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid,
                pattern=LinePattern.None),
                                    Text(
                extent={{-100,-72},{104,-168}},
                lineColor={0,0,0},
                textString="%name%")}),Diagram(graphics,
                                               coordinateSystem(preserveAspectRatio=false)));
      end StorageIcon;

      partial model DistributionIcon
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
                                    Text(
                extent={{-100,-72},{104,-168}},
                lineColor={0,0,0},
                textString="%name%"),
              Line(
                points={{-72,74},{-70,20},{-198,40}},
                color={0,0,0},
                pattern=LinePattern.None,
                thickness=0.5),
              Rectangle(
                extent={{-80,80},{-70,28}},
                lineColor={28,108,200},
                lineThickness=1,
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-94,32},{72,22}},
                lineColor={28,108,200},
                lineThickness=1,
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{48,28},{58,-24}},
                lineColor={28,108,200},
                lineThickness=1,
                fillColor={28,108,200},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{68,2},{78,-50}},
                lineColor={238,46,47},
                lineThickness=1,
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-74,6},{92,-4}},
                lineColor={238,46,47},
                lineThickness=1,
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid),
              Rectangle(
                extent={{-60,54},{-50,2}},
                lineColor={238,46,47},
                lineThickness=1,
                fillColor={238,46,47},
                fillPattern=FillPattern.Solid)}),
                                       Diagram(graphics,
                                               coordinateSystem(preserveAspectRatio=false)));
      end DistributionIcon;

      partial model DHWIcon
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
              Rectangle(
                extent={{-100,100},{100,-100}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
                                    Text(
                extent={{-100,-72},{104,-168}},
                lineColor={0,0,0},
                textString="%name%"),
                Bitmap(
                extent={{-74,-74},{86,80}},
                imageSource=
                    "iVBORw0KGgoAAAANSUhEUgAAAMgAAADdCAYAAAD+Qz22AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAHsQAAB7EBBsVhhgAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAABahSURBVHic7d15lFxlmcfx7/ve7s5GQhZDFhJJoiEIkaCggMwIESYBBxQRERlcmGEbUJA1Inpo9EgcdrI0SQgJYKJOO5w5CAZcMMPihgEUhGEQlwNCQoBgICTpdN33mT9uNV3dXXXrVtW9dW91PZ9z3tMaut/3qar3V3e/16CyyALTgfcA+wLvAiYBE4HJwHCgBRiZ//2tgMv/3Ai8DPwN+CPwNPBU/t9VhUzaBSgAWoHDgA8DHwIOBUbFPMZG4GHgIeAB4ImY+1cqVqOBzwM/IPjmlzq3vwA3AXMJllhKpc4DPgp8H9hB/UNRqv0VuALYK7FXrlSIkcD5BBMx7TCENR+4GzgkkXdBqX7GAVeTzipUre1+gu0hpWI3AlgAvE76E73Wdjfw7njfHtWsDHAqwR6jtCd2nK0L+CYwJL63SjWbfYH1pD+Zk2xPE+yOVioyQ7ABvpP0J3A9miPYPdwSx5uXdfU6UNhzZPi9wGxgKjCGYO/ObvmfI0v+dXa1AOOBYWkXkoL/AU5hkB+hTyogluBo8PHA4QSrHyMSGkulZyNwHPBo2oU0AgvMB1YAm0h/VUBbfdo24GOokiy93yJpf1ja0mk54F9RfXjAGcCfSP8D0pZ+c8A5KABmEGykpf2haMtWc8DpNDEDnEmw3pn2h6Etmy0HfIImtBtwH+l/ANqy37YT7MVseFF3844jOCdnULxoVRebgAOBl9IupBZRLpSZDvwKDYeqzETgvwiulmxYXpn/Ppbg8syZdahFDT5TgaHAT9MupFphq1itBNscH6lTLWpwcgRz6IG0C6lG2CrWMjQcqnYWWE2wk6fhlFrFOhFYWM9C1KA2hmBV6ydpF1KpYqtYuxPcR2nPOteiBrcccADB3GoYxVaxrkfDoeLXQnB9fkPpvwTZj+CGYnqfJJWUeTTQXq3+QWgv8m9KxenKtAuoROESZDbB0kNvR6qSdgQNstu3cGlxFhoOVR9fTbuAqHoCMRR4keDIeT1tBV4D3iQ4Q3hHncc/iOAeuaq+BNgHeDbtQqI6geTP8PQJzulaQHDD5HF1eWWl/RPpn/XazK2h9mh1kOyb8V2CGzdkyXrSnyTN3F4B2sp+ShnxNMm8CVuBf67j64hqP9KfINqCO91nmiU4LXmfBPreQXCXkx8l0Hetvph2AQqAT6ZdQBQnk8y3w5fq+SIqMBJ4g/S/PbUFO2gyfb2IBT6YQL/PEGzXZNHxNOZdHAejscAH0i4ijAWmJdDvIoK9Vln06bQLUH1k+pIKSzKP3fphAn3GYTTB7l2VHXPTLiCMJbgsMk5/JDjomEXH0EC7FpvEoZS/9Ds1lvgfN/yHmPuLky49smcYMCvtIkqxxL8XYUvM/cXpqLQLUEXNSbuAUizNc4Li3sS/OqnisX/aBZTSTNd+HJx2AaqkaWkXUEozBeTAtAtQJSWxJzUWzRSQ96ddgCpJA5IB70m7AFXSO9IuoJRmCcgoMvwhKNrI6PGpZgnIu9IuQJWVyfPjmiUguns3+zL5FORmCUjal/eq8lzaBRTTLAEZk3YBqqxc2gUU05J2AXXyFvBzqvuWyhHcdaXacXdV+bevV/j7w4EhZX5nNOUfeVHuLuxJjZPJgEAwaeK8SmxlfctXKjnNsoqlVFU0IEqF0IBEtG7lmsOS6FdEzD0rvvOhJPoudFdC9fcZ47bkx6g3DUgE9y5f8xXjy8PrVqw5Ju6+161ce6OFB+65ZW1iJ1Pec8uay1uEh9bdumZecmOsPdPL8dDdt679l6TGSIMGpIz7lt4+1zr3LeuEFt9du759fWx7/u69+Y6TPd+dZ520tOb86+Lqt9B9K24/ynPyDevEkJPrOjs7Y7+89b7l33m/FbfYiBjr3Lc7r+8cFvcYadGAhOjs7GzzoMM6sdYJxsm+/vjn/y2Ovu+69daRnsj11gnWCUbk8J903PaxOPru0dnZ2WZ8s6Snfs/J7NGvdp0W5xjt7e3WiFtqhDbrwDqmjBrRdUGcY6RJAxJi7Mvbv2yd7NMzifMhaV+/evXQWvsevsP7hnUyqbBv61goIrFd4Tn21e0XWSezCscAd+W6RYvKHceI7NCJM05DzCH93qMF93SsHRQHZzUgJaxfdMsUz/H1vhNYsE4m8oacWlPfN62c7Tm+OLBv9l2/+PZY7lf746WrphqfywuWUBgRrJPJQ8yoU+IY456OtWOsLwuLvEej2sidGccYadOAlGD9lq9Y53Yr8uFjHBdLe3vV750Vr90615IPRUETrJML46i/NWcvs05G9ISjT/3ChXEsqYb5u863TsYXe488X87rbO/M5CnsldCAFPHQwo4x1rnPF/vg8+vys36x29T51fS9/obV04yT4/uFovBb/iMPXLfyfTXV37F2jOfc5wqWGv2am/3g4lU13QJp3aJFQ6zj7FLvkXUyefzobSfVMkYWaECKsC1tZ1onRZcevevyUtWGaKtz51snXpFg9PaP+XIt9cuOHWcbCZYepZrJUdOG9Ag34lTrZELYGFZqGyMLNCD9bFi+vNU6ObfkxOqdzEc9tHDVjEr6/vWiNaOsL6f176/IOCetv2F1VY+G27B8easRzgmduEGb/6sbVk+rZgwA6zgvwhjvf/CGVQ19LwANSD9uiz3BOpkaEoyeZlptd2UHxbZvP8062b1Ef4Vt6NBu/8Rq6t+11Z7oOZkSPnHBOgzdrqqN9V9et/JI68v+EQKC1+0+V80YWaEB6cc4d0qZYPQ2n4ommHWcUiYYhdsJVU1e48spIaHos91jqhzDdrsSYxT5UkFOrmWHRtoatvAkPN6+erR1Mr/M6k/hhNvnN1et2DtK379d2DHDiHwgysQKwicf/s1VSyq6EvKhhR1jPJF5YaHo1/b79TeXzaxkjKfaO9uM4/go4cj/7wmPtE1s2Jv2aUAKGLtznnUypPS3/MAJ15ZzkY5+G9871joxkQPixGtx3tGV1D/UmfnWvX1EO9I4njXHVjLGTm/rP1iRsaFLjYG7lY+rZIws0YAUcnLkwGCEfwsb546M0rXn3JEVhCO/FDGR+n57DJ/IY7w9kX2paAwkV3SMsFVHD9OwNw3XgBTwnMyNuGpSGKBDyq1jS3u7tU4Orzgg4io6Dd445kYNR+8YcmglBw2t9B0jytLW+HLAhvblwyt5LVmhAcl75tJbRxrHu6OumhS00U93TQx9SvDTjJ9h/WDvVSXNONn7qfaVY6PUv2HB8t09JzMiLTX6/vvYJ75+c6TtqM5PdXrWyZyiQQv/YmlttX5D3hu5WW7aUJ63fX/rTJWnX3TvTfCs+aKk282xFT5lQgwYwSA7ZwK/Kff7w9r8/cUVXxL0/KuR4n9rLHsD/1dujFmzXn23dTK8b3+FQ5YYADBO9gYeKjdG1mhAejim21IzKIQYEMP0sN/xHNPDJk///sAUTubpRAiI8WW66T+GCUaN8LJC6+/RgkwXEYxEC0W/UiKNkTUakDwrMjbiZw30/VYWzOTwvhmLhHcu+YVXMJl7f9eY8L57x5A+Y4gJuomy3DJGoo3h3FjBEDUU/Uyq5o/SpgHJsz6jonzVwturP4VC56H1XYnnQJqCoJVa/3GRthO9nBuVX5rl+4vyV/2rKPN7jlEDllKRxzANub2rAcnzxN9WbmdOqcknZSaN9WVbb4R6xxAj5SeylFn09P7eNlOktiiibh15wrao5fQn1RSWARqQPOubLaU+xLLfyoa/hfbtzJbeP5aKvuUN4X2//XvObTFV7mMQTKQxrC+vl/syGNB3viQLL1RcWAZoQPKs7x6XfisBUSeyGPNEaN8ijyOVBaNAaN9vj4F7POLaWF5hmMLr7+Hl/MecjRbC/q/VCE9WUFxmNOR6YRKmLLngD9bJ5tL7+Eu2Hd2+tyGs79Ydw35hRLoqPlDo5OW9Xtzz2Sj1Tx/15pPWyatlDmoWO06xfUSX92iUMabdeMFG6/NMRQcig+a3ivtllDGyRgOSZzDiOZZEP9u250g0a2YuPu+NsL4nrzhruxVZVfGBQnHLzQ9O8iPV397urMjSiKEoPHB4xx4d526L+j5Z3OIKD0TiOblr6g0Xvhh1jCzRgBTwGHqD5+TF8pP37Um3uW2XvSJK30O67Detk61Rw+E5eW7oW/61ldQ/dFvuOuvkpbLnj/VO5JeHGNteyRibd4y4xTp5pkR/xdobuNyllYyRJRqQAnt0nLvNij3OCJuNBOvPxZtgRLYg/nHjV1ywMUrf41dcsNHgf8I6eTNCOP7mxD92/KoFFT12YfyqBW8ax8esc69EWP15zWKOnXDTl1+uZIyDVpzVjfBxKzwfYWm7zThOeOfiS/9UyRhZogHpZ49lFz2ey7kDge8DxVZvfJDv5XJuzqRlCx6ppO9JHQvWe749COFHFD/atguRFd1e9wF73ryg7KkfxUy++eJHnbEHGvhPI+L3TOKCyexbJ99tc3bO5CUXhm47lTJl6UXPGtt1kBVWWSe7igRDjC93tYp935SlF91fzRhZYQieDxLbzcqAW4HTY+wvNa+eff2e3cafZ4QDDLQI8qi1rNuj49JNtfa96fRrppsW5gH7C9JtjNnQbbvvnbL0q6/FUDoQ1J8jNx/MHCPGc1Yetd2t6yasrGypEWbT2dfsYUSOdtbMMcIIY8xjOWPu3bPjoobcrVuMPkBHqRJ0FUupEBoQpUJoQJQKoQFRKoQGRKkQGhClQmhAlAqhAVEqhF4PoqJoAfYCxgCj8z//XtD+CnSnVVySNCCqmCHAPOCjwIHAe4Gw5zLuAv4APAbcm287Eq6xLvRcrGw7CDgs/3MW0AqMArqAV4CXgBeB3wO/A/4XyNUw3gzgMuBEgiVFtd4E/hv4dr6mWk0G3gccAMwExuf/bRSwkyCMm4EN+fZTYgyonouVPUcTTPpK3/vtwM8IJvkHgajPRB8LrCBYEsQ5F3LAHcCECl//VOALwHcIvgAqHffvwBWEL/Ui04Bky5XE95lsBJYCcykdloOAP8U0Xqn2MsEqW5gZwKXAb2Mc9xGgokdIFKMByY4zSG6Svgh8i2Ai9vgIwepakuHoaTng4/1e73CCJcXDCY77ADXurdWAZMPuBKsGSU9UH/gxwXZiPcYrbG8BHwCmATfVcfzPRv8YBtKAZEOSS48stdcJdgnXc8yqb5qtBwqz4/C0C6iT0dT/8MLBwLBq/lADkh0VPStQVaSV4EBnxTQg2bFb2gUMcrtX80cakOzYmXYBg1xVBw41INmxOe0CBrmq7uSiAcmO36VdwCC2EQ1Iw/tR2gUMYndX+4cakOz4BfB42kUkLLab4lXAATdX+8cakOwQ4FyCEwaT1kVwtu0ngGvyYydtCcFJi/sD1xKciVwPS6hx9VWPpGfLKSRzflQX8BPg3wnO3i30UYIJm8RR7FeBTxV5nR4wH1hFsH2QxNh3EsNBSQ1I9hxK8K1X62fxDMFp7J8ERpYZczhwMcHetDjmwRbgaxHGhWBN5mDgG8CDBLu8axl7K3ARMa0haUCyyQLHEFxP8QLh77lPcMr6XcBVBN/YE6scdwhwHMGz2av5/B8BTqDKUzvyhgIfJjj9/XaCi6C2lxl3G8GFUucTXBIcC72isHGMIbiKbijB+UyOYPWlp8V9TfidBBO9Ut8HPhNzLT3GAHsA7yAI4DaCbbbN9F5YFSu9Jr1xvJ5v9TK5yr/bM9Yq+up5D6p6dko1dC+WKqXaL8/WWKtImQZEqRAaEKVCaECUCqEb6c1tGHAqsB8Dd8vuVWWfM4DlBf+/C3iO4BY+9dzJEBs9DtKcpgFPEe9nH9ZeILhLY8PRgDSn+6lfOHraMwQHIhuGboM0p5kE98Sqt1nAESmMWzUNSHOakuLY70xx7IppQJpTmp97Q825hipWqXrTgCgVQgOiVAgNiFIhNCBKhdCAKBVCA6JUCA2IUiE0IEqF0IAoFUIDolQIvWAqfuMJnuZ6GMG9qcanW05RUW7mlpSvEjyPsZRWgvdtOMl+gfsEt0raQXAhV1fBf3seuA34Iej1IHF5B8F9YHdR/+sstCXTPqtLkHjsD9wDTE27EBWryzQgtZsDPIw+Y3AwmqUb6bUZTfAYAQ3H4GQ1ILW5BJiedhEqORqQ6o0kuJO4GsQ0INWbD4xIuwiVLA1I9Y5PuwCVPA1I9Y5IuwCVPA1I9fo/508NQhqQ6ul71wT0Q1YqhAZEqRAaEKVCaECq59IuQCVPA1I9DUgT0IBUr6v8r6hGpwGp3s60C1DJ04BUT1exmoAGRKkQGhClShMNiFKl/VkDolRpy/SmDdm2C3grgX4NsHv+Z71tJXwHhwcMy/9Msj7J19Fzf6zugv/2PLAaWAx6X6xqvUDy92W6LcH6T69D/f3bVQm+nkToKlbzWgl8GvhzHcbaCJwHXF6HsWKlq1jNrTPfhgFDExqjG9iWUN+J04AoCO5PuyPtIrJIV7GUCqEBUSqEBkSpEBoQpUJoQJQKoQFRKoQGRKkQGhClQmhAlAqhAVEqhAZEqRAaEKVCaECqJ4NkDBVCA1K95+owxrN1GEOF0IBUb1nC/b8BrE14DFWGBqR6ncAZwF9i7jcHPELwkNDnY+5bVUgvmKrNynzbDWiNqc8d6G1NM0MDEo+GvaRUhdOA1Mn9S1d9SLBf2/LK8ONPaj9pV9r1qGh0G6QOfn7jrbNwdp1xHDNu3PZL0q5HRacBSdj61auHYu2dRmR3I4IRWfCzG2+ZkHZdKhoNSMLsVq6wjv2sg3wb2WJar0i7LhWNBiRB629aORuRi/NLjt7m3Bnrr129T9r1qfI0IAnyfHONEWkZEBCRFs9zC9KuT5WnAUnIg9etPNI6ji5YterbfD7z4A3LJ6VdpwqnAUmI57iiyJKjsA3xur1z0q5ThdOAJOCXV6843Ij8Y5mAYJBzfn/NHSPSrleVpgFJgHV2QclVq75t7M7czs+mXa8qTQMSsw1XL3+XETe/7NIj34Avpl2zKk0DEjPf5ywjYqMGxIjs9+uFtxyYdt2qOD0XK0br29tbPJ8vVPp3Fvc54NH4K1K10iVIjEaZCUcakfEVLD0wIliRT3d2dnpp168G0oDEyZiTjUDxFrIdIjJh5jOvHZJ2+WogDUhMOjs7PSvy8T5LBlfYwvdoGWeOS/s1qIE0IDGZ9eTmg6yTMYWhqGw1y2lAMkgDEhdjjiq9elW+IbznscsWjU/7Zai+NCAx8YS5kZcWrmgzbdbT7ZCM0YDExDg5oMTEH9BKhsfIoWm/DtWXHgeJwZOXL51qRMbF0NV7Y+hDxUgDEoM2cbNdDDcJtY7ptfei4tQC/AdgYuzztzH21RDEySQbz110pwliTLDZrjKgBbgs7SIanRUZi8TyHTPiuS8tHsli3oijM1U7XcWKgzA6f2ZuzezwoXEuzVWNNCAxsDm6TExrRW5nl65eZYgGJAZW5PWYupKWcSP1rosZogGJhdts4tkG2Ty9/TS9cXWGaEBi0NLd+rB4uZr7MfBYDOWoGOmR9Bi8c8mXXjIif6z0OpCBp727n6X9WlRfGpC4CD+oMSBdztrvpf0yVF8akJi0dfs3WcfrEe9mMqB5Yjqm3XjBxrRfh+pLAxKTicsu2YzIuUZEqlh6PMmuN76W9mtQA+lBqZhtOvua88RwPRD1GvMnPCPz9+i4dFOSdanq6BIkZhOXXbJIkLlG+H3oRVLwlhHz7Z073jpYw5FdugRJiCBm0zlXH2GcPd7AYQJ7A1uA3xm413fmzskrLn417TpVuP8HmRHmxCb03h4AAAAASUVORK5CYII=",
                fileName="modelica://BESMod/Resources/Images/DHW.png")}),
                                       Diagram(graphics,
                                               coordinateSystem(preserveAspectRatio=false)));
      end DHWIcon;

      expandable connector ControlBus "Icon for signal bus"

        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}, initialScale=0.2), graphics={
                Rectangle(
                  lineColor={255,204,51},
                  lineThickness=0.5,
                  extent={{-20.0,-2.0},{20.0,2.0}}),
                Polygon(
                  fillColor={255,255,255},
                  fillPattern=FillPattern.Solid,
                  points={{-80.0,50.0},{80.0,50.0},{100.0,30.0},{80.0,-40.0},{60.0,-50.0},{-60.0,-50.0},{-80.0,-40.0},{-100.0,30.0}},
                  smooth=Smooth.Bezier,
                lineColor={0,0,0}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-65.0,15.0},{-55.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-5.0,15.0},{5.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{55.0,15.0},{65.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-35.0,-25.0},{-25.0,-15.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{25.0,-25.0},{35.0,-15.0}})}),
          Diagram(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              initialScale=0.2), graphics={
              Polygon(
                points={{-40,25},{40,25},{50,15},{40,-20},{30,-25},{-30,-25},{-40,-20},{-50,15}},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid,
                smooth=Smooth.Bezier,
                lineColor={0,0,0}),
              Ellipse(
                extent={{-32.5,7.5},{-27.5,12.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-2.5,12.5},{2.5,7.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{27.5,12.5},{32.5,7.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-17.5,-7.5},{-12.5,-12.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{12.5,-7.5},{17.5,-12.5}},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,70},{150,40}},
                textString="%name")}),
          Documentation(info="<html>
This icon is designed for a <strong>control bus</strong> connector.
</html>"));
      end ControlBus;

      expandable connector KPIBus "Icon for KPI bus"

        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}, initialScale=0.2), graphics={
                Rectangle(
                  lineColor={255,204,51},
                  lineThickness=0.5,
                  extent={{-20.0,-2.0},{20.0,2.0}}),
                Polygon(
                  fillColor={175,175,175},
                  fillPattern=FillPattern.Solid,
                  points={{-80.0,50.0},{80.0,50.0},{100.0,30.0},{80.0,-40.0},{60.0,-50.0},{-60.0,-50.0},{-80.0,-40.0},{-100.0,30.0}},
                  smooth=Smooth.Bezier,
                lineColor={0,0,0}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-65.0,15.0},{-55.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-5.0,15.0},{5.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{55.0,15.0},{65.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-35.0,-25.0},{-25.0,-15.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{25.0,-25.0},{35.0,-15.0}})}),
          Diagram(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              initialScale=0.2), graphics={
              Polygon(
                points={{-40,25},{40,25},{50,15},{40,-20},{30,-25},{-30,-25},{-40,-20},{-50,15}},
                fillColor={175,175,175},
                fillPattern=FillPattern.Solid,
                smooth=Smooth.Bezier,
                lineColor={0,0,0}),
              Ellipse(
                extent={{-32.5,7.5},{-27.5,12.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-2.5,12.5},{2.5,7.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{27.5,12.5},{32.5,7.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-17.5,-7.5},{-12.5,-12.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{12.5,-7.5},{17.5,-12.5}},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,70},{150,40}},
                textString="%name")}),
          Documentation(info="<html>
This icon is designed for a <strong>control bus</strong> connector.
</html>"));
      end KPIBus;

      expandable connector BuiMeaBus "Icon for building measurement bus"

        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}, initialScale=0.2), graphics={
                Rectangle(
                  lineColor={255,204,51},
                  lineThickness=0.5,
                  extent={{-20.0,-2.0},{20.0,2.0}}),
                Polygon(
                  fillColor={255,128,0},
                  fillPattern=FillPattern.Solid,
                  points={{-80.0,50.0},{80.0,50.0},{100.0,30.0},{80.0,-40.0},{60.0,-50.0},{-60.0,-50.0},{-80.0,-40.0},{-100.0,30.0}},
                  smooth=Smooth.Bezier,
                lineColor={0,0,0}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-65.0,15.0},{-55.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-5.0,15.0},{5.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{55.0,15.0},{65.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-35.0,-25.0},{-25.0,-15.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{25.0,-25.0},{35.0,-15.0}})}),
          Diagram(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              initialScale=0.2), graphics={
              Polygon(
                points={{-40,25},{40,25},{50,15},{40,-20},{30,-25},{-30,-25},{-40,-20},{-50,15}},
                fillColor={255,128,0},
                fillPattern=FillPattern.Solid,
                smooth=Smooth.Bezier,
                lineColor={0,0,0}),
              Ellipse(
                extent={{-32.5,7.5},{-27.5,12.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-2.5,12.5},{2.5,7.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{27.5,12.5},{32.5,7.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-17.5,-7.5},{-12.5,-12.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{12.5,-7.5},{17.5,-12.5}},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,70},{150,40}},
                textString="%name")}),
          Documentation(info="<html>
This icon is designed for a <strong>control bus</strong> connector.
</html>"));
      end BuiMeaBus;

      expandable connector UseProBus "Icon for user bus"

        annotation (
          Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}, initialScale=0.2), graphics={
                Rectangle(
                  lineColor={255,204,51},
                  lineThickness=0.5,
                  extent={{-20.0,-2.0},{20.0,2.0}}),
                Polygon(
                  fillColor={0,127,0},
                  fillPattern=FillPattern.Solid,
                  points={{-80.0,50.0},{80.0,50.0},{100.0,30.0},{80.0,-40.0},{60.0,-50.0},{-60.0,-50.0},{-80.0,-40.0},{-100.0,30.0}},
                  smooth=Smooth.Bezier,
                lineColor={0,0,0}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-65.0,15.0},{-55.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-5.0,15.0},{5.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{55.0,15.0},{65.0,25.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{-35.0,-25.0},{-25.0,-15.0}}),
                Ellipse(
                  fillPattern=FillPattern.Solid,
                  extent={{25.0,-25.0},{35.0,-15.0}})}),
          Diagram(coordinateSystem(
              preserveAspectRatio=false,
              extent={{-100,-100},{100,100}},
              initialScale=0.2), graphics={
              Polygon(
                points={{-40,25},{40,25},{50,15},{40,-20},{30,-25},{-30,-25},{-40,-20},{-50,15}},
                fillColor={0,127,0},
                fillPattern=FillPattern.Solid,
                smooth=Smooth.Bezier,
                lineColor={0,0,0}),
              Ellipse(
                extent={{-32.5,7.5},{-27.5,12.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-2.5,12.5},{2.5,7.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{27.5,12.5},{32.5,7.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{-17.5,-7.5},{-12.5,-12.5}},
                fillPattern=FillPattern.Solid),
              Ellipse(
                extent={{12.5,-7.5},{17.5,-12.5}},
                fillPattern=FillPattern.Solid),
              Text(
                extent={{-150,70},{150,40}},
                textString="%name")}),
          Documentation(info="<html>
This icon is designed for a <strong>control bus</strong> connector.
</html>"));
      end UseProBus;

      partial package ControlPackage
        extends Modelica.Icons.Package;

      annotation (Icon(graphics={               Rectangle(
                extent={{-60,74},{-30,52}},
                lineColor={0,0,0},
                fillColor={135,135,135},
                fillPattern=FillPattern.Solid,
                radius=5,
                lineThickness=0.5),
              Rectangle(
                extent={{-82,64},{82,62}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid), Rectangle(
                extent={{30,14},{60,-8}},
                lineColor={0,0,0},
                fillColor={135,135,135},
                fillPattern=FillPattern.Solid,
                radius=5,
                lineThickness=0.5),
              Rectangle(
                extent={{-82,4},{82,2}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid), Rectangle(
                extent={{-14,-46},{16,-68}},
                lineColor={0,0,0},
                fillColor={135,135,135},
                fillPattern=FillPattern.Solid,
                radius=5,
                lineThickness=0.5),
              Rectangle(
                extent={{-82,-56},{82,-58}},
                lineColor={0,0,0},
                fillColor={0,0,0},
                fillPattern=FillPattern.Solid)}));
      end ControlPackage;
    end Icons;

    package HeatGeneration
      extends Modelica.Icons.InternalPackage;

      partial model PartialGetHeatGenerationCurve
        extends BESMod.Systems.BaseClasses.PartialBESExample;
        replaceable
          BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialGeneration generation
          constrainedby
          BESMod.Systems.Hydraulical.Generation.BaseClasses.PartialGeneration(
          redeclare final package Medium = IBPSA.Media.Water,
          final Q_flow_nominal={sum(systemParameters.QBui_flow_nominal)},
          final TDem_nominal=systemParameters.THydSup_nominal,
          final dp_nominal=fill(0, generation.nParallelDem),
          final TOda_nominal=systemParameters.TOda_nominal,
          final TAmb=systemParameters.TAmbHyd,
          final dpDem_nominal={0}) annotation (choicesAllMatching=true,
            Placement(transformation(extent={{-36,-36},{34,36}})));
        BESMod.Systems.Hydraulical.Interfaces.GenerationControlBus sigBusGen
          annotation (Placement(transformation(extent={{-72,54},{-52,74}})));
        Modelica.Blocks.Sources.Constant const(k=1)
          annotation (Placement(transformation(extent={{-150,54},{-130,74}})));
        Modelica.Blocks.Sources.Constant const1(k=0)
          annotation (Placement(transformation(extent={{-150,22},{-130,42}})));
        Modelica.Blocks.Sources.BooleanConstant booleanConstant(k=true)
          annotation (Placement(transformation(extent={{-148,-8},{-128,12}})));
        Modelica.Blocks.Sources.Constant const2(k=1)
          annotation (Placement(transformation(extent={{-148,-44},{-128,-24}})));
        Modelica.Blocks.Sources.Ramp ramp
          annotation (Placement(transformation(extent={{-150,-80},{-130,-60}})));
        IBPSA.Fluid.Sources.MassFlowSource_T boundary(
          redeclare package Medium = IBPSA.Media.Water,
          m_flow=generation.m_flow_nominal[1],
          use_T_in=true,
          T=313.15,
          nPorts=1) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={82,10})));
        IBPSA.Fluid.Sources.Boundary_pT bou1(redeclare package Medium =
              IBPSA.Media.Water, nPorts=1) annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={82,54})));
        BESMod.Systems.Hydraulical.Control.Components.HeatingCurve heatingCurve(
          TRoomSet=systemParameters.TSetZone_nominal[1],
          GraHeaCurve=bivalentHeatPumpControlDataDefinition.gradientHeatCurve,
          THeaThres=systemParameters.TSetZone_nominal[1],
          dTOffSet_HC=bivalentHeatPumpControlDataDefinition.dTOffSetHeatCurve
               - generation.dTTra_nominal[1]) annotation (Placement(
              transformation(
              extent={{-11,-11},{11,11}},
              rotation=0,
              origin={-7,-71})));
        Modelica.Blocks.Interfaces.RealOutput TOda(unit="K", displayUnit="degC")
          "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,-50},{120,-30}})));
        Modelica.Blocks.Interfaces.RealOutput QCon_flow(unit="W", displayUnit="kW")
          "Connector of Real output signal"
          annotation (Placement(transformation(extent={{100,50},{120,70}})));
        Modelica.Blocks.Sources.RealExpression
                                         realExpression
          annotation (Placement(transformation(extent={{30,72},{50,92}})));
        replaceable
          BESMod.Systems.Hydraulical.Control.RecordsCollection.BivalentHeatPumpControlDataDefinition
          bivalentHeatPumpControlDataDefinition(
          TOda_nominal=systemParameters.TOda_nominal,
          TSup_nominal=systemParameters.THydSup_nominal[1],
          TSetRoomConst=systemParameters.TSetZone_nominal[1]) annotation (
            choicesAllMatching=true, Placement(transformation(extent={{-100,82},
                  {-80,102}})));
      equation
        connect(sigBusGen, generation.sigBusGen) annotation (Line(
            points={{-62,64},{-0.3,64},{-0.3,35.28}},
            color={255,204,51},
            thickness=0.5), Text(
            string="%first",
            index=-1,
            extent={{-3,6},{-3,6}},
            horizontalAlignment=TextAlignment.Right));
        connect(const.y, sigBusGen.hp_bus.iceFacMea) annotation (Line(points={{-129,64},
                {-94,64},{-94,64},{-62,64}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const1.y, sigBusGen.hr_on) annotation (Line(points={{-129,32},{-96,32},
                {-96,64},{-62,64}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(booleanConstant.y, sigBusGen.hp_bus.modeSet) annotation (Line(points={
                {-127,2},{-98,2},{-98,0},{-62,0},{-62,64}}, color={255,0,255}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(const2.y, sigBusGen.hp_bus.nSet) annotation (Line(points={{-127,-34},{
                -62,-34},{-62,64}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(ramp.y, sigBusGen.weaBus.TDryBul) annotation (Line(points={{-129,-70},
                {-62,-70},{-62,64}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(ramp.y, sigBusGen.hp_bus.TOdaMea) annotation (Line(points={{-129,-70},
                {-62,-70},{-62,64}}, color={0,0,127}), Text(
            string="%second",
            index=1,
            extent={{6,3},{6,3}},
            horizontalAlignment=TextAlignment.Left));
        connect(generation.portGen_in, boundary.ports[1:1]) annotation (Line(points={{
                34,14.4},{62,14.4},{62,10},{72,10}}, color={0,127,255}));
        connect(generation.portGen_out, bou1.ports[1:1]) annotation (Line(points={{34,
                28.8},{62,28.8},{62,54},{72,54}}, color={0,127,255}));
        connect(boundary.T_in, heatingCurve.TSet) annotation (Line(points={{94,6},{
                100,6},{100,-71},{5.1,-71}},
                                       color={0,0,127}));
        connect(heatingCurve.TOda, ramp.y) annotation (Line(points={{-20.2,-71},{-36,
                -71},{-36,-70},{-129,-70}},
                                       color={0,0,127}));
        connect(ramp.y, TOda) annotation (Line(points={{-129,-70},{-116,-70},{-116,
                -72},{-102,-72},{-102,-90},{62,-90},{62,-40},{110,-40}}, color={0,0,
                127}));
        connect(realExpression.y, QCon_flow) annotation (Line(points={{51,82},{88,82},
                {88,60},{110,60}}, color={0,0,127}));
        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end PartialGetHeatGenerationCurve;

      model GetHeatPumpCurveVCLib
        extends PartialGetHeatGenerationCurve(
          redeclare
            BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl
            bivalentHeatPumpControlDataDefinition,
          redeclare Examples.UseCaseAachen.AachenSystem systemParameters(
              QDHW_flow_nomial=0),            redeclare
            BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod generation(
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare package Medium_eva = IBPSA.Media.Air,
            use_pressure=false,
            redeclare
              BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
              heatPumpParameters,
            redeclare
              BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
              heatingRodParameters,
            redeclare model PerDataMainHP =
                AixLib.DataBase.HeatPump.PerformanceData.VCLibMap (refrigerant=
                    "Propane", flowsheet="VIPhaseSeparatorFlowsheet")),  ramp(
            height=35,
            duration=84400,
            offset=273.15 - 15,
            startTime=1000),
          realExpression(y=generation.heatPump.con.QFlow_in));
        annotation (experiment(StopTime=86400, __Dymola_Algorithm="Dassl"));
      end GetHeatPumpCurveVCLib;
    annotation (Documentation(info="<html>
<p>Note: The models in this package are used to scale the heat pump model from the IBPSA according to the heating curve in use. However, the model will be obsolete with the integration of the heat pump model into the IBPSA library. Hence, these functions will be deleted in future versions as well.</p>
</html>"));
    end HeatGeneration;

    package SupervisoryControl "Package with utils to enable supervisority control of a local control"
      extends BESMod.HugosProject.Utilities.Icons.ControlPackage;
      model SupervisoryControl

        parameter
          BESMod.HugosProject.Utilities.SupervisoryControl.Types.SupervisoryControlType
          ctrlType "Type of supervisory control";

        Modelica.Blocks.Interfaces.RealInput uSup if ctrlType == BESMod.HugosProject.Utilities.SupervisoryControl.Types.SupervisoryControlType.
           Internal                               "Input from supervisory control"
          annotation (Placement(transformation(extent={{-140,60},{-100,100}}),
              iconTransformation(extent={{-140,60},{-100,100}})));
        Modelica.Blocks.Interfaces.RealInput uLoc "Local control input"
          annotation (Placement(transformation(extent={{-140,-100},{-100,-60}}),
              iconTransformation(extent={{-140,-100},{-100,-60}})));
        Modelica.Blocks.Interfaces.BooleanInput activateInt if ctrlType ==
          BESMod.HugosProject.Utilities.SupervisoryControl.Types.SupervisoryControlType.Internal
          annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
        Modelica.Blocks.Interfaces.RealOutput y
                                               "Control output"
          annotation (Placement(transformation(extent={{100,-20},{140,20}})));
        Modelica.Blocks.Logical.Switch swi
          "Switch between external signal and direct feedthrough signal"
          annotation (Placement(transformation(extent={{0,-16},{32,16}})));
        Modelica.Blocks.Sources.BooleanExpression activateExt if ctrlType ==
          BESMod.HugosProject.Utilities.SupervisoryControl.Types.SupervisoryControlType.External
          "Block to activate use of external signal"
          annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
        Modelica.Blocks.Sources.RealExpression uExt if ctrlType == BESMod.HugosProject.Utilities.SupervisoryControl.Types.SupervisoryControlType.
           External
          "External input signal"
          annotation (Placement(transformation(extent={{-60,10},{-40,30}})));
        Modelica.Blocks.Sources.BooleanConstant deactivateAlways(final k=false)
       if ctrlType == BESMod.HugosProject.Utilities.SupervisoryControl.Types.SupervisoryControlType.Local
          "Block to activate use of external signal"
          annotation (Placement(transformation(extent={{-60,-40},{-40,-20}})));
        Modelica.Blocks.Sources.Constant uSupDeacticate(final k=0) if ctrlType
           == BESMod.HugosProject.Utilities.SupervisoryControl.Types.SupervisoryControlType.Local
          "Constant zero for deactivated sup control"
          annotation (Placement(transformation(extent={{-56,32},{-40,48}})));
      equation
        connect(uLoc, swi.u3) annotation (Line(points={{-120,-80},{-12,-80},{-12,-12.8},
                {-3.2,-12.8}}, color={0,0,127}));
        connect(swi.y, y)
          annotation (Line(points={{33.6,0},{120,0}}, color={0,0,127}));
        connect(uExt.y, swi.u1) annotation (Line(points={{-39,20},{-20,20},{-20,12.8},
                {-3.2,12.8}}, color={0,0,127}));
        connect(activateExt.y, swi.u2)
          annotation (Line(points={{-39,0},{-3.2,0}}, color={255,0,255}));
        connect(activateInt, swi.u2) annotation (Line(points={{-120,0},{-64,0},{-64,-12},
                {-30,-12},{-30,0},{-3.2,0}},color={255,0,255}));
        connect(deactivateAlways.y, swi.u2) annotation (Line(points={{-39,-30},{-24,-30},
                {-24,0},{-3.2,0}}, color={255,0,255}));
        connect(uSup, swi.u1) annotation (Line(points={{-120,80},{-12,80},{-12,12.8},{
                -3.2,12.8}}, color={0,0,127}));
        connect(uSupDeacticate.y, swi.u1) annotation (Line(points={{-39.2,40},{-20,40},
                {-20,12.8},{-3.2,12.8}}, color={0,0,127}));
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                                    Text(
                extent={{-102,-88},{102,-184}},
                lineColor={0,0,0},
                textString="%name%"),
              Rectangle(
                extent={{100,100},{-100,-100}},
                lineColor={28,108,200},
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid),
              Line(points={{-100,80},{-38,80}},
                color={0,0,127}),
              Line(points={{-100,0},{-40,0}},
                color={255,0,255}),
              Line(points={{-40,12},{-40,-12}},
                color={255,0,255}),
              Line(points={{12,0},{100,0}},
                color={0,0,127}),
              Line(points=DynamicSelect({{-38,80},{6,2}}, if swi.u2 then {{-38,80},{6,2}} else {{-38,-80},{6,2}}),
                color={0,0,127},
                thickness=1),
              Ellipse(lineColor={0,0,255},
                pattern=LinePattern.None,
                fillPattern=FillPattern.Solid,
                extent={{2,-8},{18,8}}),
              Line(points={{-100,-80},{-40,-80},{-40,-80}},
                color={0,0,127})}),                                    Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end SupervisoryControl;

      model SupervisoryControlExample
        extends Modelica.Icons.Example;
        SupervisoryControl locCtrl(ctrlType=BESMod.HugosProject.Utilities.SupervisoryControl.Types.SupervisoryControlType.Local)
          annotation (Placement(transformation(extent={{-18,-70},{14,-38}})));
        SupervisoryControl intCtrl(ctrlType=BESMod.HugosProject.Utilities.SupervisoryControl.Types.SupervisoryControlType.Internal)
          annotation (Placement(transformation(extent={{-18,-18},{14,14}})));
        SupervisoryControl extCtrl(
          ctrlType=BESMod.HugosProject.Utilities.SupervisoryControl.Types.SupervisoryControlType.External,
          activateExt(y=activateSupCtrl.y),
          uExt(y=pulseSup.y))
          annotation (Placement(transformation(extent={{-20,38},{12,70}})));

        Modelica.Blocks.Sources.Pulse pulseLoc(period=1)
          annotation (Placement(transformation(extent={{-100,-70},{-80,-50}})));
        Modelica.Blocks.Sources.Pulse pulseSup(period=2)
          annotation (Placement(transformation(extent={{-100,10},{-80,30}})));
        Modelica.Blocks.Sources.BooleanPulse activateSupCtrl(period=4)
          annotation (Placement(transformation(extent={{-100,-30},{-80,-10}})));
      equation
        connect(pulseLoc.y, locCtrl.uLoc) annotation (Line(points={{-79,-60},{-50,-60},
                {-50,-66.8},{-21.2,-66.8}}, color={0,0,127}));
        connect(pulseLoc.y, intCtrl.uLoc) annotation (Line(points={{-79,-60},{-76,-60},
                {-76,-12},{-21.2,-12},{-21.2,-14.8}}, color={0,0,127}));
        connect(pulseLoc.y, extCtrl.uLoc) annotation (Line(points={{-79,-60},{-76,-60},
                {-76,41.2},{-23.2,41.2}}, color={0,0,127}));
        connect(pulseSup.y, intCtrl.uSup) annotation (Line(points={{-79,20},{-52,20},
                {-52,10.8},{-21.2,10.8}}, color={0,0,127}));
        connect(activateSupCtrl.y, intCtrl.activateInt) annotation (Line(points={{-79,
                -20},{-52,-20},{-52,-2},{-21.2,-2}}, color={255,0,255}));
        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)),
          experiment(StopTime=10, __Dymola_Algorithm="Dassl"));
      end SupervisoryControlExample;

      package Types
        type SupervisoryControlType = enumeration(
            Local "Local control only",
            Internal "Modelica internal supervisory control",
            External "External supervisory control (e.g. FMU, python)")
              "Enum for supervisory control type";
      end Types;
    end SupervisoryControl;

    package Electrical
      model RealToElecCon
        "Transfer from real interface to electrical connector"
        parameter Boolean use_souLoa=true "= true if real interface for electrical load is activated";
        parameter Boolean use_souGen=true "= true if real interface for electrical generation is activated";

        Modelica.Blocks.Interfaces.RealInput PEleLoa if use_souLoa
                                                               "Electrical power of load"
          annotation (Placement(transformation(extent={{-140,20},{-100,60}})));
        BESMod.Systems.Electrical.Interfaces.InternalElectricalPin internalElectricalPin
          annotation (Placement(transformation(extent={{92,-8},{112,12}})));
        Modelica.Blocks.Interfaces.RealInput PEleGen if use_souGen
          "Electrical power of generation"
          annotation (Placement(transformation(extent={{-140,-60},{-100,-20}})));
        Modelica.Blocks.Sources.Constant NoFlowLoa(final k=0) if not use_souLoa
          annotation (Placement(transformation(extent={{-96,80},{-84,92}})));
        Modelica.Blocks.Sources.Constant NoFlowGen(final k=0) if not use_souGen
          annotation (Placement(transformation(extent={{-94,-86},{-82,-74}})));
        Modelica.Blocks.Routing.RealPassThrough realPassThroughLoa
          annotation (Placement(transformation(extent={{-68,30},{-48,50}})));
        Modelica.Blocks.Routing.RealPassThrough realPassThroughGen
          annotation (Placement(transformation(extent={{-68,-50},{-48,-30}})));
      equation

        realPassThroughLoa.y = internalElectricalPin.PElecLoa;
        realPassThroughGen.y = internalElectricalPin.PElecGen;

        connect(NoFlowLoa.y, realPassThroughLoa.u) annotation (Line(points={{-83.4,86},
                {-78,86},{-78,40},{-70,40}}, color={0,0,127}));
        connect(PEleLoa, realPassThroughLoa.u)
          annotation (Line(points={{-120,40},{-70,40}}, color={0,0,127}));
        connect(realPassThroughGen.u, PEleGen)
          annotation (Line(points={{-70,-40},{-120,-40}}, color={0,0,127}));
        connect(NoFlowGen.y, realPassThroughGen.u) annotation (Line(points={{-81.4,-80},
                {-76,-80},{-76,-40},{-70,-40}}, color={0,0,127}));
          annotation (Line(points={{-120,40},{-74,40}}, color={0,0,127}),
                      Line(points={{-120,-40},{-74,-40}}, color={0,0,127}),
                    Icon(coordinateSystem(preserveAspectRatio=false), graphics={Line(
                points={{-86,0},{-1,0},{84,0}},
                color={0,140,72},
                thickness=1,
                smooth=Smooth.Bezier),
              Polygon(
                points={{66,14},{66,-14},{86,0},{66,14}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={0,140,72},
                fillPattern=FillPattern.Solid)}),                      Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end RealToElecCon;

      model ElecConToReal "Transfer from electrical connector to Real interface"
        parameter Boolean reverse = false "Whether electrical flow is inversed or not";
        Modelica.Blocks.Interfaces.RealOutput PElecLoa "Electrical power"
          annotation (Placement(transformation(extent={{100,20},{140,60}})));
        BESMod.Systems.Electrical.Interfaces.InternalElectricalPin internalElectricalPin
          annotation (Placement(transformation(extent={{-108,-8},{-88,12}})));
        Modelica.Blocks.Interfaces.RealOutput PElecGen "Electrical power"
          annotation (Placement(transformation(extent={{100,-60},{140,-20}})));
      equation
          PElecLoa = internalElectricalPin.PElecLoa;
          PElecGen = internalElectricalPin.PElecGen;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={Line(
                points={{-86,0},{-1,0},{84,0}},
                color={0,0,0},
                thickness=1,
                smooth=Smooth.Bezier),
              Polygon(
                points={{66,14},{66,-14},{86,0},{66,14}},
                lineColor={0,0,0},
                lineThickness=1,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid)}),                      Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end ElecConToReal;

      model MultiSumElec "Sum of all electrical inputs"

        parameter Integer nPorts "Number of ports to sum up" annotation(Dialog(connectorSizing=true));

        BESMod.Systems.Electrical.Interfaces.InternalElectricalPin internalElectricalPinOut
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
        BESMod.Systems.Electrical.Interfaces.InternalElectricalPin internalElectricalPinIn[nPorts]
          annotation (Placement(transformation(extent={{-108,-8},{-88,12}})));

      equation
        internalElectricalPinOut.PElecGen = sum(internalElectricalPinIn.PElecGen);
        internalElectricalPinOut.PElecLoa = sum(internalElectricalPinIn.PElecLoa);

        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{100,100},{-100,-100}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Line(
                points={{52,82},{-76,82},{28,6},{-66,-76},{52,-76}},
                color={0,0,0},
                thickness=0.5)}),                                      Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end MultiSumElec;

      model ZeroLoad "Zero Load model to be used if system is disabled"
        BESMod.Systems.Electrical.Interfaces.InternalElectricalPin internalElectricalPin
          annotation (Placement(transformation(extent={{90,-10},{110,10}})));
      equation
        internalElectricalPin.PElecLoa = 0;
        internalElectricalPin.PElecGen = 0;
        annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                Rectangle(
                extent={{100,100},{-100,-100}},
                lineColor={0,0,0},
                lineThickness=0.5,
                fillColor={255,255,255},
                fillPattern=FillPattern.Solid), Text(
                extent={{-92,-52},{92,60}},
                lineColor={0,0,0},
                textString="0 W")}),                                   Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end ZeroLoad;

      model ConverterExample
        extends Modelica.Icons.Example;
        RealToElecCon realToElecConGen(use_souLoa=false)
          annotation (Placement(transformation(extent={{-32,-84},{14,-40}})));
        RealToElecCon realToElecConLoa(use_souGen=false)
          annotation (Placement(transformation(extent={{-34,-24},{12,20}})));
        RealToElecCon realToElecConBoth
          annotation (Placement(transformation(extent={{-34,30},{12,74}})));
        Modelica.Blocks.Sources.Sine sine(f=0.01)
          annotation (Placement(transformation(extent={{-106,50},{-86,70}})));
        Modelica.Blocks.Sources.Sine sine1(f=0.01, startTime=10)
          annotation (Placement(transformation(extent={{-102,14},{-82,34}})));
      equation
        connect(sine.y, realToElecConBoth.PEleLoa) annotation (Line(points={{-85,60},
                {-61.8,60},{-61.8,60.8},{-38.6,60.8}}, color={0,0,127}));
        connect(sine1.y, realToElecConBoth.PEleGen) annotation (Line(points={{-81,24},
                {-46,24},{-46,43.2},{-38.6,43.2}}, color={0,0,127}));
        connect(sine.y, realToElecConLoa.PEleLoa) annotation (Line(points={{-85,60},
                {-50,60},{-50,6.8},{-38.6,6.8}}, color={0,0,127}));
        connect(sine1.y, realToElecConGen.PEleGen) annotation (Line(points={{-81,24},
                {-52,24},{-52,-70.8},{-36.6,-70.8}}, color={0,0,127}));
        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)));
      end ConverterExample;
    end Electrical;
  end Utilities;

  package Examples
    extends Modelica.Icons.ExamplesPackage;
    package MyOwnHeatingRodEfficiencyStudy
        extends Modelica.Icons.ExamplesPackage;

      model BESModel
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              redeclare model PerDataMainHP =
                  AixLib.DataBase.HeatPump.PerformanceData.LookUpTable2D (
                    dataTable=AixLib.DataBase.HeatPump.EN255.Vitocal350AWI114()),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(genDesTyp=BESMod.Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentParallel,
                  TBiv=266.15),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters(eta_hr=parameterStudy.efficiceny_heating_rod),
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare package Medium_eva = AixLib.Media.Air),
            redeclare
              BESMod.Systems.Hydraulical.Control.Biv_PI_ConFlow_HPSController
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl
                bivalentControlData),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.DistributionTwoStorageParallel
              distribution(redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.DefaultStorage
                bufParameters(dTLoadingHC1=10), redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.DefaultStorage
                dhwParameters(dTLoadingHC1=10)),
            redeclare
              BESMod.Systems.Hydraulical.Transfer.RadiatorTransferSystem
              transfer(redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters, redeclare
                BESMod.Systems.RecordsCollection.Movers.DefaultMover pumpData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(redeclare
              BESMod.Systems.RecordsCollection.Movers.DefaultMover pumpData,
              redeclare BESMod.Systems.Demand.DHW.TappingProfiles.PassThrough
              calcmFlow),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare
            BESMod.HugosProject.Examples.MyOwnHeatingRodEfficiencyStudy.SimpleStudyOfHeatingRodEfficiency
            parameterStudy,
          redeclare BESMod.Systems.RecordsCollection.ExampleSystemParameters
            systemParameters(
            THydSup_nominal={328.15},
            use_ventilation=false,
            use_elecHeating=false));

        annotation (experiment(
            StopTime=86400,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BESModel;

      record SimpleStudyOfHeatingRodEfficiency
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;

        parameter Real efficiceny_heating_rod = 1 annotation(Evaluate=false);

      end SimpleStudyOfHeatingRodEfficiency;
    end MyOwnHeatingRodEfficiencyStudy;

    package SolarThermalSystem
      extends Modelica.Icons.ExamplesPackage;
      model SolarThermalHPS "HPS which is supported by a solar thermal collector"
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem
            hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.SolarThermalBivHP
              generation(
              redeclare model PerDataMainHP =
                  AixLib.DataBase.HeatPump.PerformanceData.VCLibMap (refrigerant=
                      "Propane", flowsheet="VIPhaseSeparatorFlowsheet"),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(genDesTyp=BESMod.Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentParallel),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare
                BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.HugosProject.Examples.SolarThermalSystem.SolarCollector
                solarThermalParas(
                final A=parameterStudy.A,
                final eta_zero=parameterStudy.eta_zero,
                final c1=parameterStudy.c1,
                final c2=parameterStudy.c2),
              redeclare
                BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpSTData),
            redeclare
              BESMod.Systems.Hydraulical.Control.Biv_PI_ConFlow_HPSController
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl
                bivalentControlData),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.CombiStorage
              distribution(redeclare
                BESMod.HugosProject.Examples.SolarThermalSystem.CombiStorage
                parameters(
                V=parameterStudy.V,
                use_HC1=true,
                dTLoadingHC1=5,
                use_HC2=true,
                dTLoadingHC2=5)),
            redeclare
              BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare
                BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            final use_pressure=false,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare SolarThermalSystemParameters systemParameters,
          redeclare SolarThermalDesignOptimization parameterStudy(
            A=11,
            V=1.3,
            eta_zero=0.72,
            c1=2.8312,
            c2=0.00119),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare BESMod.Systems.Ventilation.NoVentilation
            ventilation);

        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end SolarThermalHPS;

      record SolarThermalSystemParameters
        extends BESMod.HugosProject.Examples.UseCaseAachen.AachenSystem;

      end SolarThermalSystemParameters;

      record SolarThermalDesignOptimization
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;

        parameter Modelica.Units.SI.Area A=15 "Area of solar collector";
        parameter Modelica.Units.SI.Volume V=0.5 "Volume of storage";

        parameter Modelica.Units.SI.Efficiency eta_zero=0.75
          "Conversion factor/Efficiency at Q = 0";
        parameter Real c1=2                   "Loss coefficient c1";
        parameter Real c2=0.005                 "Loss coefficient c2";
      annotation(Evaluate=false);
      end SolarThermalDesignOptimization;

      record CombiStorage
        extends
          BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.BufferStorageBaseDataDefinition(
          V(displayUnit="l") = 0.5,
          nLayer=20,
          dTLoadingHC2=5,
          redeclare AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC2,
          redeclare AixLib.DataBase.Pipes.Copper.Copper_12x1 pipeHC1);
      end CombiStorage;

      record SolarCollector "For BA"
        extends
          BESMod.Systems.Hydraulical.Generation.RecordsCollection.SolarThermalBaseDataDefinition(
          GMax=1000,
          dTMax=30,
          spacing(displayUnit="mm") = 0.02,
          dPipe(displayUnit="mm") = 0.012);

      end SolarCollector;

      model SolarThermalHPSBuildingsLib
        "HPS which is supported by a solar thermal collector"
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem
            hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.SolarThermalBivHPBuiLib
              generation(
              redeclare model PerDataMainHP =
                  AixLib.DataBase.HeatPump.PerformanceData.VCLibMap (refrigerant=
                      "Propane", flowsheet="VIPhaseSeparatorFlowsheet"),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(genDesTyp=BESMod.Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentParallel),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare
                BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.HugosProject.Examples.SolarThermalSystem.SolarCollector
                solarThermalParas(
                final A=parameterStudy.A,
                final eta_zero=parameterStudy.eta_zero,
                final c1=parameterStudy.c1,
                final c2=parameterStudy.c2),
              redeclare
                BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpSTData),
            redeclare
              BESMod.Systems.Hydraulical.Control.Biv_PI_ConFlow_HPSController
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl
                bivalentControlData),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.CombiStorage
              distribution(redeclare
                BESMod.HugosProject.Examples.SolarThermalSystem.CombiStorage
                parameters(
                V=parameterStudy.V,
                use_HC1=true,
                dTLoadingHC1=5,
                use_HC2=true,
                dTLoadingHC2=5)),
            redeclare
              BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare
                BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            final use_pressure=false,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare SolarThermalSystemParameters systemParameters,
          redeclare SolarThermalDesignOptimization parameterStudy(
            A=11,
            V=1.3,
            eta_zero=0.72,
            c1=2.8312,
            c2=0.00119),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare BESMod.Systems.Ventilation.NoVentilation
            ventilation);

        annotation (Icon(graphics,
                         coordinateSystem(preserveAspectRatio=false)), Diagram(graphics,
              coordinateSystem(preserveAspectRatio=false)),
          experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end SolarThermalHPSBuildingsLib;
    end SolarThermalSystem;

    package UseCaseAachen "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare package Medium_eva = AixLib.Media.Air,
              use_pressure=true,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(
                genDesTyp=BESMod.Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentPartParallel,
                TBiv=parameterStudy.TBiv,
                scalingFactor=hydraulic.generation.heatPumpParameters.QPri_flow_nominal
                    /parameterStudy.QHP_flow_biv,
                useAirSource=true,
                dpCon_nominal=0,
                dpEva_nominal=0,
                use_refIne=false,
                refIneFre_constant=0),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare model PerDataMainHP =
                  AixLib.DataBase.HeatPump.PerformanceData.VCLibMap (
                  QCon_flow_nominal=hydraulic.generation.heatPumpParameters.QPri_flow_nominal,
                  refrigerant="Propane",
                  flowsheet="VIPhaseSeparatorFlowsheet")),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.DistributionTwoStorageParallel
              distribution(redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.DefaultStorage
                bufParameters(VPerQ_flow=parameterStudy.VPerQFlow, dTLoadingHC1=
                   0), redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.DefaultStorage
                dhwParameters(dTLoadingHC1=10)),
            redeclare
              BESMod.Systems.Hydraulical.Transfer.RadiatorTransferSystem
              transfer(redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters, redeclare
                BESMod.Systems.RecordsCollection.Movers.DefaultMover pumpData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare AachenSystem systemParameters(use_ventilation=true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem
        extends
          BESMod.Systems.RecordsCollection.SystemParametersBaseDataDefinition(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem;
    end UseCaseAachen;

    package UseCaseAachenTimeBased "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;

      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              redeclare model PerDataMainHP =
                  AixLib.DataBase.HeatPump.PerformanceData.VCLibMap,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(genDesTyp=BESMod.Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentPartParallel),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare package Medium_eva = AixLib.Media.Air),
            redeclare
              BESMod.Systems.Hydraulical.Control.ConstHys_PI_ConOut_HPSController
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl
                bivalentControlData(
                dTHysBui=parameterStudy.dTHysBuf,
                dTHysDHW=parameterStudy.dTHysDHW,
                dtHeaRodBui=parameterStudy.dt_hrBuf,
                dtHeaRodDHW=parameterStudy.dt_hrDHW),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.DistributionTwoStorageParallel
              distribution(redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.DefaultStorage
                bufParameters(dTLoadingHC1=0), redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.DefaultStorage
                dhwParameters(dTLoadingHC1=10)),
            redeclare
              BESMod.Systems.Hydraulical.Transfer.RadiatorTransferSystem
              transfer(redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters, redeclare
                BESMod.Systems.RecordsCollection.Movers.DefaultMover pumpData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(redeclare
              BESMod.Systems.RecordsCollection.Movers.DefaultMover pumpData,
              redeclare BESMod.Systems.Demand.DHW.TappingProfiles.PassThrough
              calcmFlow),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare
            BESMod.HugosProject.Examples.UseCaseAachenTimeBased.ParametersToChange
            parameterStudy,
          redeclare BESMod.HugosProject.Examples.UseCaseAachen.AachenSystem
            systemParameters) annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange "parameter study BA Andre Liang"
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Time dt_hrDHW=60*30 annotation (Evaluate=false);
        parameter Modelica.Units.SI.Time dt_hrBuf=60*30 annotation (Evaluate=false);
        parameter Modelica.Units.SI.TemperatureDifference dTHysDHW=10
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.TemperatureDifference dTHysBuf=10
          annotation (Evaluate=false);
      end ParametersToChange;
    end UseCaseAachenTimeBased;

    package BAUSimStudy
    extends Modelica.Icons.ExamplesPackage;
      partial model PartialCase
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare package Medium_eva = AixLib.Media.Air,
              use_pressure=true,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(
                genDesTyp=BESMod.Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentPartParallel,
                TBiv=TBiv,
                scalingFactor=hydraulic.generation.heatPumpParameters.QPri_flow_nominal
                    /5000,
                useAirSource=true,
                dpCon_nominal=0,
                dpEva_nominal=0,
                use_refIne=false,
                refIneFre_constant=0),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare model PerDataMainHP =
                  AixLib.DataBase.HeatPump.PerformanceData.VCLibMap (
                  QCon_flow_nominal=hydraulic.generation.heatPumpParameters.QPri_flow_nominal,
                  refrigerant="Propane",
                  flowsheet="VIPhaseSeparatorFlowsheet")),
            redeclare
              BESMod.Systems.Hydraulical.Control.ConstHys_PI_ConOut_HPSController
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl
                bivalentControlData(TBiv=TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedDirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              discretizationStepsDWHStoHR=0,
              discretizationStepsBufStoHR=0,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                bufParameters(
                dTLoadingHC1=0,
                use_QLos=true,
                QLosPerDay=1.5,
                T_m=338.15),
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters(
                dTLoadingHC1=10,
                use_QLos=true,
                QLosPerDay=1.5,
                T_m=65 + 273.15),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=false,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare BESParameters systemParameters,
          redeclare BESMod.Systems.RecordsCollection.ParameterStudy.NoStudy
            parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        parameter Modelica.Units.SI.Temperature TBiv=271.15
          "Nominal bivalence temperature. = TOda_nominal for monovalent systems.";
        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end PartialCase;

      record BESParameters
        extends
          BESMod.Systems.RecordsCollection.SystemParametersBaseDataDefinition(
          use_elecHeating=false,
          final filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/TRY2015_522361130393_Jahr_City_Potsdam.mos"),
          final TAmbVen=min(TSetZone_nominal),
          final TAmbHyd=min(TSetZone_nominal),
          final TDHWWaterCold=283.15,
          final TSetDHW=328.15,
          final TVenSup_nominal=TSetZone_nominal,
          final TSetZone_nominal=fill(293.15, nZones),
          final nZones=1,
          final use_ventilation=false);

      end BESParameters;

      package Buildings
        record Case_1_standard "Case_1_standard_SingleDwelling"
          extends AixLib.DataBase.ThermalZones.ZoneBaseRecord(
            T_start = 293.15,
            withAirCap = true,
            VAir = 349.15,
            AZone = 139.66,
            hRad = 4.999999999999999,
            lat = 0.88645272708792,
            nOrientations = 4,
            AWin = {5.481655, 5.481655, 5.481655, 5.481655},
            ATransparent = {5.481655, 5.481655, 5.481655, 5.481655},
            hConWin = 2.7000000000000006,
            RWin = 0.008534961482565809,
            gWin = 0.75,
            UWin= 2.8010185522008,
            ratioWinConRad = 0.02,
            AExt = {47.69389, 47.69389, 47.69389, 47.69389},
            hConExt = 2.7000000000000006,
            nExt = 1,
            RExt = {0.0003600881127135614},
            RExtRem = 0.0018061646320222994,
            CExt = {67578368.85812245},
            AInt = 430.6183333333333,
            hConInt = 2.375675675675676,
            nInt = 1,
            RInt = {0.00015864610234473541},
            CInt = {66322853.1531042},
            AFloor = 77.008524,
            hConFloor = 1.7,
            nFloor = 1,
            RFloor = {0.001711324798876134},
            RFloorRem =  0.006462275327484408,
            CFloor = {4991626.335096046},
            ARoof = 81.7011,
            hConRoof = 1.7,
            nRoof = 1,
            RRoof = {0.0014751297291351348},
            RRoofRem = 0.005282800406622357,
            CRoof = {5823412.447090039},
            nOrientationsRoof = 2,
            tiltRoof = {0.6108652381980153, 0.6108652381980153},
            aziRoof = {3.141592653589793, -1.5707963267948966},
            wfRoof = {0.5, 0.5},
            aRoof = 0.5,
            aExt = 0.5,
            TSoil = 286.15,
            hConWallOut = 20.0,
            hRadWall = 5.0,
            hConWinOut = 20.0,
            hConRoofOut = 20.0,
            hRadRoof = 5.0,
            tiltExtWalls = {1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966},
            aziExtWalls = {0.0, 1.5707963267948966, -1.5707963267948966, 3.141592653589793},
            wfWall = {0.25, 0.25, 0.25, 0.25},
            wfWin = {0.25, 0.25, 0.25, 0.25},
            wfGro = 0.0,
            specificPeople = 0.02,
            internalGainsMoistureNoPeople = 0.5,
            fixedHeatFlowRatePersons = 70,
            activityDegree = 1.2,
            ratioConvectiveHeatPeople = 0.5,
            internalGainsMachinesSpecific = 2.0,
            ratioConvectiveHeatMachines = 0.75,
            lightingPowerSpecific = 7.0,
            ratioConvectiveHeatLighting = 0.5,
            useConstantACHrate = false,
            baseACH = 0.2,
            maxUserACH = 1.0,
            maxOverheatingACH = {3.0, 2.0},
            maxSummerACH = {1.0, 283.15, 290.15},
            winterReduction = {0.2, 273.15, 283.15},
            maxIrr = {99.99999999999999, 99.99999999999999, 99.99999999999999, 99.99999999999999},
            shadingFactor = {1.0, 1.0, 1.0, 1.0},
            withAHU = false,
            minAHU = 0.3,
            maxAHU = 0.6,
            hHeat = 17426.160522476486,
            lHeat = 0,
            KRHeat = 10000,
            TNHeat = 1,
            HeaterOn = false,
            hCool = 0,
            lCool = -17426.160522476486,
            KRCool = 10000,
            TNCool = 1,
            CoolerOn = false,
            withIdealThresholds = false,
            TThresholdHeater = 288.15,
            TThresholdCooler = 295.15);
        end Case_1_standard;

        record Case_1_retrofit "Case_1_retrofit_SingleDwelling"
          extends AixLib.DataBase.ThermalZones.ZoneBaseRecord(
            T_start = 293.15,
            withAirCap = true,
            VAir = 349.15,
            AZone = 139.66,
            hRad = 4.999999999999999,
            lat = 0.88645272708792,
            nOrientations = 4,
            AWin = {5.481655, 5.481655, 5.481655, 5.481655},
            ATransparent = {5.481655, 5.481655, 5.481655, 5.481655},
            hConWin = 2.7000000000000006,
            RWin = 0.020751032306848938,
            gWin = 0.6,
            UWin= 1.6003325366309886,
            ratioWinConRad = 0.02,
            AExt = {47.69389, 47.69389, 47.69389, 47.69389},
            hConExt = 2.7000000000000006,
            nExt = 1,
            RExt = {0.0006701540459780769},
            RExtRem = 0.020216675755004247,
            CExt = {100421538.7287612},
            AInt = 430.6183333333333,
            hConInt = 2.375675675675676,
            nInt = 1,
            RInt = {0.00015864610234473541},
            CInt = {66322853.1531042},
            AFloor = 77.008524,
            hConFloor = 1.7,
            nFloor = 1,
            RFloor = {0.0017094806036435206},
            RFloorRem =  0.03639477492651585,
            CFloor = {3229375.807286302},
            ARoof = 81.7011,
            hConRoof = 1.7,
            nRoof = 1,
            RRoof = {0.0006642141886533201},
            RRoofRem = 0.031467177775802616,
            CRoof = {1563249.5296817843},
            nOrientationsRoof = 2,
            tiltRoof = {0.6108652381980153, 0.6108652381980153},
            aziRoof = {3.141592653589793, -1.5707963267948966},
            wfRoof = {0.5, 0.5},
            aRoof = 0.5,
            aExt = 0.5,
            TSoil = 286.15,
            hConWallOut = 20.0,
            hRadWall = 5.0,
            hConWinOut = 20.0,
            hConRoofOut = 20.0,
            hRadRoof = 5.0,
            tiltExtWalls = {1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966},
            aziExtWalls = {0.0, 1.5707963267948966, -1.5707963267948966, 3.141592653589793},
            wfWall = {0.25, 0.25, 0.25, 0.25},
            wfWin = {0.25, 0.25, 0.25, 0.25},
            wfGro = 0.0,
            specificPeople = 0.02,
            internalGainsMoistureNoPeople = 0.5,
            fixedHeatFlowRatePersons = 70,
            activityDegree = 1.2,
            ratioConvectiveHeatPeople = 0.5,
            internalGainsMachinesSpecific = 2.0,
            ratioConvectiveHeatMachines = 0.75,
            lightingPowerSpecific = 7.0,
            ratioConvectiveHeatLighting = 0.5,
            useConstantACHrate = false,
            baseACH = 0.2,
            maxUserACH = 1.0,
            maxOverheatingACH = {3.0, 2.0},
            maxSummerACH = {1.0, 283.15, 290.15},
            winterReduction = {0.2, 273.15, 283.15},
            maxIrr = {99.99999999999999, 99.99999999999999, 99.99999999999999, 99.99999999999999},
            shadingFactor = {1.0, 1.0, 1.0, 1.0},
            withAHU = false,
            minAHU = 0.3,
            maxAHU = 0.6,
            hHeat = 4473.482346425267,
            lHeat = 0,
            KRHeat = 10000,
            TNHeat = 1,
            HeaterOn = false,
            hCool = 0,
            lCool = -4473.482346425267,
            KRCool = 10000,
            TNCool = 1,
            CoolerOn = false,
            withIdealThresholds = false,
            TThresholdHeater = 288.15,
            TThresholdCooler = 295.15);
        end Case_1_retrofit;

        record Case_2_standard "Case_2_standard_SingleDwelling"
          extends AixLib.DataBase.ThermalZones.ZoneBaseRecord(
            T_start = 293.15,
            withAirCap = true,
            VAir = 390.625,
            AZone = 156.25,
            hRad = 5.000000000000001,
            lat = 0.88645272708792,
            nOrientations = 4,
            AWin = {4.8828125, 4.8828125, 4.8828125, 4.8828125},
            ATransparent = {4.8828125, 4.8828125, 4.8828125, 4.8828125},
            hConWin = 2.7,
            RWin = 0.003202976744186046,
            gWin = 0.75,
            UWin= 4.302402640435568,
            ratioWinConRad = 0.02,
            AExt = {28.828125, 28.828125, 28.828125, 28.828125},
            hConExt = 2.7,
            nExt = 1,
            RExt = {0.0015859365764160764},
            RExtRem = 0.008018328847345654,
            CExt = {27308150.250833534},
            AInt = 481.7708333333333,
            hConInt = 2.375675675675676,
            nInt = 1,
            RInt = {0.00013015347323843435},
            CInt = {53342685.29149853},
            AFloor = 60.3125,
            hConFloor = 1.7000000000000002,
            nFloor = 1,
            RFloor = {0.0019728513255291387},
            RFloorRem =  0.02008642858073828,
            CFloor = {7138683.274600956},
            ARoof = 72.9171875,
            hConRoof = 1.7,
            nRoof = 1,
            RRoof = {0.0006832497704212157},
            RRoofRem = 0.024123570122556226,
            CRoof = {1365260.5804523209},
            nOrientationsRoof = 2,
            tiltRoof = {0.6108652381980153, 0.6108652381980153},
            aziRoof = {3.141592653589793, -1.5707963267948966},
            wfRoof = {0.5, 0.5},
            aRoof = 0.5,
            aExt = 0.5,
            TSoil = 286.15,
            hConWallOut = 20.0,
            hRadWall = 5.0,
            hConWinOut = 20.0,
            hConRoofOut = 20.0,
            hRadRoof = 5.0,
            tiltExtWalls = {1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966},
            aziExtWalls = {0.0, 1.5707963267948966, -1.5707963267948966, 3.141592653589793},
            wfWall = {0.25, 0.25, 0.25, 0.25},
            wfWin = {0.25, 0.25, 0.25, 0.25},
            wfGro = 0.0,
            specificPeople = 0.02,
            internalGainsMoistureNoPeople = 0.5,
            fixedHeatFlowRatePersons = 70,
            activityDegree = 1.2,
            ratioConvectiveHeatPeople = 0.5,
            internalGainsMachinesSpecific = 2.0,
            ratioConvectiveHeatMachines = 0.75,
            lightingPowerSpecific = 7.0,
            ratioConvectiveHeatLighting = 0.5,
            useConstantACHrate = false,
            baseACH = 0.2,
            maxUserACH = 1.0,
            maxOverheatingACH = {3.0, 2.0},
            maxSummerACH = {1.0, 283.15, 290.15},
            winterReduction = {0.2, 273.15, 283.15},
            maxIrr = {100.0, 100.0, 100.0, 100.0},
            shadingFactor = {1.0, 1.0, 1.0, 1.0},
            withAHU = false,
            minAHU = 0.3,
            maxAHU = 0.6,
            hHeat = 7900.6642834489085,
            lHeat = 0,
            KRHeat = 10000,
            TNHeat = 1,
            HeaterOn = false,
            hCool = 0,
            lCool = -7900.6642834489085,
            KRCool = 10000,
            TNCool = 1,
            CoolerOn = false,
            withIdealThresholds = false,
            TThresholdHeater = 288.15,
            TThresholdCooler = 295.15);
        end Case_2_standard;

        record Case_2_retrofit "Case_2_retrofit_SingleDwelling"
          extends AixLib.DataBase.ThermalZones.ZoneBaseRecord(
            T_start = 293.15,
            withAirCap = true,
            VAir = 390.625,
            AZone = 156.25,
            hRad = 5.000000000000001,
            lat = 0.88645272708792,
            nOrientations = 4,
            AWin = {4.8828125, 4.8828125, 4.8828125, 4.8828125},
            ATransparent = {4.8828125, 4.8828125, 4.8828125, 4.8828125},
            hConWin = 2.7,
            RWin = 0.03068061538461538,
            gWin = 0.6,
            UWin= 1.3002195175808904,
            ratioWinConRad = 0.02,
            AExt = {28.828125, 28.828125, 28.828125, 28.828125},
            hConExt = 2.7,
            nExt = 1,
            RExt = {0.002635720568811437},
            RExtRem = 0.0391791526753142,
            CExt = {34205984.307940625},
            AInt = 481.7708333333333,
            hConInt = 2.375675675675676,
            nInt = 1,
            RInt = {0.00013015347323843435},
            CInt = {53342685.29149853},
            AFloor = 60.3125,
            hConFloor = 1.7000000000000002,
            nFloor = 1,
            RFloor = {0.007240378276725048},
            RFloorRem =  0.05271675507143726,
            CFloor = {4264027.844552503},
            ARoof = 72.9171875,
            hConRoof = 1.7,
            nRoof = 1,
            RRoof = {0.0007442282362931753},
            RRoofRem = 0.03525784696754283,
            CRoof = {1395180.2248083546},
            nOrientationsRoof = 2,
            tiltRoof = {0.6108652381980153, 0.6108652381980153},
            aziRoof = {3.141592653589793, -1.5707963267948966},
            wfRoof = {0.5, 0.5},
            aRoof = 0.5,
            aExt = 0.5,
            TSoil = 286.15,
            hConWallOut = 20.0,
            hRadWall = 5.0,
            hConWinOut = 20.0,
            hConRoofOut = 20.0,
            hRadRoof = 5.0,
            tiltExtWalls = {1.5707963267948966, 1.5707963267948966, 1.5707963267948966, 1.5707963267948966},
            aziExtWalls = {0.0, 1.5707963267948966, -1.5707963267948966, 3.141592653589793},
            wfWall = {0.25, 0.25, 0.25, 0.25},
            wfWin = {0.25, 0.25, 0.25, 0.25},
            wfGro = 0.0,
            specificPeople = 0.02,
            internalGainsMoistureNoPeople = 0.5,
            fixedHeatFlowRatePersons = 70,
            activityDegree = 1.2,
            ratioConvectiveHeatPeople = 0.5,
            internalGainsMachinesSpecific = 2.0,
            ratioConvectiveHeatMachines = 0.75,
            lightingPowerSpecific = 7.0,
            ratioConvectiveHeatLighting = 0.5,
            useConstantACHrate = false,
            baseACH = 0.2,
            maxUserACH = 1.0,
            maxOverheatingACH = {3.0, 2.0},
            maxSummerACH = {1.0, 283.15, 290.15},
            winterReduction = {0.2, 273.15, 283.15},
            maxIrr = {100.0, 100.0, 100.0, 100.0},
            shadingFactor = {1.0, 1.0, 1.0, 1.0},
            withAHU = false,
            minAHU = 0.3,
            maxAHU = 0.6,
            hHeat = 3362.8545215039794,
            lHeat = 0,
            KRHeat = 10000,
            TNHeat = 1,
            HeaterOn = false,
            hCool = 0,
            lCool = -3362.8545215039794,
            KRCool = 10000,
            TNCool = 1,
            CoolerOn = false,
            withIdealThresholds = false,
            TThresholdHeater = 288.15,
            TThresholdCooler = 295.15);
        end Case_2_retrofit;
      end Buildings;

      model Case1Standard
        extends PartialCase(building(redeclare Buildings.Case_1_standard oneZoneParam),
        systemParameters(QBui_flow_nominal={16308.1}, TOda_nominal=263.15, THydSup_nominal={328.15}));
        annotation (experiment(
            StopTime=86400,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end Case1Standard;
    end BAUSimStudy;

    package UseCaseModelicaConferencePaper "The use cases described in the BESMod publication"
      extends Modelica.Icons.ExamplesPackage;
      partial model PartialModelicaConferenceUseCase
        "Partial model to be extended to replace single subsystems"
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.ElectricalSystem electrical(
            redeclare
              BESMod.Systems.Electrical.Distribution.BatterySystemSimple
              distribution(redeclare
                BuildingSystems.Technologies.ElectricalStorages.Data.LithiumIon.LithiumIonTeslaPowerwall1
                batteryParameters),
            redeclare BESMod.Systems.Electrical.Generation.PVSystemMultiSub
              generation(
              redeclare model CellTemperature =
                  AixLib.Electrical.PVSystem.BaseClasses.CellTemperatureMountingContactToGround,
              redeclare AixLib.DataBase.SolarElectric.SchuecoSPV170SME1
                pVParameters,
              lat=weaDat.lat,
              lon=weaDat.lon,
              alt=weaDat.alt,
              timZon=3600,
              ARoof=building.ARoo/2),
            redeclare BESMod.Systems.Electrical.Transfer.NoElectricalTransfer
              transfer,
            redeclare BESMod.Systems.Electrical.Control.NoControl control),
          redeclare BESMod.Systems.Control.DHWSuperheating control(TSetDHW=
                systemParameters.TSetDHW),
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              dTTra_nominal={10},
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare package Medium_eva = AixLib.Media.Air,
              use_pressure=false,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(
                genDesTyp=BESMod.Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentPartParallel,
                TBiv=271.15,
                scalingFactor=scalingFactorHP,
                useAirSource=true,
                dpCon_nominal=0,
                dpEva_nominal=0,
                use_refIne=false,
                refIneFre_constant=0),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare model PerDataMainHP =
                  AixLib.DataBase.HeatPump.PerformanceData.LookUpTable2D (
                    dataTable=AixLib.DataBase.HeatPump.EN255.Vitocal350AWI114())),
            redeclare
              BESMod.Systems.Hydraulical.Control.ConstHys_PI_ConOut_HPSController
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl
                bivalentControlData(dTOffSetHeatCurve=8),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              supCtrlTypeDHWSet=BESMod.Utilities.SupervisoryControl.Types.SupervisoryControlType.Internal),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.DistributionTwoStorageParallel
              distribution(redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.DefaultStorage
                bufParameters(dTLoadingHC1=0), redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.SimpleStorage.DefaultStorage
                dhwParameters(dTLoadingHC1=10)),
            redeclare
              BESMod.Systems.Hydraulical.Transfer.RadiatorTransferSystem
              transfer(
              dTTra_nominal=fill(10, hydraulic.transfer.nParallelDem),
              f_design=fill(1.2, hydraulic.transfer.nParallelDem),
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            use_pressure=false,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Examples.UseCaseModelicaConferencePaper.BESModSystemParas
            systemParameters(use_elecHeating=false),
          redeclare BESMod.Systems.RecordsCollection.ParameterStudy.NoStudy
            parameterStudy,
          redeclare final package MediumDHW = IBPSA.Media.Water,
          redeclare final package MediumZone = IBPSA.Media.Air,
          redeclare final package MediumHyd = IBPSA.Media.Water,
          redeclare BESMod.Systems.Ventilation.VentilationSystem ventilation(
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
            redeclare
              BESMod.Systems.Ventilation.Generation.ControlledDomesticVentilation
              generation(
              m_flow_nominal={sum(building.AZone .* building.hZone .* 0.5 ./
                  3600 .* 1.225)},
              redeclare
                BESMod.Systems.Ventilation.Generation.RecordsCollection.DummyHeatExchangerRecovery
                parameters,
              redeclare
                IBPSA.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear
                threeWayValve_b,
              redeclare
                IBPSA.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear
                threeWayValve_a,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParas,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                fanData,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                tempSensorData),
            redeclare
              BESMod.Systems.Ventilation.Distribution.SimpleDistribution
              distribution(m_flow_nominal=building.AZone .* building.hZone .*
                  0.5 ./ 3600 .* 1.225),
            redeclare BESMod.Systems.Ventilation.Control.SummerPIDByPass
              control(use_bypass=false)));

       parameter Real scalingFactorHP=hydraulic.generation.heatPumpParameters.QPri_flow_nominal
            /13000                               "May be overwritten to avoid warnings and thus a fail in the CI";

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end PartialModelicaConferenceUseCase;

      record BESModSystemParas "Case studies system parameters"
        extends
          BESMod.Systems.RecordsCollection.SystemParametersBaseDataDefinition(
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=true,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end BESModSystemParas;

      model BuildingsLibraryRoom "System using the buildings libraries room model"
        extends PartialModelicaConferenceUseCase(
          redeclare
            BESMod.Systems.Demand.Building.BuildingsRoomCase600FF
            building(energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial),
          redeclare BESMod.Systems.UserProfiles.Case600Profiles
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          systemParameters(QBui_flow_nominal={2504}));

      annotation(__Dymola_Commands(file="modelica://BESMod/Resources/Scripts/Dymola/Examples/UseCaseModelicaConferencePaper/BuildingsLibraryRoom.mos"
              "Simulate and plot"));
      end BuildingsLibraryRoom;

      model TEASERBuilding
        extends PartialModelicaConferenceUseCase(
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
            AZone={185.9548},
            hZone={483.48248/185.9548},
            redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam,
            use_verboseEnergyBalance=false,
            energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          systemParameters(use_hydraulic=true, use_ventilation=true));
      initial equation
        building.thermalZone[1].ROM.extWallRC.thermCapExt[1].T = 293.15;
        building.thermalZone[1].ROM.floorRC.thermCapExt[1].T = 293.15;
        building.thermalZone[1].ROM.intWallRC.thermCapInt[1].T = 293.15;
        building.thermalZone[1].ROM.roofRC.thermCapExt[1].T = 293.15;

      annotation(__Dymola_Commands(file="modelica://BESMod/Resources/Scripts/Dymola/Examples/UseCaseModelicaConferencePaper/TEASERBuilding.mos"
              "Simulate and plot"));
      end TEASERBuilding;
    end UseCaseModelicaConferencePaper;

    package UseCaseAachenBis
      "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare package Medium_eva = AixLib.Media.Air,
              use_pressure=true,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(
                genDesTyp=BESMod.Systems.Hydraulical.Generation.Types.GenerationDesign.BivalentPartParallel,
                TBiv=parameterStudy.TBiv,
                scalingFactor=hydraulic.generation.heatPumpParameters.QPri_flow_nominal
                    /parameterStudy.QHP_flow_biv,
                useAirSource=false,
                dpCon_nominal=0,
                dpEva_nominal=0,
                use_refIne=false,
                refIneFre_constant=0),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare model PerDataMainHP =
                  AixLib.DataBase.HeatPump.PerformanceData.VCLibMap (
                  QCon_flow_nominal=hydraulic.generation.heatPumpParameters.QPri_flow_nominal,
                  refrigerant="Propane",
                  flowsheet="VIPhaseSeparatorFlowsheet")),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                bufParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=false,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare AachenSystem systemParameters(use_ventilation=true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem
        extends
          BESMod.Systems.RecordsCollection.SystemParametersBaseDataDefinition(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem;
    end UseCaseAachenBis;

    package UseCaseAachen_forTest
      "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              m_flow_nominal=Q_flow_nominal .* f_design ./ dTTra_nominal ./
                  4184,
              dp_nominal={heatPump.dpCon_nominal + dpHeaRod_nominal},
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                bufParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare AachenSystem systemParameters(use_ventilation=true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem
        extends
          BESMod.Systems.RecordsCollection.SystemParametersBaseDataDefinition(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem;
    end UseCaseAachen_forTest;

    package UseCaseAachen_forTest2
      "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare
              BESMod.Systems.Hydraulical.Control.ConstHys_PI_ConOut_HPSController
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData,
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              supCtrlTypeDHWSet=BESMod.Utilities.SupervisoryControl.Types.SupervisoryControlType.Local),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                bufParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare AachenSystem systemParameters(use_ventilation=true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem
        extends
          BESMod.Systems.RecordsCollection.SystemParametersBaseDataDefinition(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem;
    end UseCaseAachen_forTest2;

    package UseCaseAachen_forTest_nightLowering
      "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedDirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                bufParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering
        extends BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering;
    end UseCaseAachen_forTest_nightLowering;

    package UseCaseAachen_forTest_nightLowering_ramp
      "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                bufParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end UseCaseAachen_forTest_nightLowering_ramp;

    package UseCaseAachen_forTest_onOffWP
      "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare
              BESMod.Systems.Hydraulical.Control.ConstHys_OnOff_HPSControll
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl
                bivalentControlData,
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              supCtrlTypeDHWSet=BESMod.Utilities.SupervisoryControl.Types.SupervisoryControlType.Local),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                bufParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare AachenSystem systemParameters(use_ventilation=true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem
        extends
          BESMod.Systems.RecordsCollection.SystemParametersBaseDataDefinition(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem;
    end UseCaseAachen_forTest_onOffWP;

    package UseCaseAachen_TwoPumps_NoStorage
      "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod_TwoExits
              generation(
              nParallelDem=1,
              dTTra_nominal={if TDem_nominal[i] > 273.15 + 55 then 10 elseif
                  TDem_nominal[i] > 44.9 + 273.15 then 8 else 5 for i in 1:
                  nParallelDem},
              dp_nominal={heatPump.dpCon_nominal + dpHeaRod_nominal},
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Control.Control_GenWithTwoPorts
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Distribution.NoStorageForHeating
              distribution(
              dpBufHCSto_nominal=0,
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData),
            redeclare BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare AachenSystem systemParameters(use_ventilation=true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem
        extends
          BESMod.Systems.RecordsCollection.SystemParametersBaseDataDefinition(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem;
    end UseCaseAachen_TwoPumps_NoStorage;

    package UseCaseAachen_directHeating
      "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.Systems.Demand.Building.TEASERThermalZone building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare
              BESMod.Systems.Hydraulical.Control.ConstHys_PI_ConOut_HPSController
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData,
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              supCtrlTypeDHWSet=BESMod.Utilities.SupervisoryControl.Types.SupervisoryControlType.Local),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Distribution.DirectHeating
              distribution(
              dpBufHCSto_nominal=0,
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorageDirect
                bufParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorPressureBased_noPump
              transfer(redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition, redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare BESMod.Systems.UserProfiles.TEASERProfiles userProfiles(
              redeclare BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM
              DHWProfile),
          redeclare AachenSystem systemParameters(use_ventilation=true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem
        extends
          BESMod.Systems.RecordsCollection.SystemParametersBaseDataDefinition(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem;
    end UseCaseAachen_directHeating;

    package UseCaseAachen_forTest_nightLowering_ramp_injection
      "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                bufParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorPressureBased_injection
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumRadData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end UseCaseAachen_forTest_nightLowering_ramp_injection;

    package UseCaseAachen_forTest_nightLowering_ramp_injection_threeWayValve
      "This use case is the standard one described in the ECM publication by Vering and Wüllhorst"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                bufParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorPressureBased_injection_likeThreeWayValve
              transfer(
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumRadData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end UseCaseAachen_forTest_nightLowering_ramp_injection_threeWayValve;

    package ReferenceModel
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage_28x0_9
                bufParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage_28x0_9
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end ReferenceModel;

    package Lmod_Dir_Rad "Direct loading of heating storage"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedDirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorageDirect
                bufParameters,
              redeclare
                BESMod.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare BESMod.Systems.Hydraulical.Transfer.RadiatorPressureBased
              transfer(
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end Lmod_Dir_Rad;

    package DirectHeating_Injection3WV
      "No storage for the heating, injection with three way valve for the transfer"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Distribution.DirectHeating
              distribution(
              dpBufHCSto_nominal=0,
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorageDirect
                bufParameters),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorPressureBased_injection_likeThreeWayValve
              transfer(
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumRadData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end DirectHeating_Injection3WV;

    package DirectHeating_Injection3WVBis
      "No storage for the heating, injection with three way valve for the transfer (bis)"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Distribution.DirectHeating
              distribution(
              dpBufHCSto_nominal=0,
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorageDirect
                bufParameters),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorPressureBased_injection_likeThreeWayValveBis
              transfer(
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumRadData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end DirectHeating_Injection3WVBis;

    package DirectHeating "No storage for the heating"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Distribution.DirectHeating
              distribution(
              dpBufHCSto_nominal=0,
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage
                dhwParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorageDirect
                bufParameters),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorPressureBased_PICV_hydraulicSeparator
              transfer(
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end DirectHeating;

    package Indirect_Injection3WVBis
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage_28x0_9
                bufParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage_28x0_9
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorPressureBased_injection_likeThreeWayValveBis
              transfer(
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumRadData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end Indirect_Injection3WVBis;

    package Indirect_Injection3WVTer
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage_28x0_9
                bufParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage_28x0_9
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorPressureBased_injection_likeThreeWayValveTer
              transfer(
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumRadData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end Indirect_Injection3WVTer;

    package Ref_withPICVforTransfer
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage_28x0_9
                bufParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage_28x0_9
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare
              BESMod.HugosProject.Systems.Hydraulical.Transfer.RadiatorPressureBased_PICV
              transfer(
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.SteelRadiatorStandardPressureLossData
                transferDataBaseDefinition,
              redeclare
                BESMod.HugosProject.Systems.RecordsCollection.Movers.DefaultMover
                pumpData,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Transfer.RecordsCollection.RadiatorTransferData
                radParameters)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end Ref_withPICVforTransfer;

    package Ref_withUFHTransferSystem "THydSup_nominal=35°C"
      extends Modelica.Icons.ExamplesPackage;
      model BES
        extends BESMod.Systems.BaseClasses.PartialBuildingEnergySystem(
          redeclare BESMod.Systems.Electrical.DirectGridConnectionSystem
            electrical,
          redeclare BESMod.HugosProject.Systems.Demand.Building.TEASERThermalZone_nightLowering_ramp building(
              redeclare
              BESMod.Systems.Demand.Building.RecordsCollection.RefAachen
              oneZoneParam),
          redeclare BESMod.Systems.Control.NoControl control,
          redeclare BESMod.Systems.Hydraulical.HydraulicSystem hydraulic(
            redeclare
              BESMod.Systems.Hydraulical.Generation.HeatPumpAndHeatingRod
              generation(
              use_pressure=true,
              redeclare package Medium_eva = AixLib.Media.Air,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHP
                heatPumpParameters(useAirSource=true),
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodParameters,
              redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
                pumpData),
            redeclare BESMod.Systems.Hydraulical.Control.PartBiv_PI_ConOut_HPS
              control(
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.ThermostaticValveController.ThermostaticValvePIControlled
                thermostaticValveController,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.ThermostaticValveDataDefinition
                thermostaticValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Control.RecordsCollection.DefaultBivHPControl_Modifications
                bivalentControlData(TBiv=parameterStudy.TBiv),
              redeclare
                BESMod.Systems.Hydraulical.Control.Components.DHWSetControl.ConstTSet_DHW
                TSet_DHW,
              redeclare
                BESMod.Systems.Hydraulical.Control.RecordsCollection.DefaultSafetyControl
                safetyControl,
              TCutOff=parameterStudy.TCutOff,
              QHP_flow_cutOff=parameterStudy.QHP_flow_cutOff*hydraulic.generation.heatPumpParameters.scalingFactor),
            redeclare
              BESMod.Systems.Hydraulical.Distribution.TwoStoDetailedIndirectLoading
              distribution(
              QHRAftBuf_flow_nominal=0,
              use_heatingRodAfterBuffer=false,
              redeclare
                BESMod.Systems.RecordsCollection.TemperatureSensors.DefaultSensor
                temperatureSensorData,
              redeclare
                BESMod.Systems.RecordsCollection.Valves.DefaultThreeWayValve
                threeWayValveParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage_28x0_9
                bufParameters,
              redeclare
                BESMod.HugosProject.Systems.Hydraulical.Distribution.RecordsCollection.BufferStorage.DefaultDetailedStorage_28x0_9
                dhwParameters,
              redeclare
                BESMod.Systems.Hydraulical.Generation.RecordsCollection.DefaultHR
                heatingRodAftBufParameters),
            redeclare BESMod.Systems.Hydraulical.Transfer.UFHTransferSystem
              transfer(redeclare
                BESMod.Systems.Hydraulical.Transfer.RecordsCollection.DefaultUFHData
                UFHParameters, redeclare
                BESMod.Systems.RecordsCollection.Movers.DefaultMover pumpData)),
          redeclare BESMod.Systems.Demand.DHW.DHW DHW(
            use_pressure=true,
            redeclare BESMod.Systems.RecordsCollection.Movers.DefaultMover
              pumpData,
            redeclare
              BESMod.Systems.Demand.DHW.TappingProfiles.calcmFlowEquStatic
              calcmFlow),
          redeclare
            BESMod.HugosProject.Systems.UserProfiles.TEASERProfiles_nightLowering_ramp
            userProfiles(redeclare
              BESMod.Systems.Demand.DHW.RecordsCollection.ProfileM DHWProfile),
          redeclare AachenSystem_nightLowering_ramp systemParameters(
              THydSup_nominal={308.15},                              use_ventilation=
               true),
          redeclare ParametersToChange parameterStudy,
          redeclare final package MediumDHW = AixLib.Media.Water,
          redeclare final package MediumZone = AixLib.Media.Air,
          redeclare final package MediumHyd = AixLib.Media.Water,
          redeclare BESMod.Systems.Ventilation.NoVentilation ventilation);

        annotation (experiment(
            StopTime=31536000,
            Interval=600,
            __Dymola_Algorithm="Dassl"));
      end BES;

      record ParametersToChange
        extends
          BESMod.Systems.RecordsCollection.ParameterStudy.ParameterStudyBaseDefinition;
        // 1. Add parameters like this (WITH Evaluate=false)!
        // parameter Modelica.SIunits.Volume V=0.5 annotation(Evaluate=false);
        // 2. Overwrite the default parameter in the system simulation
        // via the graphical interface, resulting in e.g.
        // Distribution.parameters.V = parameterStudy.V

        parameter Modelica.Units.SI.Temperature TCutOff=263.15 "Cut off temperature"
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.Temperature TBiv=268.15 "Bivalence temperature"
          annotation (Evaluate=false);
        parameter Real VPerQFlow=23.5 "Litre of storage volume per kilowatt thermal power demand" annotation(Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_cutOff=3000
          annotation (Evaluate=false);
        parameter Modelica.Units.SI.HeatFlowRate QHP_flow_biv=4000
          annotation (Evaluate=false);
      end ParametersToChange;

      record AachenSystem_nightLowering_ramp
        extends
          BESMod.HugosProject.Systems.RecordsCollection.SystemParametersBaseDataDefinition_nightLowering_ramp(
          QDHW_flow_nomial=1000,
          use_elecHeating=false,
          nZones=1,
          filNamWea=Modelica.Utilities.Files.loadResource(
              "modelica://BESMod/Resources/WeatherData/TRY2015_507931060546_Jahr_City_Aachen_Normal.mos"),
          QBui_flow_nominal={10632.414942943078},
          use_ventilation=false,
          THydSup_nominal={328.15},
          TOda_nominal=265.35);

      end AachenSystem_nightLowering_ramp;
    end Ref_withUFHTransferSystem;
  end Examples;
end HugosProject;
