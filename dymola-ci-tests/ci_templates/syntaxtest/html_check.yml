include: 'utilities.yml'stages:    - HTML_Check    - create_html_whitelist    - open_PRvariables:    Praefix_Branch: correct_HTML_    Newbranch: $Praefix_Branch$CI_COMMIT_REF_NAMECorrect_check_HTML:    stage: HTML_Check    before_script:        - !reference [.clone_ci_templates, script]    script:        - python MoCITempGen/CITests/SyntaxTests/html_tidy_errors.py --s BESMod --correct-view --log  --filter-whitelist    artifacts:        paths:            - BESMod/HTML_correct_log.txt            - BESMod/HTML_error_log.txt        expire_in: 7h    except:        refs:            - external_pull_requests     only:        refs:            - /^correct_HTML_.*$/        variables:            - $CI_COMMIT_MESSAGE =~ /CI message from ebc-aixlib-bot. Push new files with corrected html Syntax ./Open_Pull_HTML_Request:    stage: open_PR    before_script:        - apt-get update -y && apt-get install zip unzip -y        - !reference [.clone_ci_templates, script]        - git config --global user.name "$GITLAB_USER_NAME"        - git config --global user.email "$GITLAB_USER_EMAIL"    script:        - python MoCITempGen/CITests/api_script/api_github.py --github-repo $Github_Repository --working-branch $CI_COMMIT_REF_NAME --github-token $GITHUB_API_TOKEN --create-pr --correct-html    except:        refs:            - external_pull_requests    only:        refs:            - /^correct_HTML_.*$/        variables:            - $CI_COMMIT_MESSAGE =~ /CI message from ebc-aixlib-bot. Push new files with corrected html Syntax ./HTML_PR_Checks:    stage: HTML_Check    before_script:        - !reference [.clone_ci_templates, script]    script:        - python MoCITempGen/CITests/SyntaxTests/html_tidy_errors.py --s BESMod --correct-view --log  --filter-whitelist    artifacts:        when: on_failure        paths:            - BESMod/HTML_correct_log.txt            - BESMod/HTML_error_log.txt        expire_in: 7h    only:        refs:            - external_pull_requests    except:        variables:            - $CI_COMMIT_MESSAGE  =~ /ci_show_ref/            - $CI_COMMIT_MESSAGE  =~ /ci_create_model_wh/            - $CI_COMMIT_MESSAGE  =~ /ci_create_html_wh/            - $CI_COMMIT_MESSAGE  =~ /ci_create_example_wh/            - $CI_COMMIT_MESSAGE  =~ /ci_simulate/            - $CI_COMMIT_MESSAGE  =~ /ci_check/            - $CI_COMMIT_MESSAGE  =~ /ci_regression_test/            - $CI_COMMIT_MESSAGE  =~ /ci_html/            - $CI_COMMIT_MESSAGE  =~ /ci_setting/            - $CI_COMMIT_MESSAGE  =~ /ci_style_check/            - $CI_COMMIT_MESSAGE  =~ /ci_trigger_ibpsa/            - $CI_COMMIT_MESSAGE  =~ /ci_merge_except/            - $CI_COMMIT_MESSAGE  =~ /ci_correct_html/            - $CI_COMMIT_MESSAGE  =~ /ci_build_structure/            - $CI_COMMIT_MESSAGE  =~ /ci_build_whitelist/        refs:            - main  HTML_Check:    stage: HTML_Check    before_script:        - !reference [.github_ssh_auth, script]        - !reference [.clone_ci_templates, script]    script:        - python MoCITempGen/CITests/SyntaxTests/html_tidy_errors.py --s BESMod --correct-view --log   --filter-whitelist    after_script:        - export PIP_CACHE_DIR="/opt/cache/pip"        - source activate myenv        - export PYTHONIOENCODING=utf-8        - if cat dymola-ci-tests/Configfiles/exit.sh | grep "exit 1"; then            mkdir CorrectedVersion &&  cd CorrectedVersion ;            git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git;            cd $CI_PROJECT_NAME;            git clone https://github.com/RWTH-EBC/MoCITempGen ;            python MoCITempGen/CITests/SyntaxTests/html_tidy_errors.py --s BESMod --correct-overwrite --filter-whitelist --log;            git checkout -B $Newbranch;            message="CI message from ebc-aixlib-bot. Push new files with corrected html Syntax .";            git add BESMod ;            echo $message;            git commit -m "$message" ;            git push --force git@github.com:$Github_Repository.git;            wait ;            exit 1;          else             exit 0;           fi    artifacts:        when: on_failure        paths:            - BESMod/HTML_correct_log.txt            - BESMod/HTML_error_log.txt        expire_in: 7h    except:        refs:            - external_pull_requests            - /^correct_HTML_.*$/                    variables:            - $CI_COMMIT_MESSAGE  =~ /ci_show_ref/            - $CI_COMMIT_MESSAGE  =~ /ci_create_model_wh/            - $CI_COMMIT_MESSAGE  =~ /ci_create_html_wh/            - $CI_COMMIT_MESSAGE  =~ /ci_create_example_wh/            - $CI_COMMIT_MESSAGE  =~ /ci_simulate/            - $CI_COMMIT_MESSAGE  =~ /ci_check/            - $CI_COMMIT_MESSAGE  =~ /ci_regression_test/            - $CI_COMMIT_MESSAGE  =~ /ci_html/            - $CI_COMMIT_MESSAGE  =~ /ci_setting/            - $CI_COMMIT_MESSAGE  =~ /ci_style_check/            - $CI_COMMIT_MESSAGE  =~ /ci_trigger_ibpsa/            - $CI_COMMIT_MESSAGE  =~ /ci_merge_except/            - $CI_COMMIT_MESSAGE  =~ /ci_correct_html/            - $CI_COMMIT_MESSAGE  =~ /ci_build_structure/            - $CI_COMMIT_MESSAGE  =~ /ci_build_whitelist/CI_HTML_Check:    stage: HTML_Check    before_script:        - !reference [.github_ssh_auth, script]        - !reference [.clone_ci_templates, script]    script:        - python MoCITempGen/CITests/SyntaxTests/html_tidy_errors.py --s BESMod --correct-view --log   --filter-whitelist    after_script:        - export PIP_CACHE_DIR="/opt/cache/pip"        - source activate myenv        - export PYTHONIOENCODING=utf-8        - if cat dymola-ci-tests/Configfiles/exit.sh | grep "exit 1"; then            mkdir CorrectedVersion &&  cd CorrectedVersion ;            git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git;            cd $CI_PROJECT_NAME;            git clone https://github.com/RWTH-EBC/MoCITempGen ;            python MoCITempGen/CITests/SyntaxTests/html_tidy_errors.py --s BESMod --correct-overwrite --filter-whitelist --log;            git checkout -B $Newbranch;            message="CI message from ebc-aixlib-bot. Push new files with corrected html Syntax .";            git add BESMod ;            git commit -m "$message" ;            git push --force git@github.com:$Github_Repository.git;            wait ;            exit 1;          else             exit 0;           fi    artifacts:        when: on_failure        paths:            - BESMod/HTML_correct_log.txt            - BESMod/HTML_error_log.txt        expire_in: 7h    except:        refs:            - external_pull_requests    only:        variables:            - $CI_COMMIT_MESSAGE  =~ /ci_html/html_whitelist_job:    stage: create_html_whitelist    before_script:        - !reference [.clone_ci_templates, script]        - !reference [.github_ssh_auth, script]    script:        - mkdir whitelist && cd whitelist        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git        - cd $CI_PROJECT_NAME        - python ../MoCITempGen/CITests/SyntaxTests/html_tidy_errors.py --whitelist         - message="CI message from ebc-aixlib-bot. Update or created new whitelist. Please pull the new whitelist before push again."        - git add dymola-ci-tests/ci_whitelist/ci_html_whitelist.txt        - git commit -m "$message"        - git push git@github.com:$Github_Repository.git    artifacts:        paths:            - whitelist/$CI_PROJECT_NAME/dymola-ci-tests/ci_whitelist/ci_html_whitelist.txt        expire_in: 7 day     only:        variables:            - $CI_COMMIT_MESSAGE =~ /ci_create_html_wh/    except:        refs:            - external_pull_requests